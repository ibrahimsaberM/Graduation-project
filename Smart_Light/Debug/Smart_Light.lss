
Smart_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005aba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00005aba  00005b4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800168  00800168  00005c56  2**0
                  ALLOC
  3 .stab         00003fcc  00000000  00000000  00005c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ad8  00000000  00000000  00009c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000b6fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000275  00000000  00000000  0000b91c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003510  00000000  00000000  0000bb91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001823  00000000  00000000  0000f0a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000179c  00000000  00000000  000108c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00012060  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003b7  00000000  00000000  000122a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002420  00000000  00000000  00012657  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00014a77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea eb       	ldi	r30, 0xBA	; 186
      78:	fa e5       	ldi	r31, 0x5A	; 90
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 30 2c 	call	0x5860	; 0x5860 <main>
      8a:	0c 94 5b 2d 	jmp	0x5ab6	; 0x5ab6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 82 11 	call	0x2304	; 0x2304 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__subsf3>
      be:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixunssfdi>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <__prologue_saves__>
      f6:	7b 01       	movw	r14, r22
      f8:	8c 01       	movw	r16, r24
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	40 e8       	ldi	r20, 0x80	; 128
     100:	5f e3       	ldi	r21, 0x3F	; 63
     102:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
     106:	88 23       	and	r24, r24
     108:	4c f4       	brge	.+18     	; 0x11c <__fixunssfdi+0x32>
     10a:	aa 24       	eor	r10, r10
     10c:	bb 24       	eor	r11, r11
     10e:	cc 24       	eor	r12, r12
     110:	dd 24       	eor	r13, r13
     112:	ee 24       	eor	r14, r14
     114:	ff 24       	eor	r15, r15
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	86 c0       	rjmp	.+268    	; 0x228 <__fixunssfdi+0x13e>
     11c:	c8 01       	movw	r24, r16
     11e:	b7 01       	movw	r22, r14
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e8       	ldi	r20, 0x80	; 128
     126:	5f e4       	ldi	r21, 0x4F	; 79
     128:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
     12c:	88 23       	and	r24, r24
     12e:	54 f4       	brge	.+20     	; 0x144 <__fixunssfdi+0x5a>
     130:	c8 01       	movw	r24, r16
     132:	b7 01       	movw	r22, r14
     134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     138:	5b 01       	movw	r10, r22
     13a:	6c 01       	movw	r12, r24
     13c:	ee 24       	eor	r14, r14
     13e:	ff 24       	eor	r15, r15
     140:	87 01       	movw	r16, r14
     142:	72 c0       	rjmp	.+228    	; 0x228 <__fixunssfdi+0x13e>
     144:	c8 01       	movw	r24, r16
     146:	b7 01       	movw	r22, r14
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e8       	ldi	r20, 0x80	; 128
     14e:	5f e5       	ldi	r21, 0x5F	; 95
     150:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
     154:	87 fd       	sbrc	r24, 7
     156:	0f c0       	rjmp	.+30     	; 0x176 <__fixunssfdi+0x8c>
     158:	aa 24       	eor	r10, r10
     15a:	aa 94       	dec	r10
     15c:	bb 24       	eor	r11, r11
     15e:	ba 94       	dec	r11
     160:	cc 24       	eor	r12, r12
     162:	ca 94       	dec	r12
     164:	dd 24       	eor	r13, r13
     166:	da 94       	dec	r13
     168:	ee 24       	eor	r14, r14
     16a:	ea 94       	dec	r14
     16c:	ff 24       	eor	r15, r15
     16e:	fa 94       	dec	r15
     170:	0f ef       	ldi	r16, 0xFF	; 255
     172:	1f ef       	ldi	r17, 0xFF	; 255
     174:	59 c0       	rjmp	.+178    	; 0x228 <__fixunssfdi+0x13e>
     176:	c8 01       	movw	r24, r16
     178:	b7 01       	movw	r22, r14
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 e8       	ldi	r20, 0x80	; 128
     180:	5f e2       	ldi	r21, 0x2F	; 47
     182:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
     186:	7b 01       	movw	r14, r22
     188:	8c 01       	movw	r16, r24
     18a:	22 24       	eor	r2, r2
     18c:	33 24       	eor	r3, r3
     18e:	21 01       	movw	r4, r2
     190:	90 e1       	ldi	r25, 0x10	; 16
     192:	a9 2e       	mov	r10, r25
     194:	b1 2c       	mov	r11, r1
     196:	c1 2c       	mov	r12, r1
     198:	d1 2c       	mov	r13, r1
     19a:	c0 e0       	ldi	r28, 0x00	; 0
     19c:	d0 e0       	ldi	r29, 0x00	; 0
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0a 2c       	mov	r0, r10
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__fixunssfdi+0xc8>
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	88 1f       	adc	r24, r24
     1b0:	99 1f       	adc	r25, r25
     1b2:	0a 94       	dec	r0
     1b4:	d2 f7       	brpl	.-12     	; 0x1aa <__fixunssfdi+0xc0>
     1b6:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
     1ba:	3b 01       	movw	r6, r22
     1bc:	4c 01       	movw	r8, r24
     1be:	c8 01       	movw	r24, r16
     1c0:	b7 01       	movw	r22, r14
     1c2:	a4 01       	movw	r20, r8
     1c4:	93 01       	movw	r18, r6
     1c6:	0e 94 82 11 	call	0x2304	; 0x2304 <__gesf2>
     1ca:	88 23       	and	r24, r24
     1cc:	64 f0       	brlt	.+24     	; 0x1e6 <__fixunssfdi+0xfc>
     1ce:	2a 28       	or	r2, r10
     1d0:	3b 28       	or	r3, r11
     1d2:	4c 28       	or	r4, r12
     1d4:	5d 28       	or	r5, r13
     1d6:	c8 01       	movw	r24, r16
     1d8:	b7 01       	movw	r22, r14
     1da:	a4 01       	movw	r20, r8
     1dc:	93 01       	movw	r18, r6
     1de:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
     1e2:	7b 01       	movw	r14, r22
     1e4:	8c 01       	movw	r16, r24
     1e6:	d6 94       	lsr	r13
     1e8:	c7 94       	ror	r12
     1ea:	b7 94       	ror	r11
     1ec:	a7 94       	ror	r10
     1ee:	21 96       	adiw	r28, 0x01	; 1
     1f0:	c5 30       	cpi	r28, 0x05	; 5
     1f2:	d1 05       	cpc	r29, r1
     1f4:	a1 f6       	brne	.-88     	; 0x19e <__fixunssfdi+0xb4>
     1f6:	c8 01       	movw	r24, r16
     1f8:	b7 01       	movw	r22, r14
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e8       	ldi	r20, 0x80	; 128
     200:	5f e4       	ldi	r21, 0x4F	; 79
     202:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
     206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     20a:	5b 01       	movw	r10, r22
     20c:	6c 01       	movw	r12, r24
     20e:	9b 01       	movw	r18, r22
     210:	a6 01       	movw	r20, r12
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 2d       	mov	r16, r2
     21c:	0e 94 af 12 	call	0x255e	; 0x255e <__ashldi3>
     220:	59 01       	movw	r10, r18
     222:	6a 01       	movw	r12, r20
     224:	7b 01       	movw	r14, r22
     226:	8c 01       	movw	r16, r24
     228:	95 01       	movw	r18, r10
     22a:	a6 01       	movw	r20, r12
     22c:	b7 01       	movw	r22, r14
     22e:	c8 01       	movw	r24, r16
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	e2 e1       	ldi	r30, 0x12	; 18
     236:	0c 94 40 2d 	jmp	0x5a80	; 0x5a80 <__epilogue_restores__>

0000023a <__udivdi3>:
     23a:	ae e5       	ldi	r26, 0x5E	; 94
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	e3 e2       	ldi	r30, 0x23	; 35
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <__prologue_saves__>
     246:	a8 e0       	ldi	r26, 0x08	; 8
     248:	4e 01       	movw	r8, r28
     24a:	08 94       	sec
     24c:	81 1c       	adc	r8, r1
     24e:	91 1c       	adc	r9, r1
     250:	f4 01       	movw	r30, r8
     252:	6a 2e       	mov	r6, r26
     254:	11 92       	st	Z+, r1
     256:	6a 94       	dec	r6
     258:	e9 f7       	brne	.-6      	; 0x254 <__udivdi3+0x1a>
     25a:	29 83       	std	Y+1, r18	; 0x01
     25c:	3a 83       	std	Y+2, r19	; 0x02
     25e:	4b 83       	std	Y+3, r20	; 0x03
     260:	5c 83       	std	Y+4, r21	; 0x04
     262:	6d 83       	std	Y+5, r22	; 0x05
     264:	7e 83       	std	Y+6, r23	; 0x06
     266:	8f 83       	std	Y+7, r24	; 0x07
     268:	98 87       	std	Y+8, r25	; 0x08
     26a:	ce 01       	movw	r24, r28
     26c:	09 96       	adiw	r24, 0x09	; 9
     26e:	fc 01       	movw	r30, r24
     270:	11 92       	st	Z+, r1
     272:	aa 95       	dec	r26
     274:	e9 f7       	brne	.-6      	; 0x270 <__udivdi3+0x36>
     276:	a9 86       	std	Y+9, r10	; 0x09
     278:	ba 86       	std	Y+10, r11	; 0x0a
     27a:	cb 86       	std	Y+11, r12	; 0x0b
     27c:	dc 86       	std	Y+12, r13	; 0x0c
     27e:	ed 86       	std	Y+13, r14	; 0x0d
     280:	fe 86       	std	Y+14, r15	; 0x0e
     282:	0f 87       	std	Y+15, r16	; 0x0f
     284:	18 8b       	std	Y+16, r17	; 0x10
     286:	29 84       	ldd	r2, Y+9	; 0x09
     288:	3a 84       	ldd	r3, Y+10	; 0x0a
     28a:	4b 84       	ldd	r4, Y+11	; 0x0b
     28c:	5c 84       	ldd	r5, Y+12	; 0x0c
     28e:	ed 84       	ldd	r14, Y+13	; 0x0d
     290:	fe 84       	ldd	r15, Y+14	; 0x0e
     292:	0f 85       	ldd	r16, Y+15	; 0x0f
     294:	18 89       	ldd	r17, Y+16	; 0x10
     296:	69 80       	ldd	r6, Y+1	; 0x01
     298:	7a 80       	ldd	r7, Y+2	; 0x02
     29a:	8b 80       	ldd	r8, Y+3	; 0x03
     29c:	9c 80       	ldd	r9, Y+4	; 0x04
     29e:	6d a6       	std	Y+45, r6	; 0x2d
     2a0:	7e a6       	std	Y+46, r7	; 0x2e
     2a2:	8f a6       	std	Y+47, r8	; 0x2f
     2a4:	98 aa       	std	Y+48, r9	; 0x30
     2a6:	6d 80       	ldd	r6, Y+5	; 0x05
     2a8:	7e 80       	ldd	r7, Y+6	; 0x06
     2aa:	8f 80       	ldd	r8, Y+7	; 0x07
     2ac:	98 84       	ldd	r9, Y+8	; 0x08
     2ae:	e1 14       	cp	r14, r1
     2b0:	f1 04       	cpc	r15, r1
     2b2:	01 05       	cpc	r16, r1
     2b4:	11 05       	cpc	r17, r1
     2b6:	09 f0       	breq	.+2      	; 0x2ba <__udivdi3+0x80>
     2b8:	b3 c3       	rjmp	.+1894   	; 0xa20 <__stack+0x1c1>
     2ba:	62 14       	cp	r6, r2
     2bc:	73 04       	cpc	r7, r3
     2be:	84 04       	cpc	r8, r4
     2c0:	95 04       	cpc	r9, r5
     2c2:	08 f0       	brcs	.+2      	; 0x2c6 <__udivdi3+0x8c>
     2c4:	3d c1       	rjmp	.+634    	; 0x540 <__udivdi3+0x306>
     2c6:	00 e0       	ldi	r16, 0x00	; 0
     2c8:	20 16       	cp	r2, r16
     2ca:	00 e0       	ldi	r16, 0x00	; 0
     2cc:	30 06       	cpc	r3, r16
     2ce:	01 e0       	ldi	r16, 0x01	; 1
     2d0:	40 06       	cpc	r4, r16
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	50 06       	cpc	r5, r16
     2d6:	88 f4       	brcc	.+34     	; 0x2fa <__udivdi3+0xc0>
     2d8:	1f ef       	ldi	r17, 0xFF	; 255
     2da:	21 16       	cp	r2, r17
     2dc:	31 04       	cpc	r3, r1
     2de:	41 04       	cpc	r4, r1
     2e0:	51 04       	cpc	r5, r1
     2e2:	39 f0       	breq	.+14     	; 0x2f2 <__udivdi3+0xb8>
     2e4:	30 f0       	brcs	.+12     	; 0x2f2 <__udivdi3+0xb8>
     2e6:	48 e0       	ldi	r20, 0x08	; 8
     2e8:	e4 2e       	mov	r14, r20
     2ea:	f1 2c       	mov	r15, r1
     2ec:	01 2d       	mov	r16, r1
     2ee:	11 2d       	mov	r17, r1
     2f0:	18 c0       	rjmp	.+48     	; 0x322 <__udivdi3+0xe8>
     2f2:	ee 24       	eor	r14, r14
     2f4:	ff 24       	eor	r15, r15
     2f6:	87 01       	movw	r16, r14
     2f8:	14 c0       	rjmp	.+40     	; 0x322 <__udivdi3+0xe8>
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	22 16       	cp	r2, r18
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	32 06       	cpc	r3, r18
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	42 06       	cpc	r4, r18
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	52 06       	cpc	r5, r18
     30a:	30 f0       	brcs	.+12     	; 0x318 <__udivdi3+0xde>
     30c:	38 e1       	ldi	r19, 0x18	; 24
     30e:	e3 2e       	mov	r14, r19
     310:	f1 2c       	mov	r15, r1
     312:	01 2d       	mov	r16, r1
     314:	11 2d       	mov	r17, r1
     316:	05 c0       	rjmp	.+10     	; 0x322 <__udivdi3+0xe8>
     318:	20 e1       	ldi	r18, 0x10	; 16
     31a:	e2 2e       	mov	r14, r18
     31c:	f1 2c       	mov	r15, r1
     31e:	01 2d       	mov	r16, r1
     320:	11 2d       	mov	r17, r1
     322:	d2 01       	movw	r26, r4
     324:	c1 01       	movw	r24, r2
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0xf8>
     32a:	b6 95       	lsr	r27
     32c:	a7 95       	ror	r26
     32e:	97 95       	ror	r25
     330:	87 95       	ror	r24
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0xf0>
     336:	88 59       	subi	r24, 0x98	; 152
     338:	9f 4f       	sbci	r25, 0xFF	; 255
     33a:	dc 01       	movw	r26, r24
     33c:	2c 91       	ld	r18, X
     33e:	80 e2       	ldi	r24, 0x20	; 32
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	b0 e0       	ldi	r27, 0x00	; 0
     346:	8e 19       	sub	r24, r14
     348:	9f 09       	sbc	r25, r15
     34a:	a0 0b       	sbc	r26, r16
     34c:	b1 0b       	sbc	r27, r17
     34e:	7c 01       	movw	r14, r24
     350:	8d 01       	movw	r16, r26
     352:	e2 1a       	sub	r14, r18
     354:	f1 08       	sbc	r15, r1
     356:	01 09       	sbc	r16, r1
     358:	11 09       	sbc	r17, r1
     35a:	e1 14       	cp	r14, r1
     35c:	f1 04       	cpc	r15, r1
     35e:	01 05       	cpc	r16, r1
     360:	11 05       	cpc	r17, r1
     362:	a1 f1       	breq	.+104    	; 0x3cc <__udivdi3+0x192>
     364:	0e 2c       	mov	r0, r14
     366:	04 c0       	rjmp	.+8      	; 0x370 <__udivdi3+0x136>
     368:	22 0c       	add	r2, r2
     36a:	33 1c       	adc	r3, r3
     36c:	44 1c       	adc	r4, r4
     36e:	55 1c       	adc	r5, r5
     370:	0a 94       	dec	r0
     372:	d2 f7       	brpl	.-12     	; 0x368 <__udivdi3+0x12e>
     374:	a4 01       	movw	r20, r8
     376:	93 01       	movw	r18, r6
     378:	0e 2c       	mov	r0, r14
     37a:	04 c0       	rjmp	.+8      	; 0x384 <__udivdi3+0x14a>
     37c:	22 0f       	add	r18, r18
     37e:	33 1f       	adc	r19, r19
     380:	44 1f       	adc	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	0a 94       	dec	r0
     386:	d2 f7       	brpl	.-12     	; 0x37c <__udivdi3+0x142>
     388:	80 e2       	ldi	r24, 0x20	; 32
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	8e 19       	sub	r24, r14
     38e:	9f 09       	sbc	r25, r15
     390:	6d a4       	ldd	r6, Y+45	; 0x2d
     392:	7e a4       	ldd	r7, Y+46	; 0x2e
     394:	8f a4       	ldd	r8, Y+47	; 0x2f
     396:	98 a8       	ldd	r9, Y+48	; 0x30
     398:	04 c0       	rjmp	.+8      	; 0x3a2 <__udivdi3+0x168>
     39a:	96 94       	lsr	r9
     39c:	87 94       	ror	r8
     39e:	77 94       	ror	r7
     3a0:	67 94       	ror	r6
     3a2:	8a 95       	dec	r24
     3a4:	d2 f7       	brpl	.-12     	; 0x39a <__udivdi3+0x160>
     3a6:	62 2a       	or	r6, r18
     3a8:	73 2a       	or	r7, r19
     3aa:	84 2a       	or	r8, r20
     3ac:	95 2a       	or	r9, r21
     3ae:	ad a4       	ldd	r10, Y+45	; 0x2d
     3b0:	be a4       	ldd	r11, Y+46	; 0x2e
     3b2:	cf a4       	ldd	r12, Y+47	; 0x2f
     3b4:	d8 a8       	ldd	r13, Y+48	; 0x30
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <__udivdi3+0x186>
     3b8:	aa 0c       	add	r10, r10
     3ba:	bb 1c       	adc	r11, r11
     3bc:	cc 1c       	adc	r12, r12
     3be:	dd 1c       	adc	r13, r13
     3c0:	ea 94       	dec	r14
     3c2:	d2 f7       	brpl	.-12     	; 0x3b8 <__udivdi3+0x17e>
     3c4:	ad a6       	std	Y+45, r10	; 0x2d
     3c6:	be a6       	std	Y+46, r11	; 0x2e
     3c8:	cf a6       	std	Y+47, r12	; 0x2f
     3ca:	d8 aa       	std	Y+48, r13	; 0x30
     3cc:	62 01       	movw	r12, r4
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	cd aa       	std	Y+53, r12	; 0x35
     3d4:	de aa       	std	Y+54, r13	; 0x36
     3d6:	ef aa       	std	Y+55, r14	; 0x37
     3d8:	f8 ae       	std	Y+56, r15	; 0x38
     3da:	92 01       	movw	r18, r4
     3dc:	81 01       	movw	r16, r2
     3de:	20 70       	andi	r18, 0x00	; 0
     3e0:	30 70       	andi	r19, 0x00	; 0
     3e2:	09 af       	std	Y+57, r16	; 0x39
     3e4:	1a af       	std	Y+58, r17	; 0x3a
     3e6:	2b af       	std	Y+59, r18	; 0x3b
     3e8:	3c af       	std	Y+60, r19	; 0x3c
     3ea:	c4 01       	movw	r24, r8
     3ec:	b3 01       	movw	r22, r6
     3ee:	a7 01       	movw	r20, r14
     3f0:	96 01       	movw	r18, r12
     3f2:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     3f6:	7b 01       	movw	r14, r22
     3f8:	8c 01       	movw	r16, r24
     3fa:	c4 01       	movw	r24, r8
     3fc:	b3 01       	movw	r22, r6
     3fe:	2d a9       	ldd	r18, Y+53	; 0x35
     400:	3e a9       	ldd	r19, Y+54	; 0x36
     402:	4f a9       	ldd	r20, Y+55	; 0x37
     404:	58 ad       	ldd	r21, Y+56	; 0x38
     406:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     40a:	c9 01       	movw	r24, r18
     40c:	da 01       	movw	r26, r20
     40e:	3c 01       	movw	r6, r24
     410:	4d 01       	movw	r8, r26
     412:	c4 01       	movw	r24, r8
     414:	b3 01       	movw	r22, r6
     416:	29 ad       	ldd	r18, Y+57	; 0x39
     418:	3a ad       	ldd	r19, Y+58	; 0x3a
     41a:	4b ad       	ldd	r20, Y+59	; 0x3b
     41c:	5c ad       	ldd	r21, Y+60	; 0x3c
     41e:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     422:	9b 01       	movw	r18, r22
     424:	ac 01       	movw	r20, r24
     426:	87 01       	movw	r16, r14
     428:	ff 24       	eor	r15, r15
     42a:	ee 24       	eor	r14, r14
     42c:	ad a4       	ldd	r10, Y+45	; 0x2d
     42e:	be a4       	ldd	r11, Y+46	; 0x2e
     430:	cf a4       	ldd	r12, Y+47	; 0x2f
     432:	d8 a8       	ldd	r13, Y+48	; 0x30
     434:	c6 01       	movw	r24, r12
     436:	aa 27       	eor	r26, r26
     438:	bb 27       	eor	r27, r27
     43a:	57 01       	movw	r10, r14
     43c:	68 01       	movw	r12, r16
     43e:	a8 2a       	or	r10, r24
     440:	b9 2a       	or	r11, r25
     442:	ca 2a       	or	r12, r26
     444:	db 2a       	or	r13, r27
     446:	a2 16       	cp	r10, r18
     448:	b3 06       	cpc	r11, r19
     44a:	c4 06       	cpc	r12, r20
     44c:	d5 06       	cpc	r13, r21
     44e:	e0 f4       	brcc	.+56     	; 0x488 <__udivdi3+0x24e>
     450:	08 94       	sec
     452:	61 08       	sbc	r6, r1
     454:	71 08       	sbc	r7, r1
     456:	81 08       	sbc	r8, r1
     458:	91 08       	sbc	r9, r1
     45a:	a2 0c       	add	r10, r2
     45c:	b3 1c       	adc	r11, r3
     45e:	c4 1c       	adc	r12, r4
     460:	d5 1c       	adc	r13, r5
     462:	a2 14       	cp	r10, r2
     464:	b3 04       	cpc	r11, r3
     466:	c4 04       	cpc	r12, r4
     468:	d5 04       	cpc	r13, r5
     46a:	70 f0       	brcs	.+28     	; 0x488 <__udivdi3+0x24e>
     46c:	a2 16       	cp	r10, r18
     46e:	b3 06       	cpc	r11, r19
     470:	c4 06       	cpc	r12, r20
     472:	d5 06       	cpc	r13, r21
     474:	48 f4       	brcc	.+18     	; 0x488 <__udivdi3+0x24e>
     476:	08 94       	sec
     478:	61 08       	sbc	r6, r1
     47a:	71 08       	sbc	r7, r1
     47c:	81 08       	sbc	r8, r1
     47e:	91 08       	sbc	r9, r1
     480:	a2 0c       	add	r10, r2
     482:	b3 1c       	adc	r11, r3
     484:	c4 1c       	adc	r12, r4
     486:	d5 1c       	adc	r13, r5
     488:	a2 1a       	sub	r10, r18
     48a:	b3 0a       	sbc	r11, r19
     48c:	c4 0a       	sbc	r12, r20
     48e:	d5 0a       	sbc	r13, r21
     490:	c6 01       	movw	r24, r12
     492:	b5 01       	movw	r22, r10
     494:	2d a9       	ldd	r18, Y+53	; 0x35
     496:	3e a9       	ldd	r19, Y+54	; 0x36
     498:	4f a9       	ldd	r20, Y+55	; 0x37
     49a:	58 ad       	ldd	r21, Y+56	; 0x38
     49c:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     4a0:	7b 01       	movw	r14, r22
     4a2:	8c 01       	movw	r16, r24
     4a4:	c6 01       	movw	r24, r12
     4a6:	b5 01       	movw	r22, r10
     4a8:	2d a9       	ldd	r18, Y+53	; 0x35
     4aa:	3e a9       	ldd	r19, Y+54	; 0x36
     4ac:	4f a9       	ldd	r20, Y+55	; 0x37
     4ae:	58 ad       	ldd	r21, Y+56	; 0x38
     4b0:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     4b4:	c9 01       	movw	r24, r18
     4b6:	da 01       	movw	r26, r20
     4b8:	5c 01       	movw	r10, r24
     4ba:	6d 01       	movw	r12, r26
     4bc:	c6 01       	movw	r24, r12
     4be:	b5 01       	movw	r22, r10
     4c0:	29 ad       	ldd	r18, Y+57	; 0x39
     4c2:	3a ad       	ldd	r19, Y+58	; 0x3a
     4c4:	4b ad       	ldd	r20, Y+59	; 0x3b
     4c6:	5c ad       	ldd	r21, Y+60	; 0x3c
     4c8:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     4cc:	9b 01       	movw	r18, r22
     4ce:	ac 01       	movw	r20, r24
     4d0:	87 01       	movw	r16, r14
     4d2:	ff 24       	eor	r15, r15
     4d4:	ee 24       	eor	r14, r14
     4d6:	8d a5       	ldd	r24, Y+45	; 0x2d
     4d8:	9e a5       	ldd	r25, Y+46	; 0x2e
     4da:	af a5       	ldd	r26, Y+47	; 0x2f
     4dc:	b8 a9       	ldd	r27, Y+48	; 0x30
     4de:	a0 70       	andi	r26, 0x00	; 0
     4e0:	b0 70       	andi	r27, 0x00	; 0
     4e2:	e8 2a       	or	r14, r24
     4e4:	f9 2a       	or	r15, r25
     4e6:	0a 2b       	or	r16, r26
     4e8:	1b 2b       	or	r17, r27
     4ea:	e2 16       	cp	r14, r18
     4ec:	f3 06       	cpc	r15, r19
     4ee:	04 07       	cpc	r16, r20
     4f0:	15 07       	cpc	r17, r21
     4f2:	c0 f4       	brcc	.+48     	; 0x524 <__udivdi3+0x2ea>
     4f4:	08 94       	sec
     4f6:	a1 08       	sbc	r10, r1
     4f8:	b1 08       	sbc	r11, r1
     4fa:	c1 08       	sbc	r12, r1
     4fc:	d1 08       	sbc	r13, r1
     4fe:	e2 0c       	add	r14, r2
     500:	f3 1c       	adc	r15, r3
     502:	04 1d       	adc	r16, r4
     504:	15 1d       	adc	r17, r5
     506:	e2 14       	cp	r14, r2
     508:	f3 04       	cpc	r15, r3
     50a:	04 05       	cpc	r16, r4
     50c:	15 05       	cpc	r17, r5
     50e:	50 f0       	brcs	.+20     	; 0x524 <__udivdi3+0x2ea>
     510:	e2 16       	cp	r14, r18
     512:	f3 06       	cpc	r15, r19
     514:	04 07       	cpc	r16, r20
     516:	15 07       	cpc	r17, r21
     518:	28 f4       	brcc	.+10     	; 0x524 <__udivdi3+0x2ea>
     51a:	08 94       	sec
     51c:	a1 08       	sbc	r10, r1
     51e:	b1 08       	sbc	r11, r1
     520:	c1 08       	sbc	r12, r1
     522:	d1 08       	sbc	r13, r1
     524:	d3 01       	movw	r26, r6
     526:	99 27       	eor	r25, r25
     528:	88 27       	eor	r24, r24
     52a:	86 01       	movw	r16, r12
     52c:	75 01       	movw	r14, r10
     52e:	e8 2a       	or	r14, r24
     530:	f9 2a       	or	r15, r25
     532:	0a 2b       	or	r16, r26
     534:	1b 2b       	or	r17, r27
     536:	e9 aa       	std	Y+49, r14	; 0x31
     538:	fa aa       	std	Y+50, r15	; 0x32
     53a:	0b ab       	std	Y+51, r16	; 0x33
     53c:	1c ab       	std	Y+52, r17	; 0x34
     53e:	cf c4       	rjmp	.+2462   	; 0xede <__stack+0x67f>
     540:	21 14       	cp	r2, r1
     542:	31 04       	cpc	r3, r1
     544:	41 04       	cpc	r4, r1
     546:	51 04       	cpc	r5, r1
     548:	71 f4       	brne	.+28     	; 0x566 <__udivdi3+0x32c>
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     55e:	c9 01       	movw	r24, r18
     560:	da 01       	movw	r26, r20
     562:	1c 01       	movw	r2, r24
     564:	2d 01       	movw	r4, r26
     566:	00 e0       	ldi	r16, 0x00	; 0
     568:	20 16       	cp	r2, r16
     56a:	00 e0       	ldi	r16, 0x00	; 0
     56c:	30 06       	cpc	r3, r16
     56e:	01 e0       	ldi	r16, 0x01	; 1
     570:	40 06       	cpc	r4, r16
     572:	00 e0       	ldi	r16, 0x00	; 0
     574:	50 06       	cpc	r5, r16
     576:	88 f4       	brcc	.+34     	; 0x59a <__udivdi3+0x360>
     578:	1f ef       	ldi	r17, 0xFF	; 255
     57a:	21 16       	cp	r2, r17
     57c:	31 04       	cpc	r3, r1
     57e:	41 04       	cpc	r4, r1
     580:	51 04       	cpc	r5, r1
     582:	31 f0       	breq	.+12     	; 0x590 <__udivdi3+0x356>
     584:	28 f0       	brcs	.+10     	; 0x590 <__udivdi3+0x356>
     586:	48 e0       	ldi	r20, 0x08	; 8
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	17 c0       	rjmp	.+46     	; 0x5be <__udivdi3+0x384>
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	12 c0       	rjmp	.+36     	; 0x5be <__udivdi3+0x384>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	22 16       	cp	r2, r18
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	32 06       	cpc	r3, r18
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	42 06       	cpc	r4, r18
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	52 06       	cpc	r5, r18
     5aa:	28 f0       	brcs	.+10     	; 0x5b6 <__udivdi3+0x37c>
     5ac:	48 e1       	ldi	r20, 0x18	; 24
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	04 c0       	rjmp	.+8      	; 0x5be <__udivdi3+0x384>
     5b6:	40 e1       	ldi	r20, 0x10	; 16
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	d2 01       	movw	r26, r4
     5c0:	c1 01       	movw	r24, r2
     5c2:	04 2e       	mov	r0, r20
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <__udivdi3+0x394>
     5c6:	b6 95       	lsr	r27
     5c8:	a7 95       	ror	r26
     5ca:	97 95       	ror	r25
     5cc:	87 95       	ror	r24
     5ce:	0a 94       	dec	r0
     5d0:	d2 f7       	brpl	.-12     	; 0x5c6 <__udivdi3+0x38c>
     5d2:	88 59       	subi	r24, 0x98	; 152
     5d4:	9f 4f       	sbci	r25, 0xFF	; 255
     5d6:	dc 01       	movw	r26, r24
     5d8:	2c 91       	ld	r18, X
     5da:	e0 e2       	ldi	r30, 0x20	; 32
     5dc:	ee 2e       	mov	r14, r30
     5de:	f1 2c       	mov	r15, r1
     5e0:	01 2d       	mov	r16, r1
     5e2:	11 2d       	mov	r17, r1
     5e4:	d8 01       	movw	r26, r16
     5e6:	c7 01       	movw	r24, r14
     5e8:	84 1b       	sub	r24, r20
     5ea:	95 0b       	sbc	r25, r21
     5ec:	a6 0b       	sbc	r26, r22
     5ee:	b7 0b       	sbc	r27, r23
     5f0:	82 1b       	sub	r24, r18
     5f2:	91 09       	sbc	r25, r1
     5f4:	a1 09       	sbc	r26, r1
     5f6:	b1 09       	sbc	r27, r1
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	a1 05       	cpc	r26, r1
     5fc:	b1 05       	cpc	r27, r1
     5fe:	61 f4       	brne	.+24     	; 0x618 <__udivdi3+0x3de>
     600:	64 01       	movw	r12, r8
     602:	53 01       	movw	r10, r6
     604:	a2 18       	sub	r10, r2
     606:	b3 08       	sbc	r11, r3
     608:	c4 08       	sbc	r12, r4
     60a:	d5 08       	sbc	r13, r5
     60c:	31 e0       	ldi	r19, 0x01	; 1
     60e:	63 2e       	mov	r6, r19
     610:	71 2c       	mov	r7, r1
     612:	81 2c       	mov	r8, r1
     614:	91 2c       	mov	r9, r1
     616:	1e c1       	rjmp	.+572    	; 0x854 <__udivdi3+0x61a>
     618:	6f 96       	adiw	r28, 0x1f	; 31
     61a:	8f af       	std	Y+63, r24	; 0x3f
     61c:	6f 97       	sbiw	r28, 0x1f	; 31
     61e:	08 2e       	mov	r0, r24
     620:	04 c0       	rjmp	.+8      	; 0x62a <__udivdi3+0x3f0>
     622:	22 0c       	add	r2, r2
     624:	33 1c       	adc	r3, r3
     626:	44 1c       	adc	r4, r4
     628:	55 1c       	adc	r5, r5
     62a:	0a 94       	dec	r0
     62c:	d2 f7       	brpl	.-12     	; 0x622 <__udivdi3+0x3e8>
     62e:	ee 2d       	mov	r30, r14
     630:	e8 1b       	sub	r30, r24
     632:	64 01       	movw	r12, r8
     634:	53 01       	movw	r10, r6
     636:	0e 2e       	mov	r0, r30
     638:	04 c0       	rjmp	.+8      	; 0x642 <__udivdi3+0x408>
     63a:	d6 94       	lsr	r13
     63c:	c7 94       	ror	r12
     63e:	b7 94       	ror	r11
     640:	a7 94       	ror	r10
     642:	0a 94       	dec	r0
     644:	d2 f7       	brpl	.-12     	; 0x63a <__udivdi3+0x400>
     646:	a4 01       	movw	r20, r8
     648:	93 01       	movw	r18, r6
     64a:	6f 96       	adiw	r28, 0x1f	; 31
     64c:	0f ac       	ldd	r0, Y+63	; 0x3f
     64e:	6f 97       	sbiw	r28, 0x1f	; 31
     650:	04 c0       	rjmp	.+8      	; 0x65a <__udivdi3+0x420>
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	44 1f       	adc	r20, r20
     658:	55 1f       	adc	r21, r21
     65a:	0a 94       	dec	r0
     65c:	d2 f7       	brpl	.-12     	; 0x652 <__udivdi3+0x418>
     65e:	6d a4       	ldd	r6, Y+45	; 0x2d
     660:	7e a4       	ldd	r7, Y+46	; 0x2e
     662:	8f a4       	ldd	r8, Y+47	; 0x2f
     664:	98 a8       	ldd	r9, Y+48	; 0x30
     666:	0e 2e       	mov	r0, r30
     668:	04 c0       	rjmp	.+8      	; 0x672 <__udivdi3+0x438>
     66a:	96 94       	lsr	r9
     66c:	87 94       	ror	r8
     66e:	77 94       	ror	r7
     670:	67 94       	ror	r6
     672:	0a 94       	dec	r0
     674:	d2 f7       	brpl	.-12     	; 0x66a <__udivdi3+0x430>
     676:	84 01       	movw	r16, r8
     678:	73 01       	movw	r14, r6
     67a:	e2 2a       	or	r14, r18
     67c:	f3 2a       	or	r15, r19
     67e:	04 2b       	or	r16, r20
     680:	15 2b       	or	r17, r21
     682:	e9 a6       	std	Y+41, r14	; 0x29
     684:	fa a6       	std	Y+42, r15	; 0x2a
     686:	0b a7       	std	Y+43, r16	; 0x2b
     688:	1c a7       	std	Y+44, r17	; 0x2c
     68a:	32 01       	movw	r6, r4
     68c:	88 24       	eor	r8, r8
     68e:	99 24       	eor	r9, r9
     690:	92 01       	movw	r18, r4
     692:	81 01       	movw	r16, r2
     694:	20 70       	andi	r18, 0x00	; 0
     696:	30 70       	andi	r19, 0x00	; 0
     698:	21 96       	adiw	r28, 0x01	; 1
     69a:	0c af       	std	Y+60, r16	; 0x3c
     69c:	1d af       	std	Y+61, r17	; 0x3d
     69e:	2e af       	std	Y+62, r18	; 0x3e
     6a0:	3f af       	std	Y+63, r19	; 0x3f
     6a2:	21 97       	sbiw	r28, 0x01	; 1
     6a4:	c6 01       	movw	r24, r12
     6a6:	b5 01       	movw	r22, r10
     6a8:	a4 01       	movw	r20, r8
     6aa:	93 01       	movw	r18, r6
     6ac:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     6b0:	7b 01       	movw	r14, r22
     6b2:	8c 01       	movw	r16, r24
     6b4:	c6 01       	movw	r24, r12
     6b6:	b5 01       	movw	r22, r10
     6b8:	a4 01       	movw	r20, r8
     6ba:	93 01       	movw	r18, r6
     6bc:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     6c0:	c9 01       	movw	r24, r18
     6c2:	da 01       	movw	r26, r20
     6c4:	25 96       	adiw	r28, 0x05	; 5
     6c6:	8c af       	std	Y+60, r24	; 0x3c
     6c8:	9d af       	std	Y+61, r25	; 0x3d
     6ca:	ae af       	std	Y+62, r26	; 0x3e
     6cc:	bf af       	std	Y+63, r27	; 0x3f
     6ce:	25 97       	sbiw	r28, 0x05	; 5
     6d0:	bc 01       	movw	r22, r24
     6d2:	cd 01       	movw	r24, r26
     6d4:	21 96       	adiw	r28, 0x01	; 1
     6d6:	2c ad       	ldd	r18, Y+60	; 0x3c
     6d8:	3d ad       	ldd	r19, Y+61	; 0x3d
     6da:	4e ad       	ldd	r20, Y+62	; 0x3e
     6dc:	5f ad       	ldd	r21, Y+63	; 0x3f
     6de:	21 97       	sbiw	r28, 0x01	; 1
     6e0:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	87 01       	movw	r16, r14
     6ea:	ff 24       	eor	r15, r15
     6ec:	ee 24       	eor	r14, r14
     6ee:	a9 a4       	ldd	r10, Y+41	; 0x29
     6f0:	ba a4       	ldd	r11, Y+42	; 0x2a
     6f2:	cb a4       	ldd	r12, Y+43	; 0x2b
     6f4:	dc a4       	ldd	r13, Y+44	; 0x2c
     6f6:	c6 01       	movw	r24, r12
     6f8:	aa 27       	eor	r26, r26
     6fa:	bb 27       	eor	r27, r27
     6fc:	5c 01       	movw	r10, r24
     6fe:	6d 01       	movw	r12, r26
     700:	ae 28       	or	r10, r14
     702:	bf 28       	or	r11, r15
     704:	c0 2a       	or	r12, r16
     706:	d1 2a       	or	r13, r17
     708:	a2 16       	cp	r10, r18
     70a:	b3 06       	cpc	r11, r19
     70c:	c4 06       	cpc	r12, r20
     70e:	d5 06       	cpc	r13, r21
     710:	60 f5       	brcc	.+88     	; 0x76a <__udivdi3+0x530>
     712:	25 96       	adiw	r28, 0x05	; 5
     714:	6c ad       	ldd	r22, Y+60	; 0x3c
     716:	7d ad       	ldd	r23, Y+61	; 0x3d
     718:	8e ad       	ldd	r24, Y+62	; 0x3e
     71a:	9f ad       	ldd	r25, Y+63	; 0x3f
     71c:	25 97       	sbiw	r28, 0x05	; 5
     71e:	61 50       	subi	r22, 0x01	; 1
     720:	70 40       	sbci	r23, 0x00	; 0
     722:	80 40       	sbci	r24, 0x00	; 0
     724:	90 40       	sbci	r25, 0x00	; 0
     726:	25 96       	adiw	r28, 0x05	; 5
     728:	6c af       	std	Y+60, r22	; 0x3c
     72a:	7d af       	std	Y+61, r23	; 0x3d
     72c:	8e af       	std	Y+62, r24	; 0x3e
     72e:	9f af       	std	Y+63, r25	; 0x3f
     730:	25 97       	sbiw	r28, 0x05	; 5
     732:	a2 0c       	add	r10, r2
     734:	b3 1c       	adc	r11, r3
     736:	c4 1c       	adc	r12, r4
     738:	d5 1c       	adc	r13, r5
     73a:	a2 14       	cp	r10, r2
     73c:	b3 04       	cpc	r11, r3
     73e:	c4 04       	cpc	r12, r4
     740:	d5 04       	cpc	r13, r5
     742:	98 f0       	brcs	.+38     	; 0x76a <__udivdi3+0x530>
     744:	a2 16       	cp	r10, r18
     746:	b3 06       	cpc	r11, r19
     748:	c4 06       	cpc	r12, r20
     74a:	d5 06       	cpc	r13, r21
     74c:	70 f4       	brcc	.+28     	; 0x76a <__udivdi3+0x530>
     74e:	61 50       	subi	r22, 0x01	; 1
     750:	70 40       	sbci	r23, 0x00	; 0
     752:	80 40       	sbci	r24, 0x00	; 0
     754:	90 40       	sbci	r25, 0x00	; 0
     756:	25 96       	adiw	r28, 0x05	; 5
     758:	6c af       	std	Y+60, r22	; 0x3c
     75a:	7d af       	std	Y+61, r23	; 0x3d
     75c:	8e af       	std	Y+62, r24	; 0x3e
     75e:	9f af       	std	Y+63, r25	; 0x3f
     760:	25 97       	sbiw	r28, 0x05	; 5
     762:	a2 0c       	add	r10, r2
     764:	b3 1c       	adc	r11, r3
     766:	c4 1c       	adc	r12, r4
     768:	d5 1c       	adc	r13, r5
     76a:	a2 1a       	sub	r10, r18
     76c:	b3 0a       	sbc	r11, r19
     76e:	c4 0a       	sbc	r12, r20
     770:	d5 0a       	sbc	r13, r21
     772:	c6 01       	movw	r24, r12
     774:	b5 01       	movw	r22, r10
     776:	a4 01       	movw	r20, r8
     778:	93 01       	movw	r18, r6
     77a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     77e:	7b 01       	movw	r14, r22
     780:	8c 01       	movw	r16, r24
     782:	c6 01       	movw	r24, r12
     784:	b5 01       	movw	r22, r10
     786:	a4 01       	movw	r20, r8
     788:	93 01       	movw	r18, r6
     78a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     78e:	c9 01       	movw	r24, r18
     790:	da 01       	movw	r26, r20
     792:	3c 01       	movw	r6, r24
     794:	4d 01       	movw	r8, r26
     796:	c4 01       	movw	r24, r8
     798:	b3 01       	movw	r22, r6
     79a:	21 96       	adiw	r28, 0x01	; 1
     79c:	2c ad       	ldd	r18, Y+60	; 0x3c
     79e:	3d ad       	ldd	r19, Y+61	; 0x3d
     7a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     7a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     7a4:	21 97       	sbiw	r28, 0x01	; 1
     7a6:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     7aa:	9b 01       	movw	r18, r22
     7ac:	ac 01       	movw	r20, r24
     7ae:	87 01       	movw	r16, r14
     7b0:	ff 24       	eor	r15, r15
     7b2:	ee 24       	eor	r14, r14
     7b4:	89 a5       	ldd	r24, Y+41	; 0x29
     7b6:	9a a5       	ldd	r25, Y+42	; 0x2a
     7b8:	ab a5       	ldd	r26, Y+43	; 0x2b
     7ba:	bc a5       	ldd	r27, Y+44	; 0x2c
     7bc:	a0 70       	andi	r26, 0x00	; 0
     7be:	b0 70       	andi	r27, 0x00	; 0
     7c0:	57 01       	movw	r10, r14
     7c2:	68 01       	movw	r12, r16
     7c4:	a8 2a       	or	r10, r24
     7c6:	b9 2a       	or	r11, r25
     7c8:	ca 2a       	or	r12, r26
     7ca:	db 2a       	or	r13, r27
     7cc:	a2 16       	cp	r10, r18
     7ce:	b3 06       	cpc	r11, r19
     7d0:	c4 06       	cpc	r12, r20
     7d2:	d5 06       	cpc	r13, r21
     7d4:	e0 f4       	brcc	.+56     	; 0x80e <__udivdi3+0x5d4>
     7d6:	08 94       	sec
     7d8:	61 08       	sbc	r6, r1
     7da:	71 08       	sbc	r7, r1
     7dc:	81 08       	sbc	r8, r1
     7de:	91 08       	sbc	r9, r1
     7e0:	a2 0c       	add	r10, r2
     7e2:	b3 1c       	adc	r11, r3
     7e4:	c4 1c       	adc	r12, r4
     7e6:	d5 1c       	adc	r13, r5
     7e8:	a2 14       	cp	r10, r2
     7ea:	b3 04       	cpc	r11, r3
     7ec:	c4 04       	cpc	r12, r4
     7ee:	d5 04       	cpc	r13, r5
     7f0:	70 f0       	brcs	.+28     	; 0x80e <__udivdi3+0x5d4>
     7f2:	a2 16       	cp	r10, r18
     7f4:	b3 06       	cpc	r11, r19
     7f6:	c4 06       	cpc	r12, r20
     7f8:	d5 06       	cpc	r13, r21
     7fa:	48 f4       	brcc	.+18     	; 0x80e <__udivdi3+0x5d4>
     7fc:	08 94       	sec
     7fe:	61 08       	sbc	r6, r1
     800:	71 08       	sbc	r7, r1
     802:	81 08       	sbc	r8, r1
     804:	91 08       	sbc	r9, r1
     806:	a2 0c       	add	r10, r2
     808:	b3 1c       	adc	r11, r3
     80a:	c4 1c       	adc	r12, r4
     80c:	d5 1c       	adc	r13, r5
     80e:	8d a5       	ldd	r24, Y+45	; 0x2d
     810:	9e a5       	ldd	r25, Y+46	; 0x2e
     812:	af a5       	ldd	r26, Y+47	; 0x2f
     814:	b8 a9       	ldd	r27, Y+48	; 0x30
     816:	6f 96       	adiw	r28, 0x1f	; 31
     818:	0f ac       	ldd	r0, Y+63	; 0x3f
     81a:	6f 97       	sbiw	r28, 0x1f	; 31
     81c:	04 c0       	rjmp	.+8      	; 0x826 <__udivdi3+0x5ec>
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	aa 1f       	adc	r26, r26
     824:	bb 1f       	adc	r27, r27
     826:	0a 94       	dec	r0
     828:	d2 f7       	brpl	.-12     	; 0x81e <__udivdi3+0x5e4>
     82a:	8d a7       	std	Y+45, r24	; 0x2d
     82c:	9e a7       	std	Y+46, r25	; 0x2e
     82e:	af a7       	std	Y+47, r26	; 0x2f
     830:	b8 ab       	std	Y+48, r27	; 0x30
     832:	a2 1a       	sub	r10, r18
     834:	b3 0a       	sbc	r11, r19
     836:	c4 0a       	sbc	r12, r20
     838:	d5 0a       	sbc	r13, r21
     83a:	25 96       	adiw	r28, 0x05	; 5
     83c:	ec ac       	ldd	r14, Y+60	; 0x3c
     83e:	fd ac       	ldd	r15, Y+61	; 0x3d
     840:	0e ad       	ldd	r16, Y+62	; 0x3e
     842:	1f ad       	ldd	r17, Y+63	; 0x3f
     844:	25 97       	sbiw	r28, 0x05	; 5
     846:	d7 01       	movw	r26, r14
     848:	99 27       	eor	r25, r25
     84a:	88 27       	eor	r24, r24
     84c:	68 2a       	or	r6, r24
     84e:	79 2a       	or	r7, r25
     850:	8a 2a       	or	r8, r26
     852:	9b 2a       	or	r9, r27
     854:	82 01       	movw	r16, r4
     856:	22 27       	eor	r18, r18
     858:	33 27       	eor	r19, r19
     85a:	29 96       	adiw	r28, 0x09	; 9
     85c:	0c af       	std	Y+60, r16	; 0x3c
     85e:	1d af       	std	Y+61, r17	; 0x3d
     860:	2e af       	std	Y+62, r18	; 0x3e
     862:	3f af       	std	Y+63, r19	; 0x3f
     864:	29 97       	sbiw	r28, 0x09	; 9
     866:	a2 01       	movw	r20, r4
     868:	91 01       	movw	r18, r2
     86a:	40 70       	andi	r20, 0x00	; 0
     86c:	50 70       	andi	r21, 0x00	; 0
     86e:	2d 96       	adiw	r28, 0x0d	; 13
     870:	2c af       	std	Y+60, r18	; 0x3c
     872:	3d af       	std	Y+61, r19	; 0x3d
     874:	4e af       	std	Y+62, r20	; 0x3e
     876:	5f af       	std	Y+63, r21	; 0x3f
     878:	2d 97       	sbiw	r28, 0x0d	; 13
     87a:	c6 01       	movw	r24, r12
     87c:	b5 01       	movw	r22, r10
     87e:	29 96       	adiw	r28, 0x09	; 9
     880:	2c ad       	ldd	r18, Y+60	; 0x3c
     882:	3d ad       	ldd	r19, Y+61	; 0x3d
     884:	4e ad       	ldd	r20, Y+62	; 0x3e
     886:	5f ad       	ldd	r21, Y+63	; 0x3f
     888:	29 97       	sbiw	r28, 0x09	; 9
     88a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     88e:	7b 01       	movw	r14, r22
     890:	8c 01       	movw	r16, r24
     892:	c6 01       	movw	r24, r12
     894:	b5 01       	movw	r22, r10
     896:	29 96       	adiw	r28, 0x09	; 9
     898:	2c ad       	ldd	r18, Y+60	; 0x3c
     89a:	3d ad       	ldd	r19, Y+61	; 0x3d
     89c:	4e ad       	ldd	r20, Y+62	; 0x3e
     89e:	5f ad       	ldd	r21, Y+63	; 0x3f
     8a0:	29 97       	sbiw	r28, 0x09	; 9
     8a2:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     8a6:	c9 01       	movw	r24, r18
     8a8:	da 01       	movw	r26, r20
     8aa:	61 96       	adiw	r28, 0x11	; 17
     8ac:	8c af       	std	Y+60, r24	; 0x3c
     8ae:	9d af       	std	Y+61, r25	; 0x3d
     8b0:	ae af       	std	Y+62, r26	; 0x3e
     8b2:	bf af       	std	Y+63, r27	; 0x3f
     8b4:	61 97       	sbiw	r28, 0x11	; 17
     8b6:	bc 01       	movw	r22, r24
     8b8:	cd 01       	movw	r24, r26
     8ba:	2d 96       	adiw	r28, 0x0d	; 13
     8bc:	2c ad       	ldd	r18, Y+60	; 0x3c
     8be:	3d ad       	ldd	r19, Y+61	; 0x3d
     8c0:	4e ad       	ldd	r20, Y+62	; 0x3e
     8c2:	5f ad       	ldd	r21, Y+63	; 0x3f
     8c4:	2d 97       	sbiw	r28, 0x0d	; 13
     8c6:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     8ca:	9b 01       	movw	r18, r22
     8cc:	ac 01       	movw	r20, r24
     8ce:	87 01       	movw	r16, r14
     8d0:	ff 24       	eor	r15, r15
     8d2:	ee 24       	eor	r14, r14
     8d4:	ad a4       	ldd	r10, Y+45	; 0x2d
     8d6:	be a4       	ldd	r11, Y+46	; 0x2e
     8d8:	cf a4       	ldd	r12, Y+47	; 0x2f
     8da:	d8 a8       	ldd	r13, Y+48	; 0x30
     8dc:	c6 01       	movw	r24, r12
     8de:	aa 27       	eor	r26, r26
     8e0:	bb 27       	eor	r27, r27
     8e2:	57 01       	movw	r10, r14
     8e4:	68 01       	movw	r12, r16
     8e6:	a8 2a       	or	r10, r24
     8e8:	b9 2a       	or	r11, r25
     8ea:	ca 2a       	or	r12, r26
     8ec:	db 2a       	or	r13, r27
     8ee:	a2 16       	cp	r10, r18
     8f0:	b3 06       	cpc	r11, r19
     8f2:	c4 06       	cpc	r12, r20
     8f4:	d5 06       	cpc	r13, r21
     8f6:	60 f5       	brcc	.+88     	; 0x950 <__stack+0xf1>
     8f8:	61 96       	adiw	r28, 0x11	; 17
     8fa:	6c ad       	ldd	r22, Y+60	; 0x3c
     8fc:	7d ad       	ldd	r23, Y+61	; 0x3d
     8fe:	8e ad       	ldd	r24, Y+62	; 0x3e
     900:	9f ad       	ldd	r25, Y+63	; 0x3f
     902:	61 97       	sbiw	r28, 0x11	; 17
     904:	61 50       	subi	r22, 0x01	; 1
     906:	70 40       	sbci	r23, 0x00	; 0
     908:	80 40       	sbci	r24, 0x00	; 0
     90a:	90 40       	sbci	r25, 0x00	; 0
     90c:	61 96       	adiw	r28, 0x11	; 17
     90e:	6c af       	std	Y+60, r22	; 0x3c
     910:	7d af       	std	Y+61, r23	; 0x3d
     912:	8e af       	std	Y+62, r24	; 0x3e
     914:	9f af       	std	Y+63, r25	; 0x3f
     916:	61 97       	sbiw	r28, 0x11	; 17
     918:	a2 0c       	add	r10, r2
     91a:	b3 1c       	adc	r11, r3
     91c:	c4 1c       	adc	r12, r4
     91e:	d5 1c       	adc	r13, r5
     920:	a2 14       	cp	r10, r2
     922:	b3 04       	cpc	r11, r3
     924:	c4 04       	cpc	r12, r4
     926:	d5 04       	cpc	r13, r5
     928:	98 f0       	brcs	.+38     	; 0x950 <__stack+0xf1>
     92a:	a2 16       	cp	r10, r18
     92c:	b3 06       	cpc	r11, r19
     92e:	c4 06       	cpc	r12, r20
     930:	d5 06       	cpc	r13, r21
     932:	70 f4       	brcc	.+28     	; 0x950 <__stack+0xf1>
     934:	61 50       	subi	r22, 0x01	; 1
     936:	70 40       	sbci	r23, 0x00	; 0
     938:	80 40       	sbci	r24, 0x00	; 0
     93a:	90 40       	sbci	r25, 0x00	; 0
     93c:	61 96       	adiw	r28, 0x11	; 17
     93e:	6c af       	std	Y+60, r22	; 0x3c
     940:	7d af       	std	Y+61, r23	; 0x3d
     942:	8e af       	std	Y+62, r24	; 0x3e
     944:	9f af       	std	Y+63, r25	; 0x3f
     946:	61 97       	sbiw	r28, 0x11	; 17
     948:	a2 0c       	add	r10, r2
     94a:	b3 1c       	adc	r11, r3
     94c:	c4 1c       	adc	r12, r4
     94e:	d5 1c       	adc	r13, r5
     950:	a2 1a       	sub	r10, r18
     952:	b3 0a       	sbc	r11, r19
     954:	c4 0a       	sbc	r12, r20
     956:	d5 0a       	sbc	r13, r21
     958:	c6 01       	movw	r24, r12
     95a:	b5 01       	movw	r22, r10
     95c:	29 96       	adiw	r28, 0x09	; 9
     95e:	2c ad       	ldd	r18, Y+60	; 0x3c
     960:	3d ad       	ldd	r19, Y+61	; 0x3d
     962:	4e ad       	ldd	r20, Y+62	; 0x3e
     964:	5f ad       	ldd	r21, Y+63	; 0x3f
     966:	29 97       	sbiw	r28, 0x09	; 9
     968:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     96c:	7b 01       	movw	r14, r22
     96e:	8c 01       	movw	r16, r24
     970:	c6 01       	movw	r24, r12
     972:	b5 01       	movw	r22, r10
     974:	29 96       	adiw	r28, 0x09	; 9
     976:	2c ad       	ldd	r18, Y+60	; 0x3c
     978:	3d ad       	ldd	r19, Y+61	; 0x3d
     97a:	4e ad       	ldd	r20, Y+62	; 0x3e
     97c:	5f ad       	ldd	r21, Y+63	; 0x3f
     97e:	29 97       	sbiw	r28, 0x09	; 9
     980:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     984:	c9 01       	movw	r24, r18
     986:	da 01       	movw	r26, r20
     988:	5c 01       	movw	r10, r24
     98a:	6d 01       	movw	r12, r26
     98c:	c6 01       	movw	r24, r12
     98e:	b5 01       	movw	r22, r10
     990:	2d 96       	adiw	r28, 0x0d	; 13
     992:	2c ad       	ldd	r18, Y+60	; 0x3c
     994:	3d ad       	ldd	r19, Y+61	; 0x3d
     996:	4e ad       	ldd	r20, Y+62	; 0x3e
     998:	5f ad       	ldd	r21, Y+63	; 0x3f
     99a:	2d 97       	sbiw	r28, 0x0d	; 13
     99c:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	87 01       	movw	r16, r14
     9a6:	ff 24       	eor	r15, r15
     9a8:	ee 24       	eor	r14, r14
     9aa:	8d a5       	ldd	r24, Y+45	; 0x2d
     9ac:	9e a5       	ldd	r25, Y+46	; 0x2e
     9ae:	af a5       	ldd	r26, Y+47	; 0x2f
     9b0:	b8 a9       	ldd	r27, Y+48	; 0x30
     9b2:	a0 70       	andi	r26, 0x00	; 0
     9b4:	b0 70       	andi	r27, 0x00	; 0
     9b6:	e8 2a       	or	r14, r24
     9b8:	f9 2a       	or	r15, r25
     9ba:	0a 2b       	or	r16, r26
     9bc:	1b 2b       	or	r17, r27
     9be:	e2 16       	cp	r14, r18
     9c0:	f3 06       	cpc	r15, r19
     9c2:	04 07       	cpc	r16, r20
     9c4:	15 07       	cpc	r17, r21
     9c6:	c0 f4       	brcc	.+48     	; 0x9f8 <__stack+0x199>
     9c8:	08 94       	sec
     9ca:	a1 08       	sbc	r10, r1
     9cc:	b1 08       	sbc	r11, r1
     9ce:	c1 08       	sbc	r12, r1
     9d0:	d1 08       	sbc	r13, r1
     9d2:	e2 0c       	add	r14, r2
     9d4:	f3 1c       	adc	r15, r3
     9d6:	04 1d       	adc	r16, r4
     9d8:	15 1d       	adc	r17, r5
     9da:	e2 14       	cp	r14, r2
     9dc:	f3 04       	cpc	r15, r3
     9de:	04 05       	cpc	r16, r4
     9e0:	15 05       	cpc	r17, r5
     9e2:	50 f0       	brcs	.+20     	; 0x9f8 <__stack+0x199>
     9e4:	e2 16       	cp	r14, r18
     9e6:	f3 06       	cpc	r15, r19
     9e8:	04 07       	cpc	r16, r20
     9ea:	15 07       	cpc	r17, r21
     9ec:	28 f4       	brcc	.+10     	; 0x9f8 <__stack+0x199>
     9ee:	08 94       	sec
     9f0:	a1 08       	sbc	r10, r1
     9f2:	b1 08       	sbc	r11, r1
     9f4:	c1 08       	sbc	r12, r1
     9f6:	d1 08       	sbc	r13, r1
     9f8:	61 96       	adiw	r28, 0x11	; 17
     9fa:	ec ac       	ldd	r14, Y+60	; 0x3c
     9fc:	fd ac       	ldd	r15, Y+61	; 0x3d
     9fe:	0e ad       	ldd	r16, Y+62	; 0x3e
     a00:	1f ad       	ldd	r17, Y+63	; 0x3f
     a02:	61 97       	sbiw	r28, 0x11	; 17
     a04:	d7 01       	movw	r26, r14
     a06:	99 27       	eor	r25, r25
     a08:	88 27       	eor	r24, r24
     a0a:	96 01       	movw	r18, r12
     a0c:	85 01       	movw	r16, r10
     a0e:	08 2b       	or	r16, r24
     a10:	19 2b       	or	r17, r25
     a12:	2a 2b       	or	r18, r26
     a14:	3b 2b       	or	r19, r27
     a16:	09 ab       	std	Y+49, r16	; 0x31
     a18:	1a ab       	std	Y+50, r17	; 0x32
     a1a:	2b ab       	std	Y+51, r18	; 0x33
     a1c:	3c ab       	std	Y+52, r19	; 0x34
     a1e:	62 c2       	rjmp	.+1220   	; 0xee4 <__stack+0x685>
     a20:	6e 14       	cp	r6, r14
     a22:	7f 04       	cpc	r7, r15
     a24:	80 06       	cpc	r8, r16
     a26:	91 06       	cpc	r9, r17
     a28:	08 f4       	brcc	.+2      	; 0xa2c <__stack+0x1cd>
     a2a:	51 c2       	rjmp	.+1186   	; 0xece <__stack+0x66f>
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	e2 16       	cp	r14, r18
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	f2 06       	cpc	r15, r18
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	02 07       	cpc	r16, r18
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	12 07       	cpc	r17, r18
     a3c:	88 f4       	brcc	.+34     	; 0xa60 <__stack+0x201>
     a3e:	3f ef       	ldi	r19, 0xFF	; 255
     a40:	e3 16       	cp	r14, r19
     a42:	f1 04       	cpc	r15, r1
     a44:	01 05       	cpc	r16, r1
     a46:	11 05       	cpc	r17, r1
     a48:	31 f0       	breq	.+12     	; 0xa56 <__stack+0x1f7>
     a4a:	28 f0       	brcs	.+10     	; 0xa56 <__stack+0x1f7>
     a4c:	48 e0       	ldi	r20, 0x08	; 8
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	17 c0       	rjmp	.+46     	; 0xa84 <__stack+0x225>
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	12 c0       	rjmp	.+36     	; 0xa84 <__stack+0x225>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	e4 16       	cp	r14, r20
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	f4 06       	cpc	r15, r20
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	04 07       	cpc	r16, r20
     a6c:	41 e0       	ldi	r20, 0x01	; 1
     a6e:	14 07       	cpc	r17, r20
     a70:	28 f0       	brcs	.+10     	; 0xa7c <__stack+0x21d>
     a72:	48 e1       	ldi	r20, 0x18	; 24
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__stack+0x225>
     a7c:	40 e1       	ldi	r20, 0x10	; 16
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	d8 01       	movw	r26, r16
     a86:	c7 01       	movw	r24, r14
     a88:	04 2e       	mov	r0, r20
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__stack+0x235>
     a8c:	b6 95       	lsr	r27
     a8e:	a7 95       	ror	r26
     a90:	97 95       	ror	r25
     a92:	87 95       	ror	r24
     a94:	0a 94       	dec	r0
     a96:	d2 f7       	brpl	.-12     	; 0xa8c <__stack+0x22d>
     a98:	88 59       	subi	r24, 0x98	; 152
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	dc 01       	movw	r26, r24
     a9e:	2c 91       	ld	r18, X
     aa0:	30 e2       	ldi	r19, 0x20	; 32
     aa2:	a3 2e       	mov	r10, r19
     aa4:	b1 2c       	mov	r11, r1
     aa6:	c1 2c       	mov	r12, r1
     aa8:	d1 2c       	mov	r13, r1
     aaa:	d6 01       	movw	r26, r12
     aac:	c5 01       	movw	r24, r10
     aae:	84 1b       	sub	r24, r20
     ab0:	95 0b       	sbc	r25, r21
     ab2:	a6 0b       	sbc	r26, r22
     ab4:	b7 0b       	sbc	r27, r23
     ab6:	82 1b       	sub	r24, r18
     ab8:	91 09       	sbc	r25, r1
     aba:	a1 09       	sbc	r26, r1
     abc:	b1 09       	sbc	r27, r1
     abe:	00 97       	sbiw	r24, 0x00	; 0
     ac0:	a1 05       	cpc	r26, r1
     ac2:	b1 05       	cpc	r27, r1
     ac4:	89 f4       	brne	.+34     	; 0xae8 <__stack+0x289>
     ac6:	e6 14       	cp	r14, r6
     ac8:	f7 04       	cpc	r15, r7
     aca:	08 05       	cpc	r16, r8
     acc:	19 05       	cpc	r17, r9
     ace:	08 f4       	brcc	.+2      	; 0xad2 <__stack+0x273>
     ad0:	f2 c1       	rjmp	.+996    	; 0xeb6 <__stack+0x657>
     ad2:	6d a4       	ldd	r6, Y+45	; 0x2d
     ad4:	7e a4       	ldd	r7, Y+46	; 0x2e
     ad6:	8f a4       	ldd	r8, Y+47	; 0x2f
     ad8:	98 a8       	ldd	r9, Y+48	; 0x30
     ada:	62 14       	cp	r6, r2
     adc:	73 04       	cpc	r7, r3
     ade:	84 04       	cpc	r8, r4
     ae0:	95 04       	cpc	r9, r5
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <__stack+0x287>
     ae4:	e8 c1       	rjmp	.+976    	; 0xeb6 <__stack+0x657>
     ae6:	f3 c1       	rjmp	.+998    	; 0xece <__stack+0x66f>
     ae8:	6e 96       	adiw	r28, 0x1e	; 30
     aea:	8f af       	std	Y+63, r24	; 0x3f
     aec:	6e 97       	sbiw	r28, 0x1e	; 30
     aee:	08 2e       	mov	r0, r24
     af0:	04 c0       	rjmp	.+8      	; 0xafa <__stack+0x29b>
     af2:	ee 0c       	add	r14, r14
     af4:	ff 1c       	adc	r15, r15
     af6:	00 1f       	adc	r16, r16
     af8:	11 1f       	adc	r17, r17
     afa:	0a 94       	dec	r0
     afc:	d2 f7       	brpl	.-12     	; 0xaf2 <__stack+0x293>
     afe:	6a 2d       	mov	r22, r10
     b00:	68 1b       	sub	r22, r24
     b02:	d2 01       	movw	r26, r4
     b04:	c1 01       	movw	r24, r2
     b06:	06 2e       	mov	r0, r22
     b08:	04 c0       	rjmp	.+8      	; 0xb12 <__stack+0x2b3>
     b0a:	b6 95       	lsr	r27
     b0c:	a7 95       	ror	r26
     b0e:	97 95       	ror	r25
     b10:	87 95       	ror	r24
     b12:	0a 94       	dec	r0
     b14:	d2 f7       	brpl	.-12     	; 0xb0a <__stack+0x2ab>
     b16:	5c 01       	movw	r10, r24
     b18:	6d 01       	movw	r12, r26
     b1a:	ae 28       	or	r10, r14
     b1c:	bf 28       	or	r11, r15
     b1e:	c0 2a       	or	r12, r16
     b20:	d1 2a       	or	r13, r17
     b22:	ad a2       	std	Y+37, r10	; 0x25
     b24:	be a2       	std	Y+38, r11	; 0x26
     b26:	cf a2       	std	Y+39, r12	; 0x27
     b28:	d8 a6       	std	Y+40, r13	; 0x28
     b2a:	72 01       	movw	r14, r4
     b2c:	61 01       	movw	r12, r2
     b2e:	6e 96       	adiw	r28, 0x1e	; 30
     b30:	0f ac       	ldd	r0, Y+63	; 0x3f
     b32:	6e 97       	sbiw	r28, 0x1e	; 30
     b34:	04 c0       	rjmp	.+8      	; 0xb3e <__stack+0x2df>
     b36:	cc 0c       	add	r12, r12
     b38:	dd 1c       	adc	r13, r13
     b3a:	ee 1c       	adc	r14, r14
     b3c:	ff 1c       	adc	r15, r15
     b3e:	0a 94       	dec	r0
     b40:	d2 f7       	brpl	.-12     	; 0xb36 <__stack+0x2d7>
     b42:	c9 a2       	std	Y+33, r12	; 0x21
     b44:	da a2       	std	Y+34, r13	; 0x22
     b46:	eb a2       	std	Y+35, r14	; 0x23
     b48:	fc a2       	std	Y+36, r15	; 0x24
     b4a:	64 01       	movw	r12, r8
     b4c:	53 01       	movw	r10, r6
     b4e:	06 2e       	mov	r0, r22
     b50:	04 c0       	rjmp	.+8      	; 0xb5a <__stack+0x2fb>
     b52:	d6 94       	lsr	r13
     b54:	c7 94       	ror	r12
     b56:	b7 94       	ror	r11
     b58:	a7 94       	ror	r10
     b5a:	0a 94       	dec	r0
     b5c:	d2 f7       	brpl	.-12     	; 0xb52 <__stack+0x2f3>
     b5e:	d4 01       	movw	r26, r8
     b60:	c3 01       	movw	r24, r6
     b62:	6e 96       	adiw	r28, 0x1e	; 30
     b64:	0f ac       	ldd	r0, Y+63	; 0x3f
     b66:	6e 97       	sbiw	r28, 0x1e	; 30
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <__stack+0x313>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	aa 1f       	adc	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	0a 94       	dec	r0
     b74:	d2 f7       	brpl	.-12     	; 0xb6a <__stack+0x30b>
     b76:	ed a4       	ldd	r14, Y+45	; 0x2d
     b78:	fe a4       	ldd	r15, Y+46	; 0x2e
     b7a:	0f a5       	ldd	r16, Y+47	; 0x2f
     b7c:	18 a9       	ldd	r17, Y+48	; 0x30
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__stack+0x329>
     b80:	16 95       	lsr	r17
     b82:	07 95       	ror	r16
     b84:	f7 94       	ror	r15
     b86:	e7 94       	ror	r14
     b88:	6a 95       	dec	r22
     b8a:	d2 f7       	brpl	.-12     	; 0xb80 <__stack+0x321>
     b8c:	37 01       	movw	r6, r14
     b8e:	48 01       	movw	r8, r16
     b90:	68 2a       	or	r6, r24
     b92:	79 2a       	or	r7, r25
     b94:	8a 2a       	or	r8, r26
     b96:	9b 2a       	or	r9, r27
     b98:	6d 8e       	std	Y+29, r6	; 0x1d
     b9a:	7e 8e       	std	Y+30, r7	; 0x1e
     b9c:	8f 8e       	std	Y+31, r8	; 0x1f
     b9e:	98 a2       	std	Y+32, r9	; 0x20
     ba0:	ed a0       	ldd	r14, Y+37	; 0x25
     ba2:	fe a0       	ldd	r15, Y+38	; 0x26
     ba4:	0f a1       	ldd	r16, Y+39	; 0x27
     ba6:	18 a5       	ldd	r17, Y+40	; 0x28
     ba8:	38 01       	movw	r6, r16
     baa:	88 24       	eor	r8, r8
     bac:	99 24       	eor	r9, r9
     bae:	98 01       	movw	r18, r16
     bb0:	87 01       	movw	r16, r14
     bb2:	20 70       	andi	r18, 0x00	; 0
     bb4:	30 70       	andi	r19, 0x00	; 0
     bb6:	65 96       	adiw	r28, 0x15	; 21
     bb8:	0c af       	std	Y+60, r16	; 0x3c
     bba:	1d af       	std	Y+61, r17	; 0x3d
     bbc:	2e af       	std	Y+62, r18	; 0x3e
     bbe:	3f af       	std	Y+63, r19	; 0x3f
     bc0:	65 97       	sbiw	r28, 0x15	; 21
     bc2:	c6 01       	movw	r24, r12
     bc4:	b5 01       	movw	r22, r10
     bc6:	a4 01       	movw	r20, r8
     bc8:	93 01       	movw	r18, r6
     bca:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     bce:	7b 01       	movw	r14, r22
     bd0:	8c 01       	movw	r16, r24
     bd2:	c6 01       	movw	r24, r12
     bd4:	b5 01       	movw	r22, r10
     bd6:	a4 01       	movw	r20, r8
     bd8:	93 01       	movw	r18, r6
     bda:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     bde:	c9 01       	movw	r24, r18
     be0:	da 01       	movw	r26, r20
     be2:	1c 01       	movw	r2, r24
     be4:	2d 01       	movw	r4, r26
     be6:	c2 01       	movw	r24, r4
     be8:	b1 01       	movw	r22, r2
     bea:	65 96       	adiw	r28, 0x15	; 21
     bec:	2c ad       	ldd	r18, Y+60	; 0x3c
     bee:	3d ad       	ldd	r19, Y+61	; 0x3d
     bf0:	4e ad       	ldd	r20, Y+62	; 0x3e
     bf2:	5f ad       	ldd	r21, Y+63	; 0x3f
     bf4:	65 97       	sbiw	r28, 0x15	; 21
     bf6:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
     bfe:	87 01       	movw	r16, r14
     c00:	ff 24       	eor	r15, r15
     c02:	ee 24       	eor	r14, r14
     c04:	ad 8c       	ldd	r10, Y+29	; 0x1d
     c06:	be 8c       	ldd	r11, Y+30	; 0x1e
     c08:	cf 8c       	ldd	r12, Y+31	; 0x1f
     c0a:	d8 a0       	ldd	r13, Y+32	; 0x20
     c0c:	c6 01       	movw	r24, r12
     c0e:	aa 27       	eor	r26, r26
     c10:	bb 27       	eor	r27, r27
     c12:	57 01       	movw	r10, r14
     c14:	68 01       	movw	r12, r16
     c16:	a8 2a       	or	r10, r24
     c18:	b9 2a       	or	r11, r25
     c1a:	ca 2a       	or	r12, r26
     c1c:	db 2a       	or	r13, r27
     c1e:	a2 16       	cp	r10, r18
     c20:	b3 06       	cpc	r11, r19
     c22:	c4 06       	cpc	r12, r20
     c24:	d5 06       	cpc	r13, r21
     c26:	00 f5       	brcc	.+64     	; 0xc68 <__stack+0x409>
     c28:	08 94       	sec
     c2a:	21 08       	sbc	r2, r1
     c2c:	31 08       	sbc	r3, r1
     c2e:	41 08       	sbc	r4, r1
     c30:	51 08       	sbc	r5, r1
     c32:	ed a0       	ldd	r14, Y+37	; 0x25
     c34:	fe a0       	ldd	r15, Y+38	; 0x26
     c36:	0f a1       	ldd	r16, Y+39	; 0x27
     c38:	18 a5       	ldd	r17, Y+40	; 0x28
     c3a:	ae 0c       	add	r10, r14
     c3c:	bf 1c       	adc	r11, r15
     c3e:	c0 1e       	adc	r12, r16
     c40:	d1 1e       	adc	r13, r17
     c42:	ae 14       	cp	r10, r14
     c44:	bf 04       	cpc	r11, r15
     c46:	c0 06       	cpc	r12, r16
     c48:	d1 06       	cpc	r13, r17
     c4a:	70 f0       	brcs	.+28     	; 0xc68 <__stack+0x409>
     c4c:	a2 16       	cp	r10, r18
     c4e:	b3 06       	cpc	r11, r19
     c50:	c4 06       	cpc	r12, r20
     c52:	d5 06       	cpc	r13, r21
     c54:	48 f4       	brcc	.+18     	; 0xc68 <__stack+0x409>
     c56:	08 94       	sec
     c58:	21 08       	sbc	r2, r1
     c5a:	31 08       	sbc	r3, r1
     c5c:	41 08       	sbc	r4, r1
     c5e:	51 08       	sbc	r5, r1
     c60:	ae 0c       	add	r10, r14
     c62:	bf 1c       	adc	r11, r15
     c64:	c0 1e       	adc	r12, r16
     c66:	d1 1e       	adc	r13, r17
     c68:	a2 1a       	sub	r10, r18
     c6a:	b3 0a       	sbc	r11, r19
     c6c:	c4 0a       	sbc	r12, r20
     c6e:	d5 0a       	sbc	r13, r21
     c70:	c6 01       	movw	r24, r12
     c72:	b5 01       	movw	r22, r10
     c74:	a4 01       	movw	r20, r8
     c76:	93 01       	movw	r18, r6
     c78:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     c7c:	7b 01       	movw	r14, r22
     c7e:	8c 01       	movw	r16, r24
     c80:	c6 01       	movw	r24, r12
     c82:	b5 01       	movw	r22, r10
     c84:	a4 01       	movw	r20, r8
     c86:	93 01       	movw	r18, r6
     c88:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
     c8c:	c9 01       	movw	r24, r18
     c8e:	da 01       	movw	r26, r20
     c90:	3c 01       	movw	r6, r24
     c92:	4d 01       	movw	r8, r26
     c94:	c4 01       	movw	r24, r8
     c96:	b3 01       	movw	r22, r6
     c98:	65 96       	adiw	r28, 0x15	; 21
     c9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     c9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     c9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ca0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ca2:	65 97       	sbiw	r28, 0x15	; 21
     ca4:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     ca8:	9b 01       	movw	r18, r22
     caa:	ac 01       	movw	r20, r24
     cac:	87 01       	movw	r16, r14
     cae:	ff 24       	eor	r15, r15
     cb0:	ee 24       	eor	r14, r14
     cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cb6:	af 8d       	ldd	r26, Y+31	; 0x1f
     cb8:	b8 a1       	ldd	r27, Y+32	; 0x20
     cba:	a0 70       	andi	r26, 0x00	; 0
     cbc:	b0 70       	andi	r27, 0x00	; 0
     cbe:	57 01       	movw	r10, r14
     cc0:	68 01       	movw	r12, r16
     cc2:	a8 2a       	or	r10, r24
     cc4:	b9 2a       	or	r11, r25
     cc6:	ca 2a       	or	r12, r26
     cc8:	db 2a       	or	r13, r27
     cca:	a2 16       	cp	r10, r18
     ccc:	b3 06       	cpc	r11, r19
     cce:	c4 06       	cpc	r12, r20
     cd0:	d5 06       	cpc	r13, r21
     cd2:	00 f5       	brcc	.+64     	; 0xd14 <__stack+0x4b5>
     cd4:	08 94       	sec
     cd6:	61 08       	sbc	r6, r1
     cd8:	71 08       	sbc	r7, r1
     cda:	81 08       	sbc	r8, r1
     cdc:	91 08       	sbc	r9, r1
     cde:	6d a1       	ldd	r22, Y+37	; 0x25
     ce0:	7e a1       	ldd	r23, Y+38	; 0x26
     ce2:	8f a1       	ldd	r24, Y+39	; 0x27
     ce4:	98 a5       	ldd	r25, Y+40	; 0x28
     ce6:	a6 0e       	add	r10, r22
     ce8:	b7 1e       	adc	r11, r23
     cea:	c8 1e       	adc	r12, r24
     cec:	d9 1e       	adc	r13, r25
     cee:	a6 16       	cp	r10, r22
     cf0:	b7 06       	cpc	r11, r23
     cf2:	c8 06       	cpc	r12, r24
     cf4:	d9 06       	cpc	r13, r25
     cf6:	70 f0       	brcs	.+28     	; 0xd14 <__stack+0x4b5>
     cf8:	a2 16       	cp	r10, r18
     cfa:	b3 06       	cpc	r11, r19
     cfc:	c4 06       	cpc	r12, r20
     cfe:	d5 06       	cpc	r13, r21
     d00:	48 f4       	brcc	.+18     	; 0xd14 <__stack+0x4b5>
     d02:	08 94       	sec
     d04:	61 08       	sbc	r6, r1
     d06:	71 08       	sbc	r7, r1
     d08:	81 08       	sbc	r8, r1
     d0a:	91 08       	sbc	r9, r1
     d0c:	a6 0e       	add	r10, r22
     d0e:	b7 1e       	adc	r11, r23
     d10:	c8 1e       	adc	r12, r24
     d12:	d9 1e       	adc	r13, r25
     d14:	d6 01       	movw	r26, r12
     d16:	c5 01       	movw	r24, r10
     d18:	82 1b       	sub	r24, r18
     d1a:	93 0b       	sbc	r25, r19
     d1c:	a4 0b       	sbc	r26, r20
     d1e:	b5 0b       	sbc	r27, r21
     d20:	89 8f       	std	Y+25, r24	; 0x19
     d22:	9a 8f       	std	Y+26, r25	; 0x1a
     d24:	ab 8f       	std	Y+27, r26	; 0x1b
     d26:	bc 8f       	std	Y+28, r27	; 0x1c
     d28:	d1 01       	movw	r26, r2
     d2a:	99 27       	eor	r25, r25
     d2c:	88 27       	eor	r24, r24
     d2e:	64 01       	movw	r12, r8
     d30:	53 01       	movw	r10, r6
     d32:	a8 2a       	or	r10, r24
     d34:	b9 2a       	or	r11, r25
     d36:	ca 2a       	or	r12, r26
     d38:	db 2a       	or	r13, r27
     d3a:	a9 aa       	std	Y+49, r10	; 0x31
     d3c:	ba aa       	std	Y+50, r11	; 0x32
     d3e:	cb aa       	std	Y+51, r12	; 0x33
     d40:	dc aa       	std	Y+52, r13	; 0x34
     d42:	86 01       	movw	r16, r12
     d44:	75 01       	movw	r14, r10
     d46:	2f ef       	ldi	r18, 0xFF	; 255
     d48:	3f ef       	ldi	r19, 0xFF	; 255
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	e2 22       	and	r14, r18
     d50:	f3 22       	and	r15, r19
     d52:	04 23       	and	r16, r20
     d54:	15 23       	and	r17, r21
     d56:	a6 01       	movw	r20, r12
     d58:	66 27       	eor	r22, r22
     d5a:	77 27       	eor	r23, r23
     d5c:	6d 96       	adiw	r28, 0x1d	; 29
     d5e:	4c af       	std	Y+60, r20	; 0x3c
     d60:	5d af       	std	Y+61, r21	; 0x3d
     d62:	6e af       	std	Y+62, r22	; 0x3e
     d64:	7f af       	std	Y+63, r23	; 0x3f
     d66:	6d 97       	sbiw	r28, 0x1d	; 29
     d68:	a9 a0       	ldd	r10, Y+33	; 0x21
     d6a:	ba a0       	ldd	r11, Y+34	; 0x22
     d6c:	cb a0       	ldd	r12, Y+35	; 0x23
     d6e:	dc a0       	ldd	r13, Y+36	; 0x24
     d70:	6f ef       	ldi	r22, 0xFF	; 255
     d72:	7f ef       	ldi	r23, 0xFF	; 255
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a6 22       	and	r10, r22
     d7a:	b7 22       	and	r11, r23
     d7c:	c8 22       	and	r12, r24
     d7e:	d9 22       	and	r13, r25
     d80:	89 a1       	ldd	r24, Y+33	; 0x21
     d82:	9a a1       	ldd	r25, Y+34	; 0x22
     d84:	ab a1       	ldd	r26, Y+35	; 0x23
     d86:	bc a1       	ldd	r27, Y+36	; 0x24
     d88:	1d 01       	movw	r2, r26
     d8a:	44 24       	eor	r4, r4
     d8c:	55 24       	eor	r5, r5
     d8e:	c8 01       	movw	r24, r16
     d90:	b7 01       	movw	r22, r14
     d92:	a6 01       	movw	r20, r12
     d94:	95 01       	movw	r18, r10
     d96:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     d9a:	69 96       	adiw	r28, 0x19	; 25
     d9c:	6c af       	std	Y+60, r22	; 0x3c
     d9e:	7d af       	std	Y+61, r23	; 0x3d
     da0:	8e af       	std	Y+62, r24	; 0x3e
     da2:	9f af       	std	Y+63, r25	; 0x3f
     da4:	69 97       	sbiw	r28, 0x19	; 25
     da6:	c8 01       	movw	r24, r16
     da8:	b7 01       	movw	r22, r14
     daa:	a2 01       	movw	r20, r4
     dac:	91 01       	movw	r18, r2
     dae:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     db2:	3b 01       	movw	r6, r22
     db4:	4c 01       	movw	r8, r24
     db6:	6d 96       	adiw	r28, 0x1d	; 29
     db8:	6c ad       	ldd	r22, Y+60	; 0x3c
     dba:	7d ad       	ldd	r23, Y+61	; 0x3d
     dbc:	8e ad       	ldd	r24, Y+62	; 0x3e
     dbe:	9f ad       	ldd	r25, Y+63	; 0x3f
     dc0:	6d 97       	sbiw	r28, 0x1d	; 29
     dc2:	a6 01       	movw	r20, r12
     dc4:	95 01       	movw	r18, r10
     dc6:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     dca:	7b 01       	movw	r14, r22
     dcc:	8c 01       	movw	r16, r24
     dce:	6d 96       	adiw	r28, 0x1d	; 29
     dd0:	6c ad       	ldd	r22, Y+60	; 0x3c
     dd2:	7d ad       	ldd	r23, Y+61	; 0x3d
     dd4:	8e ad       	ldd	r24, Y+62	; 0x3e
     dd6:	9f ad       	ldd	r25, Y+63	; 0x3f
     dd8:	6d 97       	sbiw	r28, 0x1d	; 29
     dda:	a2 01       	movw	r20, r4
     ddc:	91 01       	movw	r18, r2
     dde:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
     de2:	5b 01       	movw	r10, r22
     de4:	6c 01       	movw	r12, r24
     de6:	a8 01       	movw	r20, r16
     de8:	97 01       	movw	r18, r14
     dea:	26 0d       	add	r18, r6
     dec:	37 1d       	adc	r19, r7
     dee:	48 1d       	adc	r20, r8
     df0:	59 1d       	adc	r21, r9
     df2:	69 96       	adiw	r28, 0x19	; 25
     df4:	6c ac       	ldd	r6, Y+60	; 0x3c
     df6:	7d ac       	ldd	r7, Y+61	; 0x3d
     df8:	8e ac       	ldd	r8, Y+62	; 0x3e
     dfa:	9f ac       	ldd	r9, Y+63	; 0x3f
     dfc:	69 97       	sbiw	r28, 0x19	; 25
     dfe:	c4 01       	movw	r24, r8
     e00:	aa 27       	eor	r26, r26
     e02:	bb 27       	eor	r27, r27
     e04:	28 0f       	add	r18, r24
     e06:	39 1f       	adc	r19, r25
     e08:	4a 1f       	adc	r20, r26
     e0a:	5b 1f       	adc	r21, r27
     e0c:	2e 15       	cp	r18, r14
     e0e:	3f 05       	cpc	r19, r15
     e10:	40 07       	cpc	r20, r16
     e12:	51 07       	cpc	r21, r17
     e14:	48 f4       	brcc	.+18     	; 0xe28 <__stack+0x5c9>
     e16:	e1 2c       	mov	r14, r1
     e18:	f1 2c       	mov	r15, r1
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	06 2f       	mov	r16, r22
     e1e:	11 2d       	mov	r17, r1
     e20:	ae 0c       	add	r10, r14
     e22:	bf 1c       	adc	r11, r15
     e24:	c0 1e       	adc	r12, r16
     e26:	d1 1e       	adc	r13, r17
     e28:	ca 01       	movw	r24, r20
     e2a:	aa 27       	eor	r26, r26
     e2c:	bb 27       	eor	r27, r27
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	6a 0d       	add	r22, r10
     e34:	7b 1d       	adc	r23, r11
     e36:	8c 1d       	adc	r24, r12
     e38:	9d 1d       	adc	r25, r13
     e3a:	69 8c       	ldd	r6, Y+25	; 0x19
     e3c:	7a 8c       	ldd	r7, Y+26	; 0x1a
     e3e:	8b 8c       	ldd	r8, Y+27	; 0x1b
     e40:	9c 8c       	ldd	r9, Y+28	; 0x1c
     e42:	66 16       	cp	r6, r22
     e44:	77 06       	cpc	r7, r23
     e46:	88 06       	cpc	r8, r24
     e48:	99 06       	cpc	r9, r25
     e4a:	40 f1       	brcs	.+80     	; 0xe9c <__stack+0x63d>
     e4c:	66 15       	cp	r22, r6
     e4e:	77 05       	cpc	r23, r7
     e50:	88 05       	cpc	r24, r8
     e52:	99 05       	cpc	r25, r9
     e54:	09 f0       	breq	.+2      	; 0xe58 <__stack+0x5f9>
     e56:	43 c0       	rjmp	.+134    	; 0xede <__stack+0x67f>
     e58:	d9 01       	movw	r26, r18
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	69 96       	adiw	r28, 0x19	; 25
     e60:	2c ad       	ldd	r18, Y+60	; 0x3c
     e62:	3d ad       	ldd	r19, Y+61	; 0x3d
     e64:	4e ad       	ldd	r20, Y+62	; 0x3e
     e66:	5f ad       	ldd	r21, Y+63	; 0x3f
     e68:	69 97       	sbiw	r28, 0x19	; 25
     e6a:	40 70       	andi	r20, 0x00	; 0
     e6c:	50 70       	andi	r21, 0x00	; 0
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	a4 1f       	adc	r26, r20
     e74:	b5 1f       	adc	r27, r21
     e76:	2d a5       	ldd	r18, Y+45	; 0x2d
     e78:	3e a5       	ldd	r19, Y+46	; 0x2e
     e7a:	4f a5       	ldd	r20, Y+47	; 0x2f
     e7c:	58 a9       	ldd	r21, Y+48	; 0x30
     e7e:	6e 96       	adiw	r28, 0x1e	; 30
     e80:	0f ac       	ldd	r0, Y+63	; 0x3f
     e82:	6e 97       	sbiw	r28, 0x1e	; 30
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <__stack+0x62f>
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	44 1f       	adc	r20, r20
     e8c:	55 1f       	adc	r21, r21
     e8e:	0a 94       	dec	r0
     e90:	d2 f7       	brpl	.-12     	; 0xe86 <__stack+0x627>
     e92:	28 17       	cp	r18, r24
     e94:	39 07       	cpc	r19, r25
     e96:	4a 07       	cpc	r20, r26
     e98:	5b 07       	cpc	r21, r27
     e9a:	08 f5       	brcc	.+66     	; 0xede <__stack+0x67f>
     e9c:	09 a9       	ldd	r16, Y+49	; 0x31
     e9e:	1a a9       	ldd	r17, Y+50	; 0x32
     ea0:	2b a9       	ldd	r18, Y+51	; 0x33
     ea2:	3c a9       	ldd	r19, Y+52	; 0x34
     ea4:	01 50       	subi	r16, 0x01	; 1
     ea6:	10 40       	sbci	r17, 0x00	; 0
     ea8:	20 40       	sbci	r18, 0x00	; 0
     eaa:	30 40       	sbci	r19, 0x00	; 0
     eac:	09 ab       	std	Y+49, r16	; 0x31
     eae:	1a ab       	std	Y+50, r17	; 0x32
     eb0:	2b ab       	std	Y+51, r18	; 0x33
     eb2:	3c ab       	std	Y+52, r19	; 0x34
     eb4:	14 c0       	rjmp	.+40     	; 0xede <__stack+0x67f>
     eb6:	66 24       	eor	r6, r6
     eb8:	77 24       	eor	r7, r7
     eba:	43 01       	movw	r8, r6
     ebc:	21 e0       	ldi	r18, 0x01	; 1
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	29 ab       	std	Y+49, r18	; 0x31
     ec6:	3a ab       	std	Y+50, r19	; 0x32
     ec8:	4b ab       	std	Y+51, r20	; 0x33
     eca:	5c ab       	std	Y+52, r21	; 0x34
     ecc:	0b c0       	rjmp	.+22     	; 0xee4 <__stack+0x685>
     ece:	66 24       	eor	r6, r6
     ed0:	77 24       	eor	r7, r7
     ed2:	43 01       	movw	r8, r6
     ed4:	19 aa       	std	Y+49, r1	; 0x31
     ed6:	1a aa       	std	Y+50, r1	; 0x32
     ed8:	1b aa       	std	Y+51, r1	; 0x33
     eda:	1c aa       	std	Y+52, r1	; 0x34
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <__stack+0x685>
     ede:	66 24       	eor	r6, r6
     ee0:	77 24       	eor	r7, r7
     ee2:	43 01       	movw	r8, r6
     ee4:	fe 01       	movw	r30, r28
     ee6:	71 96       	adiw	r30, 0x11	; 17
     ee8:	88 e0       	ldi	r24, 0x08	; 8
     eea:	df 01       	movw	r26, r30
     eec:	1d 92       	st	X+, r1
     eee:	8a 95       	dec	r24
     ef0:	e9 f7       	brne	.-6      	; 0xeec <__stack+0x68d>
     ef2:	a9 a8       	ldd	r10, Y+49	; 0x31
     ef4:	ba a8       	ldd	r11, Y+50	; 0x32
     ef6:	cb a8       	ldd	r12, Y+51	; 0x33
     ef8:	dc a8       	ldd	r13, Y+52	; 0x34
     efa:	a9 8a       	std	Y+17, r10	; 0x11
     efc:	ba 8a       	std	Y+18, r11	; 0x12
     efe:	cb 8a       	std	Y+19, r12	; 0x13
     f00:	dc 8a       	std	Y+20, r13	; 0x14
     f02:	6d 8a       	std	Y+21, r6	; 0x15
     f04:	7e 8a       	std	Y+22, r7	; 0x16
     f06:	8f 8a       	std	Y+23, r8	; 0x17
     f08:	98 8e       	std	Y+24, r9	; 0x18
     f0a:	29 a9       	ldd	r18, Y+49	; 0x31
     f0c:	3a 89       	ldd	r19, Y+18	; 0x12
     f0e:	4b 89       	ldd	r20, Y+19	; 0x13
     f10:	5c 89       	ldd	r21, Y+20	; 0x14
     f12:	66 2d       	mov	r22, r6
     f14:	7e 89       	ldd	r23, Y+22	; 0x16
     f16:	8f 89       	ldd	r24, Y+23	; 0x17
     f18:	98 8d       	ldd	r25, Y+24	; 0x18
     f1a:	c2 5a       	subi	r28, 0xA2	; 162
     f1c:	df 4f       	sbci	r29, 0xFF	; 255
     f1e:	e2 e1       	ldi	r30, 0x12	; 18
     f20:	0c 94 40 2d 	jmp	0x5a80	; 0x5a80 <__epilogue_restores__>

00000f24 <__umoddi3>:
     f24:	ab e5       	ldi	r26, 0x5B	; 91
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e9       	ldi	r30, 0x98	; 152
     f2a:	f7 e0       	ldi	r31, 0x07	; 7
     f2c:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <__prologue_saves__>
     f30:	a8 e0       	ldi	r26, 0x08	; 8
     f32:	4e 01       	movw	r8, r28
     f34:	08 94       	sec
     f36:	81 1c       	adc	r8, r1
     f38:	91 1c       	adc	r9, r1
     f3a:	f4 01       	movw	r30, r8
     f3c:	6a 2e       	mov	r6, r26
     f3e:	11 92       	st	Z+, r1
     f40:	6a 94       	dec	r6
     f42:	e9 f7       	brne	.-6      	; 0xf3e <__umoddi3+0x1a>
     f44:	29 83       	std	Y+1, r18	; 0x01
     f46:	3a 83       	std	Y+2, r19	; 0x02
     f48:	4b 83       	std	Y+3, r20	; 0x03
     f4a:	5c 83       	std	Y+4, r21	; 0x04
     f4c:	6d 83       	std	Y+5, r22	; 0x05
     f4e:	7e 83       	std	Y+6, r23	; 0x06
     f50:	8f 83       	std	Y+7, r24	; 0x07
     f52:	98 87       	std	Y+8, r25	; 0x08
     f54:	ce 01       	movw	r24, r28
     f56:	09 96       	adiw	r24, 0x09	; 9
     f58:	fc 01       	movw	r30, r24
     f5a:	11 92       	st	Z+, r1
     f5c:	aa 95       	dec	r26
     f5e:	e9 f7       	brne	.-6      	; 0xf5a <__umoddi3+0x36>
     f60:	a9 86       	std	Y+9, r10	; 0x09
     f62:	ba 86       	std	Y+10, r11	; 0x0a
     f64:	cb 86       	std	Y+11, r12	; 0x0b
     f66:	dc 86       	std	Y+12, r13	; 0x0c
     f68:	ed 86       	std	Y+13, r14	; 0x0d
     f6a:	fe 86       	std	Y+14, r15	; 0x0e
     f6c:	0f 87       	std	Y+15, r16	; 0x0f
     f6e:	18 8b       	std	Y+16, r17	; 0x10
     f70:	29 84       	ldd	r2, Y+9	; 0x09
     f72:	3a 84       	ldd	r3, Y+10	; 0x0a
     f74:	4b 84       	ldd	r4, Y+11	; 0x0b
     f76:	5c 84       	ldd	r5, Y+12	; 0x0c
     f78:	ad 84       	ldd	r10, Y+13	; 0x0d
     f7a:	be 84       	ldd	r11, Y+14	; 0x0e
     f7c:	cf 84       	ldd	r12, Y+15	; 0x0f
     f7e:	d8 88       	ldd	r13, Y+16	; 0x10
     f80:	29 81       	ldd	r18, Y+1	; 0x01
     f82:	3a 81       	ldd	r19, Y+2	; 0x02
     f84:	4b 81       	ldd	r20, Y+3	; 0x03
     f86:	5c 81       	ldd	r21, Y+4	; 0x04
     f88:	69 96       	adiw	r28, 0x19	; 25
     f8a:	2f af       	std	Y+63, r18	; 0x3f
     f8c:	69 97       	sbiw	r28, 0x19	; 25
     f8e:	6a 96       	adiw	r28, 0x1a	; 26
     f90:	3f af       	std	Y+63, r19	; 0x3f
     f92:	6a 97       	sbiw	r28, 0x1a	; 26
     f94:	6b 96       	adiw	r28, 0x1b	; 27
     f96:	4f af       	std	Y+63, r20	; 0x3f
     f98:	6b 97       	sbiw	r28, 0x1b	; 27
     f9a:	6c 96       	adiw	r28, 0x1c	; 28
     f9c:	5f af       	std	Y+63, r21	; 0x3f
     f9e:	6c 97       	sbiw	r28, 0x1c	; 28
     fa0:	6c 96       	adiw	r28, 0x1c	; 28
     fa2:	6c ac       	ldd	r6, Y+60	; 0x3c
     fa4:	7d ac       	ldd	r7, Y+61	; 0x3d
     fa6:	8e ac       	ldd	r8, Y+62	; 0x3e
     fa8:	9f ac       	ldd	r9, Y+63	; 0x3f
     faa:	6c 97       	sbiw	r28, 0x1c	; 28
     fac:	69 aa       	std	Y+49, r6	; 0x31
     fae:	7a aa       	std	Y+50, r7	; 0x32
     fb0:	8b aa       	std	Y+51, r8	; 0x33
     fb2:	9c aa       	std	Y+52, r9	; 0x34
     fb4:	6d 81       	ldd	r22, Y+5	; 0x05
     fb6:	7e 81       	ldd	r23, Y+6	; 0x06
     fb8:	8f 81       	ldd	r24, Y+7	; 0x07
     fba:	98 85       	ldd	r25, Y+8	; 0x08
     fbc:	3b 01       	movw	r6, r22
     fbe:	4c 01       	movw	r8, r24
     fc0:	6d aa       	std	Y+53, r6	; 0x35
     fc2:	7e aa       	std	Y+54, r7	; 0x36
     fc4:	8f aa       	std	Y+55, r8	; 0x37
     fc6:	98 ae       	std	Y+56, r9	; 0x38
     fc8:	a1 14       	cp	r10, r1
     fca:	b1 04       	cpc	r11, r1
     fcc:	c1 04       	cpc	r12, r1
     fce:	d1 04       	cpc	r13, r1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <__umoddi3+0xb0>
     fd2:	04 c3       	rjmp	.+1544   	; 0x15dc <__umoddi3+0x6b8>
     fd4:	62 14       	cp	r6, r2
     fd6:	73 04       	cpc	r7, r3
     fd8:	84 04       	cpc	r8, r4
     fda:	95 04       	cpc	r9, r5
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <__umoddi3+0xbc>
     fde:	00 c1       	rjmp	.+512    	; 0x11e0 <__umoddi3+0x2bc>
     fe0:	00 e0       	ldi	r16, 0x00	; 0
     fe2:	20 16       	cp	r2, r16
     fe4:	00 e0       	ldi	r16, 0x00	; 0
     fe6:	30 06       	cpc	r3, r16
     fe8:	01 e0       	ldi	r16, 0x01	; 1
     fea:	40 06       	cpc	r4, r16
     fec:	00 e0       	ldi	r16, 0x00	; 0
     fee:	50 06       	cpc	r5, r16
     ff0:	88 f4       	brcc	.+34     	; 0x1014 <__umoddi3+0xf0>
     ff2:	1f ef       	ldi	r17, 0xFF	; 255
     ff4:	21 16       	cp	r2, r17
     ff6:	31 04       	cpc	r3, r1
     ff8:	41 04       	cpc	r4, r1
     ffa:	51 04       	cpc	r5, r1
     ffc:	39 f0       	breq	.+14     	; 0x100c <__umoddi3+0xe8>
     ffe:	30 f0       	brcs	.+12     	; 0x100c <__umoddi3+0xe8>
    1000:	88 e0       	ldi	r24, 0x08	; 8
    1002:	e8 2e       	mov	r14, r24
    1004:	f1 2c       	mov	r15, r1
    1006:	01 2d       	mov	r16, r1
    1008:	11 2d       	mov	r17, r1
    100a:	18 c0       	rjmp	.+48     	; 0x103c <__umoddi3+0x118>
    100c:	ee 24       	eor	r14, r14
    100e:	ff 24       	eor	r15, r15
    1010:	87 01       	movw	r16, r14
    1012:	14 c0       	rjmp	.+40     	; 0x103c <__umoddi3+0x118>
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	24 16       	cp	r2, r20
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	34 06       	cpc	r3, r20
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	44 06       	cpc	r4, r20
    1020:	41 e0       	ldi	r20, 0x01	; 1
    1022:	54 06       	cpc	r5, r20
    1024:	30 f0       	brcs	.+12     	; 0x1032 <__umoddi3+0x10e>
    1026:	b8 e1       	ldi	r27, 0x18	; 24
    1028:	eb 2e       	mov	r14, r27
    102a:	f1 2c       	mov	r15, r1
    102c:	01 2d       	mov	r16, r1
    102e:	11 2d       	mov	r17, r1
    1030:	05 c0       	rjmp	.+10     	; 0x103c <__umoddi3+0x118>
    1032:	a0 e1       	ldi	r26, 0x10	; 16
    1034:	ea 2e       	mov	r14, r26
    1036:	f1 2c       	mov	r15, r1
    1038:	01 2d       	mov	r16, r1
    103a:	11 2d       	mov	r17, r1
    103c:	d2 01       	movw	r26, r4
    103e:	c1 01       	movw	r24, r2
    1040:	0e 2c       	mov	r0, r14
    1042:	04 c0       	rjmp	.+8      	; 0x104c <__umoddi3+0x128>
    1044:	b6 95       	lsr	r27
    1046:	a7 95       	ror	r26
    1048:	97 95       	ror	r25
    104a:	87 95       	ror	r24
    104c:	0a 94       	dec	r0
    104e:	d2 f7       	brpl	.-12     	; 0x1044 <__umoddi3+0x120>
    1050:	88 59       	subi	r24, 0x98	; 152
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	dc 01       	movw	r26, r24
    1056:	2c 91       	ld	r18, X
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a0 e0       	ldi	r26, 0x00	; 0
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	8e 19       	sub	r24, r14
    1062:	9f 09       	sbc	r25, r15
    1064:	a0 0b       	sbc	r26, r16
    1066:	b1 0b       	sbc	r27, r17
    1068:	5c 01       	movw	r10, r24
    106a:	6d 01       	movw	r12, r26
    106c:	a2 1a       	sub	r10, r18
    106e:	b1 08       	sbc	r11, r1
    1070:	c1 08       	sbc	r12, r1
    1072:	d1 08       	sbc	r13, r1
    1074:	a9 ae       	std	Y+57, r10	; 0x39
    1076:	ba ae       	std	Y+58, r11	; 0x3a
    1078:	cb ae       	std	Y+59, r12	; 0x3b
    107a:	dc ae       	std	Y+60, r13	; 0x3c
    107c:	a1 14       	cp	r10, r1
    107e:	b1 04       	cpc	r11, r1
    1080:	c1 04       	cpc	r12, r1
    1082:	d1 04       	cpc	r13, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <__umoddi3+0x164>
    1086:	3f c0       	rjmp	.+126    	; 0x1106 <__umoddi3+0x1e2>
    1088:	69 ad       	ldd	r22, Y+57	; 0x39
    108a:	06 2e       	mov	r0, r22
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <__umoddi3+0x172>
    108e:	22 0c       	add	r2, r2
    1090:	33 1c       	adc	r3, r3
    1092:	44 1c       	adc	r4, r4
    1094:	55 1c       	adc	r5, r5
    1096:	0a 94       	dec	r0
    1098:	d2 f7       	brpl	.-12     	; 0x108e <__umoddi3+0x16a>
    109a:	a4 01       	movw	r20, r8
    109c:	93 01       	movw	r18, r6
    109e:	06 2e       	mov	r0, r22
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <__umoddi3+0x186>
    10a2:	22 0f       	add	r18, r18
    10a4:	33 1f       	adc	r19, r19
    10a6:	44 1f       	adc	r20, r20
    10a8:	55 1f       	adc	r21, r21
    10aa:	0a 94       	dec	r0
    10ac:	d2 f7       	brpl	.-12     	; 0x10a2 <__umoddi3+0x17e>
    10ae:	80 e2       	ldi	r24, 0x20	; 32
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	8a 19       	sub	r24, r10
    10b4:	9b 09       	sbc	r25, r11
    10b6:	6c 96       	adiw	r28, 0x1c	; 28
    10b8:	cc ac       	ldd	r12, Y+60	; 0x3c
    10ba:	dd ac       	ldd	r13, Y+61	; 0x3d
    10bc:	ee ac       	ldd	r14, Y+62	; 0x3e
    10be:	ff ac       	ldd	r15, Y+63	; 0x3f
    10c0:	6c 97       	sbiw	r28, 0x1c	; 28
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <__umoddi3+0x1a8>
    10c4:	f6 94       	lsr	r15
    10c6:	e7 94       	ror	r14
    10c8:	d7 94       	ror	r13
    10ca:	c7 94       	ror	r12
    10cc:	8a 95       	dec	r24
    10ce:	d2 f7       	brpl	.-12     	; 0x10c4 <__umoddi3+0x1a0>
    10d0:	87 01       	movw	r16, r14
    10d2:	76 01       	movw	r14, r12
    10d4:	e2 2a       	or	r14, r18
    10d6:	f3 2a       	or	r15, r19
    10d8:	04 2b       	or	r16, r20
    10da:	15 2b       	or	r17, r21
    10dc:	ed aa       	std	Y+53, r14	; 0x35
    10de:	fe aa       	std	Y+54, r15	; 0x36
    10e0:	0f ab       	std	Y+55, r16	; 0x37
    10e2:	18 af       	std	Y+56, r17	; 0x38
    10e4:	6c 96       	adiw	r28, 0x1c	; 28
    10e6:	8c ad       	ldd	r24, Y+60	; 0x3c
    10e8:	9d ad       	ldd	r25, Y+61	; 0x3d
    10ea:	ae ad       	ldd	r26, Y+62	; 0x3e
    10ec:	bf ad       	ldd	r27, Y+63	; 0x3f
    10ee:	6c 97       	sbiw	r28, 0x1c	; 28
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <__umoddi3+0x1d6>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	aa 1f       	adc	r26, r26
    10f8:	bb 1f       	adc	r27, r27
    10fa:	6a 95       	dec	r22
    10fc:	d2 f7       	brpl	.-12     	; 0x10f2 <__umoddi3+0x1ce>
    10fe:	89 ab       	std	Y+49, r24	; 0x31
    1100:	9a ab       	std	Y+50, r25	; 0x32
    1102:	ab ab       	std	Y+51, r26	; 0x33
    1104:	bc ab       	std	Y+52, r27	; 0x34
    1106:	32 01       	movw	r6, r4
    1108:	88 24       	eor	r8, r8
    110a:	99 24       	eor	r9, r9
    110c:	b2 01       	movw	r22, r4
    110e:	a1 01       	movw	r20, r2
    1110:	60 70       	andi	r22, 0x00	; 0
    1112:	70 70       	andi	r23, 0x00	; 0
    1114:	21 96       	adiw	r28, 0x01	; 1
    1116:	4c af       	std	Y+60, r20	; 0x3c
    1118:	5d af       	std	Y+61, r21	; 0x3d
    111a:	6e af       	std	Y+62, r22	; 0x3e
    111c:	7f af       	std	Y+63, r23	; 0x3f
    111e:	21 97       	sbiw	r28, 0x01	; 1
    1120:	6d a9       	ldd	r22, Y+53	; 0x35
    1122:	7e a9       	ldd	r23, Y+54	; 0x36
    1124:	8f a9       	ldd	r24, Y+55	; 0x37
    1126:	98 ad       	ldd	r25, Y+56	; 0x38
    1128:	a4 01       	movw	r20, r8
    112a:	93 01       	movw	r18, r6
    112c:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    1130:	7b 01       	movw	r14, r22
    1132:	8c 01       	movw	r16, r24
    1134:	6d a9       	ldd	r22, Y+53	; 0x35
    1136:	7e a9       	ldd	r23, Y+54	; 0x36
    1138:	8f a9       	ldd	r24, Y+55	; 0x37
    113a:	98 ad       	ldd	r25, Y+56	; 0x38
    113c:	a4 01       	movw	r20, r8
    113e:	93 01       	movw	r18, r6
    1140:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    1144:	ca 01       	movw	r24, r20
    1146:	b9 01       	movw	r22, r18
    1148:	21 96       	adiw	r28, 0x01	; 1
    114a:	2c ad       	ldd	r18, Y+60	; 0x3c
    114c:	3d ad       	ldd	r19, Y+61	; 0x3d
    114e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1150:	5f ad       	ldd	r21, Y+63	; 0x3f
    1152:	21 97       	sbiw	r28, 0x01	; 1
    1154:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	87 01       	movw	r16, r14
    115e:	ff 24       	eor	r15, r15
    1160:	ee 24       	eor	r14, r14
    1162:	a9 a8       	ldd	r10, Y+49	; 0x31
    1164:	ba a8       	ldd	r11, Y+50	; 0x32
    1166:	cb a8       	ldd	r12, Y+51	; 0x33
    1168:	dc a8       	ldd	r13, Y+52	; 0x34
    116a:	c6 01       	movw	r24, r12
    116c:	aa 27       	eor	r26, r26
    116e:	bb 27       	eor	r27, r27
    1170:	57 01       	movw	r10, r14
    1172:	68 01       	movw	r12, r16
    1174:	a8 2a       	or	r10, r24
    1176:	b9 2a       	or	r11, r25
    1178:	ca 2a       	or	r12, r26
    117a:	db 2a       	or	r13, r27
    117c:	a2 16       	cp	r10, r18
    117e:	b3 06       	cpc	r11, r19
    1180:	c4 06       	cpc	r12, r20
    1182:	d5 06       	cpc	r13, r21
    1184:	90 f4       	brcc	.+36     	; 0x11aa <__umoddi3+0x286>
    1186:	a2 0c       	add	r10, r2
    1188:	b3 1c       	adc	r11, r3
    118a:	c4 1c       	adc	r12, r4
    118c:	d5 1c       	adc	r13, r5
    118e:	a2 14       	cp	r10, r2
    1190:	b3 04       	cpc	r11, r3
    1192:	c4 04       	cpc	r12, r4
    1194:	d5 04       	cpc	r13, r5
    1196:	48 f0       	brcs	.+18     	; 0x11aa <__umoddi3+0x286>
    1198:	a2 16       	cp	r10, r18
    119a:	b3 06       	cpc	r11, r19
    119c:	c4 06       	cpc	r12, r20
    119e:	d5 06       	cpc	r13, r21
    11a0:	20 f4       	brcc	.+8      	; 0x11aa <__umoddi3+0x286>
    11a2:	a2 0c       	add	r10, r2
    11a4:	b3 1c       	adc	r11, r3
    11a6:	c4 1c       	adc	r12, r4
    11a8:	d5 1c       	adc	r13, r5
    11aa:	a2 1a       	sub	r10, r18
    11ac:	b3 0a       	sbc	r11, r19
    11ae:	c4 0a       	sbc	r12, r20
    11b0:	d5 0a       	sbc	r13, r21
    11b2:	c6 01       	movw	r24, r12
    11b4:	b5 01       	movw	r22, r10
    11b6:	a4 01       	movw	r20, r8
    11b8:	93 01       	movw	r18, r6
    11ba:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    11be:	7b 01       	movw	r14, r22
    11c0:	8c 01       	movw	r16, r24
    11c2:	c6 01       	movw	r24, r12
    11c4:	b5 01       	movw	r22, r10
    11c6:	a4 01       	movw	r20, r8
    11c8:	93 01       	movw	r18, r6
    11ca:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    11ce:	ca 01       	movw	r24, r20
    11d0:	b9 01       	movw	r22, r18
    11d2:	21 96       	adiw	r28, 0x01	; 1
    11d4:	2c ad       	ldd	r18, Y+60	; 0x3c
    11d6:	3d ad       	ldd	r19, Y+61	; 0x3d
    11d8:	4e ad       	ldd	r20, Y+62	; 0x3e
    11da:	5f ad       	ldd	r21, Y+63	; 0x3f
    11dc:	21 97       	sbiw	r28, 0x01	; 1
    11de:	ba c1       	rjmp	.+884    	; 0x1554 <__umoddi3+0x630>
    11e0:	21 14       	cp	r2, r1
    11e2:	31 04       	cpc	r3, r1
    11e4:	41 04       	cpc	r4, r1
    11e6:	51 04       	cpc	r5, r1
    11e8:	71 f4       	brne	.+28     	; 0x1206 <__umoddi3+0x2e2>
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    11fe:	c9 01       	movw	r24, r18
    1200:	da 01       	movw	r26, r20
    1202:	1c 01       	movw	r2, r24
    1204:	2d 01       	movw	r4, r26
    1206:	00 e0       	ldi	r16, 0x00	; 0
    1208:	20 16       	cp	r2, r16
    120a:	00 e0       	ldi	r16, 0x00	; 0
    120c:	30 06       	cpc	r3, r16
    120e:	01 e0       	ldi	r16, 0x01	; 1
    1210:	40 06       	cpc	r4, r16
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	50 06       	cpc	r5, r16
    1216:	88 f4       	brcc	.+34     	; 0x123a <__umoddi3+0x316>
    1218:	1f ef       	ldi	r17, 0xFF	; 255
    121a:	21 16       	cp	r2, r17
    121c:	31 04       	cpc	r3, r1
    121e:	41 04       	cpc	r4, r1
    1220:	51 04       	cpc	r5, r1
    1222:	39 f0       	breq	.+14     	; 0x1232 <__umoddi3+0x30e>
    1224:	30 f0       	brcs	.+12     	; 0x1232 <__umoddi3+0x30e>
    1226:	68 e0       	ldi	r22, 0x08	; 8
    1228:	e6 2e       	mov	r14, r22
    122a:	f1 2c       	mov	r15, r1
    122c:	01 2d       	mov	r16, r1
    122e:	11 2d       	mov	r17, r1
    1230:	18 c0       	rjmp	.+48     	; 0x1262 <__umoddi3+0x33e>
    1232:	ee 24       	eor	r14, r14
    1234:	ff 24       	eor	r15, r15
    1236:	87 01       	movw	r16, r14
    1238:	14 c0       	rjmp	.+40     	; 0x1262 <__umoddi3+0x33e>
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	24 16       	cp	r2, r20
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	34 06       	cpc	r3, r20
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	44 06       	cpc	r4, r20
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	54 06       	cpc	r5, r20
    124a:	30 f0       	brcs	.+12     	; 0x1258 <__umoddi3+0x334>
    124c:	58 e1       	ldi	r21, 0x18	; 24
    124e:	e5 2e       	mov	r14, r21
    1250:	f1 2c       	mov	r15, r1
    1252:	01 2d       	mov	r16, r1
    1254:	11 2d       	mov	r17, r1
    1256:	05 c0       	rjmp	.+10     	; 0x1262 <__umoddi3+0x33e>
    1258:	40 e1       	ldi	r20, 0x10	; 16
    125a:	e4 2e       	mov	r14, r20
    125c:	f1 2c       	mov	r15, r1
    125e:	01 2d       	mov	r16, r1
    1260:	11 2d       	mov	r17, r1
    1262:	d2 01       	movw	r26, r4
    1264:	c1 01       	movw	r24, r2
    1266:	0e 2c       	mov	r0, r14
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <__umoddi3+0x34e>
    126a:	b6 95       	lsr	r27
    126c:	a7 95       	ror	r26
    126e:	97 95       	ror	r25
    1270:	87 95       	ror	r24
    1272:	0a 94       	dec	r0
    1274:	d2 f7       	brpl	.-12     	; 0x126a <__umoddi3+0x346>
    1276:	88 59       	subi	r24, 0x98	; 152
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	dc 01       	movw	r26, r24
    127c:	2c 91       	ld	r18, X
    127e:	30 e2       	ldi	r19, 0x20	; 32
    1280:	a3 2e       	mov	r10, r19
    1282:	b1 2c       	mov	r11, r1
    1284:	c1 2c       	mov	r12, r1
    1286:	d1 2c       	mov	r13, r1
    1288:	d6 01       	movw	r26, r12
    128a:	c5 01       	movw	r24, r10
    128c:	8e 19       	sub	r24, r14
    128e:	9f 09       	sbc	r25, r15
    1290:	a0 0b       	sbc	r26, r16
    1292:	b1 0b       	sbc	r27, r17
    1294:	7c 01       	movw	r14, r24
    1296:	8d 01       	movw	r16, r26
    1298:	e2 1a       	sub	r14, r18
    129a:	f1 08       	sbc	r15, r1
    129c:	01 09       	sbc	r16, r1
    129e:	11 09       	sbc	r17, r1
    12a0:	e9 ae       	std	Y+57, r14	; 0x39
    12a2:	fa ae       	std	Y+58, r15	; 0x3a
    12a4:	0b af       	std	Y+59, r16	; 0x3b
    12a6:	1c af       	std	Y+60, r17	; 0x3c
    12a8:	e1 14       	cp	r14, r1
    12aa:	f1 04       	cpc	r15, r1
    12ac:	01 05       	cpc	r16, r1
    12ae:	11 05       	cpc	r17, r1
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <__umoddi3+0x39c>
    12b2:	64 01       	movw	r12, r8
    12b4:	53 01       	movw	r10, r6
    12b6:	a2 18       	sub	r10, r2
    12b8:	b3 08       	sbc	r11, r3
    12ba:	c4 08       	sbc	r12, r4
    12bc:	d5 08       	sbc	r13, r5
    12be:	e2 c0       	rjmp	.+452    	; 0x1484 <__umoddi3+0x560>
    12c0:	f9 ac       	ldd	r15, Y+57	; 0x39
    12c2:	68 96       	adiw	r28, 0x18	; 24
    12c4:	ff ae       	std	Y+63, r15	; 0x3f
    12c6:	68 97       	sbiw	r28, 0x18	; 24
    12c8:	0f 2c       	mov	r0, r15
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <__umoddi3+0x3b0>
    12cc:	22 0c       	add	r2, r2
    12ce:	33 1c       	adc	r3, r3
    12d0:	44 1c       	adc	r4, r4
    12d2:	55 1c       	adc	r5, r5
    12d4:	0a 94       	dec	r0
    12d6:	d2 f7       	brpl	.-12     	; 0x12cc <__umoddi3+0x3a8>
    12d8:	8a 2d       	mov	r24, r10
    12da:	8f 19       	sub	r24, r15
    12dc:	64 01       	movw	r12, r8
    12de:	53 01       	movw	r10, r6
    12e0:	08 2e       	mov	r0, r24
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <__umoddi3+0x3c8>
    12e4:	d6 94       	lsr	r13
    12e6:	c7 94       	ror	r12
    12e8:	b7 94       	ror	r11
    12ea:	a7 94       	ror	r10
    12ec:	0a 94       	dec	r0
    12ee:	d2 f7       	brpl	.-12     	; 0x12e4 <__umoddi3+0x3c0>
    12f0:	a4 01       	movw	r20, r8
    12f2:	93 01       	movw	r18, r6
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <__umoddi3+0x3da>
    12f6:	22 0f       	add	r18, r18
    12f8:	33 1f       	adc	r19, r19
    12fa:	44 1f       	adc	r20, r20
    12fc:	55 1f       	adc	r21, r21
    12fe:	fa 94       	dec	r15
    1300:	d2 f7       	brpl	.-12     	; 0x12f6 <__umoddi3+0x3d2>
    1302:	6c 96       	adiw	r28, 0x1c	; 28
    1304:	6c ac       	ldd	r6, Y+60	; 0x3c
    1306:	7d ac       	ldd	r7, Y+61	; 0x3d
    1308:	8e ac       	ldd	r8, Y+62	; 0x3e
    130a:	9f ac       	ldd	r9, Y+63	; 0x3f
    130c:	6c 97       	sbiw	r28, 0x1c	; 28
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__umoddi3+0x3f4>
    1310:	96 94       	lsr	r9
    1312:	87 94       	ror	r8
    1314:	77 94       	ror	r7
    1316:	67 94       	ror	r6
    1318:	8a 95       	dec	r24
    131a:	d2 f7       	brpl	.-12     	; 0x1310 <__umoddi3+0x3ec>
    131c:	84 01       	movw	r16, r8
    131e:	73 01       	movw	r14, r6
    1320:	e2 2a       	or	r14, r18
    1322:	f3 2a       	or	r15, r19
    1324:	04 2b       	or	r16, r20
    1326:	15 2b       	or	r17, r21
    1328:	ed a6       	std	Y+45, r14	; 0x2d
    132a:	fe a6       	std	Y+46, r15	; 0x2e
    132c:	0f a7       	std	Y+47, r16	; 0x2f
    132e:	18 ab       	std	Y+48, r17	; 0x30
    1330:	32 01       	movw	r6, r4
    1332:	88 24       	eor	r8, r8
    1334:	99 24       	eor	r9, r9
    1336:	b2 01       	movw	r22, r4
    1338:	a1 01       	movw	r20, r2
    133a:	60 70       	andi	r22, 0x00	; 0
    133c:	70 70       	andi	r23, 0x00	; 0
    133e:	25 96       	adiw	r28, 0x05	; 5
    1340:	4c af       	std	Y+60, r20	; 0x3c
    1342:	5d af       	std	Y+61, r21	; 0x3d
    1344:	6e af       	std	Y+62, r22	; 0x3e
    1346:	7f af       	std	Y+63, r23	; 0x3f
    1348:	25 97       	sbiw	r28, 0x05	; 5
    134a:	c6 01       	movw	r24, r12
    134c:	b5 01       	movw	r22, r10
    134e:	a4 01       	movw	r20, r8
    1350:	93 01       	movw	r18, r6
    1352:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    1356:	7b 01       	movw	r14, r22
    1358:	8c 01       	movw	r16, r24
    135a:	c6 01       	movw	r24, r12
    135c:	b5 01       	movw	r22, r10
    135e:	a4 01       	movw	r20, r8
    1360:	93 01       	movw	r18, r6
    1362:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    1366:	ca 01       	movw	r24, r20
    1368:	b9 01       	movw	r22, r18
    136a:	25 96       	adiw	r28, 0x05	; 5
    136c:	2c ad       	ldd	r18, Y+60	; 0x3c
    136e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1370:	4e ad       	ldd	r20, Y+62	; 0x3e
    1372:	5f ad       	ldd	r21, Y+63	; 0x3f
    1374:	25 97       	sbiw	r28, 0x05	; 5
    1376:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    137a:	9b 01       	movw	r18, r22
    137c:	ac 01       	movw	r20, r24
    137e:	87 01       	movw	r16, r14
    1380:	ff 24       	eor	r15, r15
    1382:	ee 24       	eor	r14, r14
    1384:	ad a4       	ldd	r10, Y+45	; 0x2d
    1386:	be a4       	ldd	r11, Y+46	; 0x2e
    1388:	cf a4       	ldd	r12, Y+47	; 0x2f
    138a:	d8 a8       	ldd	r13, Y+48	; 0x30
    138c:	c6 01       	movw	r24, r12
    138e:	aa 27       	eor	r26, r26
    1390:	bb 27       	eor	r27, r27
    1392:	5c 01       	movw	r10, r24
    1394:	6d 01       	movw	r12, r26
    1396:	ae 28       	or	r10, r14
    1398:	bf 28       	or	r11, r15
    139a:	c0 2a       	or	r12, r16
    139c:	d1 2a       	or	r13, r17
    139e:	a2 16       	cp	r10, r18
    13a0:	b3 06       	cpc	r11, r19
    13a2:	c4 06       	cpc	r12, r20
    13a4:	d5 06       	cpc	r13, r21
    13a6:	90 f4       	brcc	.+36     	; 0x13cc <__umoddi3+0x4a8>
    13a8:	a2 0c       	add	r10, r2
    13aa:	b3 1c       	adc	r11, r3
    13ac:	c4 1c       	adc	r12, r4
    13ae:	d5 1c       	adc	r13, r5
    13b0:	a2 14       	cp	r10, r2
    13b2:	b3 04       	cpc	r11, r3
    13b4:	c4 04       	cpc	r12, r4
    13b6:	d5 04       	cpc	r13, r5
    13b8:	48 f0       	brcs	.+18     	; 0x13cc <__umoddi3+0x4a8>
    13ba:	a2 16       	cp	r10, r18
    13bc:	b3 06       	cpc	r11, r19
    13be:	c4 06       	cpc	r12, r20
    13c0:	d5 06       	cpc	r13, r21
    13c2:	20 f4       	brcc	.+8      	; 0x13cc <__umoddi3+0x4a8>
    13c4:	a2 0c       	add	r10, r2
    13c6:	b3 1c       	adc	r11, r3
    13c8:	c4 1c       	adc	r12, r4
    13ca:	d5 1c       	adc	r13, r5
    13cc:	a2 1a       	sub	r10, r18
    13ce:	b3 0a       	sbc	r11, r19
    13d0:	c4 0a       	sbc	r12, r20
    13d2:	d5 0a       	sbc	r13, r21
    13d4:	c6 01       	movw	r24, r12
    13d6:	b5 01       	movw	r22, r10
    13d8:	a4 01       	movw	r20, r8
    13da:	93 01       	movw	r18, r6
    13dc:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    13e0:	7b 01       	movw	r14, r22
    13e2:	8c 01       	movw	r16, r24
    13e4:	c6 01       	movw	r24, r12
    13e6:	b5 01       	movw	r22, r10
    13e8:	a4 01       	movw	r20, r8
    13ea:	93 01       	movw	r18, r6
    13ec:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    13f0:	ca 01       	movw	r24, r20
    13f2:	b9 01       	movw	r22, r18
    13f4:	25 96       	adiw	r28, 0x05	; 5
    13f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    13f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    13fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    13fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    13fe:	25 97       	sbiw	r28, 0x05	; 5
    1400:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	87 01       	movw	r16, r14
    140a:	ff 24       	eor	r15, r15
    140c:	ee 24       	eor	r14, r14
    140e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1410:	9e a5       	ldd	r25, Y+46	; 0x2e
    1412:	af a5       	ldd	r26, Y+47	; 0x2f
    1414:	b8 a9       	ldd	r27, Y+48	; 0x30
    1416:	a0 70       	andi	r26, 0x00	; 0
    1418:	b0 70       	andi	r27, 0x00	; 0
    141a:	57 01       	movw	r10, r14
    141c:	68 01       	movw	r12, r16
    141e:	a8 2a       	or	r10, r24
    1420:	b9 2a       	or	r11, r25
    1422:	ca 2a       	or	r12, r26
    1424:	db 2a       	or	r13, r27
    1426:	a2 16       	cp	r10, r18
    1428:	b3 06       	cpc	r11, r19
    142a:	c4 06       	cpc	r12, r20
    142c:	d5 06       	cpc	r13, r21
    142e:	90 f4       	brcc	.+36     	; 0x1454 <__umoddi3+0x530>
    1430:	a2 0c       	add	r10, r2
    1432:	b3 1c       	adc	r11, r3
    1434:	c4 1c       	adc	r12, r4
    1436:	d5 1c       	adc	r13, r5
    1438:	a2 14       	cp	r10, r2
    143a:	b3 04       	cpc	r11, r3
    143c:	c4 04       	cpc	r12, r4
    143e:	d5 04       	cpc	r13, r5
    1440:	48 f0       	brcs	.+18     	; 0x1454 <__umoddi3+0x530>
    1442:	a2 16       	cp	r10, r18
    1444:	b3 06       	cpc	r11, r19
    1446:	c4 06       	cpc	r12, r20
    1448:	d5 06       	cpc	r13, r21
    144a:	20 f4       	brcc	.+8      	; 0x1454 <__umoddi3+0x530>
    144c:	a2 0c       	add	r10, r2
    144e:	b3 1c       	adc	r11, r3
    1450:	c4 1c       	adc	r12, r4
    1452:	d5 1c       	adc	r13, r5
    1454:	6c 96       	adiw	r28, 0x1c	; 28
    1456:	ec ac       	ldd	r14, Y+60	; 0x3c
    1458:	fd ac       	ldd	r15, Y+61	; 0x3d
    145a:	0e ad       	ldd	r16, Y+62	; 0x3e
    145c:	1f ad       	ldd	r17, Y+63	; 0x3f
    145e:	6c 97       	sbiw	r28, 0x1c	; 28
    1460:	68 96       	adiw	r28, 0x18	; 24
    1462:	0f ac       	ldd	r0, Y+63	; 0x3f
    1464:	68 97       	sbiw	r28, 0x18	; 24
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <__umoddi3+0x54c>
    1468:	ee 0c       	add	r14, r14
    146a:	ff 1c       	adc	r15, r15
    146c:	00 1f       	adc	r16, r16
    146e:	11 1f       	adc	r17, r17
    1470:	0a 94       	dec	r0
    1472:	d2 f7       	brpl	.-12     	; 0x1468 <__umoddi3+0x544>
    1474:	e9 aa       	std	Y+49, r14	; 0x31
    1476:	fa aa       	std	Y+50, r15	; 0x32
    1478:	0b ab       	std	Y+51, r16	; 0x33
    147a:	1c ab       	std	Y+52, r17	; 0x34
    147c:	a2 1a       	sub	r10, r18
    147e:	b3 0a       	sbc	r11, r19
    1480:	c4 0a       	sbc	r12, r20
    1482:	d5 0a       	sbc	r13, r21
    1484:	32 01       	movw	r6, r4
    1486:	88 24       	eor	r8, r8
    1488:	99 24       	eor	r9, r9
    148a:	b2 01       	movw	r22, r4
    148c:	a1 01       	movw	r20, r2
    148e:	60 70       	andi	r22, 0x00	; 0
    1490:	70 70       	andi	r23, 0x00	; 0
    1492:	29 96       	adiw	r28, 0x09	; 9
    1494:	4c af       	std	Y+60, r20	; 0x3c
    1496:	5d af       	std	Y+61, r21	; 0x3d
    1498:	6e af       	std	Y+62, r22	; 0x3e
    149a:	7f af       	std	Y+63, r23	; 0x3f
    149c:	29 97       	sbiw	r28, 0x09	; 9
    149e:	c6 01       	movw	r24, r12
    14a0:	b5 01       	movw	r22, r10
    14a2:	a4 01       	movw	r20, r8
    14a4:	93 01       	movw	r18, r6
    14a6:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    14aa:	7b 01       	movw	r14, r22
    14ac:	8c 01       	movw	r16, r24
    14ae:	c6 01       	movw	r24, r12
    14b0:	b5 01       	movw	r22, r10
    14b2:	a4 01       	movw	r20, r8
    14b4:	93 01       	movw	r18, r6
    14b6:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    14ba:	ca 01       	movw	r24, r20
    14bc:	b9 01       	movw	r22, r18
    14be:	29 96       	adiw	r28, 0x09	; 9
    14c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    14c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    14c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    14c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    14c8:	29 97       	sbiw	r28, 0x09	; 9
    14ca:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    14ce:	9b 01       	movw	r18, r22
    14d0:	ac 01       	movw	r20, r24
    14d2:	87 01       	movw	r16, r14
    14d4:	ff 24       	eor	r15, r15
    14d6:	ee 24       	eor	r14, r14
    14d8:	a9 a8       	ldd	r10, Y+49	; 0x31
    14da:	ba a8       	ldd	r11, Y+50	; 0x32
    14dc:	cb a8       	ldd	r12, Y+51	; 0x33
    14de:	dc a8       	ldd	r13, Y+52	; 0x34
    14e0:	c6 01       	movw	r24, r12
    14e2:	aa 27       	eor	r26, r26
    14e4:	bb 27       	eor	r27, r27
    14e6:	57 01       	movw	r10, r14
    14e8:	68 01       	movw	r12, r16
    14ea:	a8 2a       	or	r10, r24
    14ec:	b9 2a       	or	r11, r25
    14ee:	ca 2a       	or	r12, r26
    14f0:	db 2a       	or	r13, r27
    14f2:	a2 16       	cp	r10, r18
    14f4:	b3 06       	cpc	r11, r19
    14f6:	c4 06       	cpc	r12, r20
    14f8:	d5 06       	cpc	r13, r21
    14fa:	90 f4       	brcc	.+36     	; 0x1520 <__umoddi3+0x5fc>
    14fc:	a2 0c       	add	r10, r2
    14fe:	b3 1c       	adc	r11, r3
    1500:	c4 1c       	adc	r12, r4
    1502:	d5 1c       	adc	r13, r5
    1504:	a2 14       	cp	r10, r2
    1506:	b3 04       	cpc	r11, r3
    1508:	c4 04       	cpc	r12, r4
    150a:	d5 04       	cpc	r13, r5
    150c:	48 f0       	brcs	.+18     	; 0x1520 <__umoddi3+0x5fc>
    150e:	a2 16       	cp	r10, r18
    1510:	b3 06       	cpc	r11, r19
    1512:	c4 06       	cpc	r12, r20
    1514:	d5 06       	cpc	r13, r21
    1516:	20 f4       	brcc	.+8      	; 0x1520 <__umoddi3+0x5fc>
    1518:	a2 0c       	add	r10, r2
    151a:	b3 1c       	adc	r11, r3
    151c:	c4 1c       	adc	r12, r4
    151e:	d5 1c       	adc	r13, r5
    1520:	a2 1a       	sub	r10, r18
    1522:	b3 0a       	sbc	r11, r19
    1524:	c4 0a       	sbc	r12, r20
    1526:	d5 0a       	sbc	r13, r21
    1528:	c6 01       	movw	r24, r12
    152a:	b5 01       	movw	r22, r10
    152c:	a4 01       	movw	r20, r8
    152e:	93 01       	movw	r18, r6
    1530:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    1534:	7b 01       	movw	r14, r22
    1536:	8c 01       	movw	r16, r24
    1538:	c6 01       	movw	r24, r12
    153a:	b5 01       	movw	r22, r10
    153c:	a4 01       	movw	r20, r8
    153e:	93 01       	movw	r18, r6
    1540:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    1544:	ca 01       	movw	r24, r20
    1546:	b9 01       	movw	r22, r18
    1548:	29 96       	adiw	r28, 0x09	; 9
    154a:	2c ad       	ldd	r18, Y+60	; 0x3c
    154c:	3d ad       	ldd	r19, Y+61	; 0x3d
    154e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1550:	5f ad       	ldd	r21, Y+63	; 0x3f
    1552:	29 97       	sbiw	r28, 0x09	; 9
    1554:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    1558:	9b 01       	movw	r18, r22
    155a:	ac 01       	movw	r20, r24
    155c:	87 01       	movw	r16, r14
    155e:	ff 24       	eor	r15, r15
    1560:	ee 24       	eor	r14, r14
    1562:	89 a9       	ldd	r24, Y+49	; 0x31
    1564:	9a a9       	ldd	r25, Y+50	; 0x32
    1566:	ab a9       	ldd	r26, Y+51	; 0x33
    1568:	bc a9       	ldd	r27, Y+52	; 0x34
    156a:	a0 70       	andi	r26, 0x00	; 0
    156c:	b0 70       	andi	r27, 0x00	; 0
    156e:	e8 2a       	or	r14, r24
    1570:	f9 2a       	or	r15, r25
    1572:	0a 2b       	or	r16, r26
    1574:	1b 2b       	or	r17, r27
    1576:	e2 16       	cp	r14, r18
    1578:	f3 06       	cpc	r15, r19
    157a:	04 07       	cpc	r16, r20
    157c:	15 07       	cpc	r17, r21
    157e:	90 f4       	brcc	.+36     	; 0x15a4 <__umoddi3+0x680>
    1580:	e2 0c       	add	r14, r2
    1582:	f3 1c       	adc	r15, r3
    1584:	04 1d       	adc	r16, r4
    1586:	15 1d       	adc	r17, r5
    1588:	e2 14       	cp	r14, r2
    158a:	f3 04       	cpc	r15, r3
    158c:	04 05       	cpc	r16, r4
    158e:	15 05       	cpc	r17, r5
    1590:	48 f0       	brcs	.+18     	; 0x15a4 <__umoddi3+0x680>
    1592:	e2 16       	cp	r14, r18
    1594:	f3 06       	cpc	r15, r19
    1596:	04 07       	cpc	r16, r20
    1598:	15 07       	cpc	r17, r21
    159a:	20 f4       	brcc	.+8      	; 0x15a4 <__umoddi3+0x680>
    159c:	e2 0c       	add	r14, r2
    159e:	f3 1c       	adc	r15, r3
    15a0:	04 1d       	adc	r16, r4
    15a2:	15 1d       	adc	r17, r5
    15a4:	e2 1a       	sub	r14, r18
    15a6:	f3 0a       	sbc	r15, r19
    15a8:	04 0b       	sbc	r16, r20
    15aa:	15 0b       	sbc	r17, r21
    15ac:	d8 01       	movw	r26, r16
    15ae:	c7 01       	movw	r24, r14
    15b0:	09 ac       	ldd	r0, Y+57	; 0x39
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <__umoddi3+0x698>
    15b4:	b6 95       	lsr	r27
    15b6:	a7 95       	ror	r26
    15b8:	97 95       	ror	r25
    15ba:	87 95       	ror	r24
    15bc:	0a 94       	dec	r0
    15be:	d2 f7       	brpl	.-12     	; 0x15b4 <__umoddi3+0x690>
    15c0:	89 8b       	std	Y+17, r24	; 0x11
    15c2:	9a 8b       	std	Y+18, r25	; 0x12
    15c4:	ab 8b       	std	Y+19, r26	; 0x13
    15c6:	bc 8b       	std	Y+20, r27	; 0x14
    15c8:	1d 8a       	std	Y+21, r1	; 0x15
    15ca:	1e 8a       	std	Y+22, r1	; 0x16
    15cc:	1f 8a       	std	Y+23, r1	; 0x17
    15ce:	18 8e       	std	Y+24, r1	; 0x18
    15d0:	28 2f       	mov	r18, r24
    15d2:	3a 89       	ldd	r19, Y+18	; 0x12
    15d4:	4b 89       	ldd	r20, Y+19	; 0x13
    15d6:	5c 89       	ldd	r21, Y+20	; 0x14
    15d8:	6d 89       	ldd	r22, Y+21	; 0x15
    15da:	0c c3       	rjmp	.+1560   	; 0x1bf4 <__umoddi3+0xcd0>
    15dc:	6a 14       	cp	r6, r10
    15de:	7b 04       	cpc	r7, r11
    15e0:	8c 04       	cpc	r8, r12
    15e2:	9d 04       	cpc	r9, r13
    15e4:	08 f4       	brcc	.+2      	; 0x15e8 <__umoddi3+0x6c4>
    15e6:	09 c3       	rjmp	.+1554   	; 0x1bfa <__umoddi3+0xcd6>
    15e8:	00 e0       	ldi	r16, 0x00	; 0
    15ea:	a0 16       	cp	r10, r16
    15ec:	00 e0       	ldi	r16, 0x00	; 0
    15ee:	b0 06       	cpc	r11, r16
    15f0:	01 e0       	ldi	r16, 0x01	; 1
    15f2:	c0 06       	cpc	r12, r16
    15f4:	00 e0       	ldi	r16, 0x00	; 0
    15f6:	d0 06       	cpc	r13, r16
    15f8:	88 f4       	brcc	.+34     	; 0x161c <__umoddi3+0x6f8>
    15fa:	1f ef       	ldi	r17, 0xFF	; 255
    15fc:	a1 16       	cp	r10, r17
    15fe:	b1 04       	cpc	r11, r1
    1600:	c1 04       	cpc	r12, r1
    1602:	d1 04       	cpc	r13, r1
    1604:	39 f0       	breq	.+14     	; 0x1614 <__umoddi3+0x6f0>
    1606:	30 f0       	brcs	.+12     	; 0x1614 <__umoddi3+0x6f0>
    1608:	28 e0       	ldi	r18, 0x08	; 8
    160a:	e2 2e       	mov	r14, r18
    160c:	f1 2c       	mov	r15, r1
    160e:	01 2d       	mov	r16, r1
    1610:	11 2d       	mov	r17, r1
    1612:	18 c0       	rjmp	.+48     	; 0x1644 <__umoddi3+0x720>
    1614:	ee 24       	eor	r14, r14
    1616:	ff 24       	eor	r15, r15
    1618:	87 01       	movw	r16, r14
    161a:	14 c0       	rjmp	.+40     	; 0x1644 <__umoddi3+0x720>
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	a4 16       	cp	r10, r20
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	b4 06       	cpc	r11, r20
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	c4 06       	cpc	r12, r20
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	d4 06       	cpc	r13, r20
    162c:	30 f0       	brcs	.+12     	; 0x163a <__umoddi3+0x716>
    162e:	98 e1       	ldi	r25, 0x18	; 24
    1630:	e9 2e       	mov	r14, r25
    1632:	f1 2c       	mov	r15, r1
    1634:	01 2d       	mov	r16, r1
    1636:	11 2d       	mov	r17, r1
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <__umoddi3+0x720>
    163a:	80 e1       	ldi	r24, 0x10	; 16
    163c:	e8 2e       	mov	r14, r24
    163e:	f1 2c       	mov	r15, r1
    1640:	01 2d       	mov	r16, r1
    1642:	11 2d       	mov	r17, r1
    1644:	d6 01       	movw	r26, r12
    1646:	c5 01       	movw	r24, r10
    1648:	0e 2c       	mov	r0, r14
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <__umoddi3+0x730>
    164c:	b6 95       	lsr	r27
    164e:	a7 95       	ror	r26
    1650:	97 95       	ror	r25
    1652:	87 95       	ror	r24
    1654:	0a 94       	dec	r0
    1656:	d2 f7       	brpl	.-12     	; 0x164c <__umoddi3+0x728>
    1658:	88 59       	subi	r24, 0x98	; 152
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	dc 01       	movw	r26, r24
    165e:	2c 91       	ld	r18, X
    1660:	80 e2       	ldi	r24, 0x20	; 32
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	8e 19       	sub	r24, r14
    166a:	9f 09       	sbc	r25, r15
    166c:	a0 0b       	sbc	r26, r16
    166e:	b1 0b       	sbc	r27, r17
    1670:	82 1b       	sub	r24, r18
    1672:	91 09       	sbc	r25, r1
    1674:	a1 09       	sbc	r26, r1
    1676:	b1 09       	sbc	r27, r1
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	a1 05       	cpc	r26, r1
    167c:	b1 05       	cpc	r27, r1
    167e:	09 f0       	breq	.+2      	; 0x1682 <__umoddi3+0x75e>
    1680:	4f c0       	rjmp	.+158    	; 0x1720 <__umoddi3+0x7fc>
    1682:	a6 14       	cp	r10, r6
    1684:	b7 04       	cpc	r11, r7
    1686:	c8 04       	cpc	r12, r8
    1688:	d9 04       	cpc	r13, r9
    168a:	58 f0       	brcs	.+22     	; 0x16a2 <__umoddi3+0x77e>
    168c:	6c 96       	adiw	r28, 0x1c	; 28
    168e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1690:	fd ac       	ldd	r15, Y+61	; 0x3d
    1692:	0e ad       	ldd	r16, Y+62	; 0x3e
    1694:	1f ad       	ldd	r17, Y+63	; 0x3f
    1696:	6c 97       	sbiw	r28, 0x1c	; 28
    1698:	e2 14       	cp	r14, r2
    169a:	f3 04       	cpc	r15, r3
    169c:	04 05       	cpc	r16, r4
    169e:	15 05       	cpc	r17, r5
    16a0:	68 f1       	brcs	.+90     	; 0x16fc <__umoddi3+0x7d8>
    16a2:	6c 96       	adiw	r28, 0x1c	; 28
    16a4:	ec ac       	ldd	r14, Y+60	; 0x3c
    16a6:	fd ac       	ldd	r15, Y+61	; 0x3d
    16a8:	0e ad       	ldd	r16, Y+62	; 0x3e
    16aa:	1f ad       	ldd	r17, Y+63	; 0x3f
    16ac:	6c 97       	sbiw	r28, 0x1c	; 28
    16ae:	e2 18       	sub	r14, r2
    16b0:	f3 08       	sbc	r15, r3
    16b2:	04 09       	sbc	r16, r4
    16b4:	15 09       	sbc	r17, r5
    16b6:	a4 01       	movw	r20, r8
    16b8:	93 01       	movw	r18, r6
    16ba:	2a 19       	sub	r18, r10
    16bc:	3b 09       	sbc	r19, r11
    16be:	4c 09       	sbc	r20, r12
    16c0:	5d 09       	sbc	r21, r13
    16c2:	aa 24       	eor	r10, r10
    16c4:	bb 24       	eor	r11, r11
    16c6:	65 01       	movw	r12, r10
    16c8:	6c 96       	adiw	r28, 0x1c	; 28
    16ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    16cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    16ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    16d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    16d2:	6c 97       	sbiw	r28, 0x1c	; 28
    16d4:	6e 15       	cp	r22, r14
    16d6:	7f 05       	cpc	r23, r15
    16d8:	80 07       	cpc	r24, r16
    16da:	91 07       	cpc	r25, r17
    16dc:	28 f4       	brcc	.+10     	; 0x16e8 <__umoddi3+0x7c4>
    16de:	b1 e0       	ldi	r27, 0x01	; 1
    16e0:	ab 2e       	mov	r10, r27
    16e2:	b1 2c       	mov	r11, r1
    16e4:	c1 2c       	mov	r12, r1
    16e6:	d1 2c       	mov	r13, r1
    16e8:	da 01       	movw	r26, r20
    16ea:	c9 01       	movw	r24, r18
    16ec:	8a 19       	sub	r24, r10
    16ee:	9b 09       	sbc	r25, r11
    16f0:	ac 09       	sbc	r26, r12
    16f2:	bd 09       	sbc	r27, r13
    16f4:	8d ab       	std	Y+53, r24	; 0x35
    16f6:	9e ab       	std	Y+54, r25	; 0x36
    16f8:	af ab       	std	Y+55, r26	; 0x37
    16fa:	b8 af       	std	Y+56, r27	; 0x38
    16fc:	e9 8a       	std	Y+17, r14	; 0x11
    16fe:	fa 8a       	std	Y+18, r15	; 0x12
    1700:	0b 8b       	std	Y+19, r16	; 0x13
    1702:	1c 8b       	std	Y+20, r17	; 0x14
    1704:	6d a8       	ldd	r6, Y+53	; 0x35
    1706:	7e a8       	ldd	r7, Y+54	; 0x36
    1708:	8f a8       	ldd	r8, Y+55	; 0x37
    170a:	98 ac       	ldd	r9, Y+56	; 0x38
    170c:	6d 8a       	std	Y+21, r6	; 0x15
    170e:	7e 8a       	std	Y+22, r7	; 0x16
    1710:	8f 8a       	std	Y+23, r8	; 0x17
    1712:	98 8e       	std	Y+24, r9	; 0x18
    1714:	2e 2d       	mov	r18, r14
    1716:	3a 89       	ldd	r19, Y+18	; 0x12
    1718:	4b 89       	ldd	r20, Y+19	; 0x13
    171a:	5c 89       	ldd	r21, Y+20	; 0x14
    171c:	6d a9       	ldd	r22, Y+53	; 0x35
    171e:	6a c2       	rjmp	.+1236   	; 0x1bf4 <__umoddi3+0xcd0>
    1720:	67 96       	adiw	r28, 0x17	; 23
    1722:	8f af       	std	Y+63, r24	; 0x3f
    1724:	67 97       	sbiw	r28, 0x17	; 23
    1726:	a6 01       	movw	r20, r12
    1728:	95 01       	movw	r18, r10
    172a:	08 2e       	mov	r0, r24
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <__umoddi3+0x812>
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	44 1f       	adc	r20, r20
    1734:	55 1f       	adc	r21, r21
    1736:	0a 94       	dec	r0
    1738:	d2 f7       	brpl	.-12     	; 0x172e <__umoddi3+0x80a>
    173a:	a0 e2       	ldi	r26, 0x20	; 32
    173c:	aa 2e       	mov	r10, r26
    173e:	a8 1a       	sub	r10, r24
    1740:	66 96       	adiw	r28, 0x16	; 22
    1742:	af ae       	std	Y+63, r10	; 0x3f
    1744:	66 97       	sbiw	r28, 0x16	; 22
    1746:	d2 01       	movw	r26, r4
    1748:	c1 01       	movw	r24, r2
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <__umoddi3+0x830>
    174c:	b6 95       	lsr	r27
    174e:	a7 95       	ror	r26
    1750:	97 95       	ror	r25
    1752:	87 95       	ror	r24
    1754:	aa 94       	dec	r10
    1756:	d2 f7       	brpl	.-12     	; 0x174c <__umoddi3+0x828>
    1758:	6c 01       	movw	r12, r24
    175a:	7d 01       	movw	r14, r26
    175c:	c2 2a       	or	r12, r18
    175e:	d3 2a       	or	r13, r19
    1760:	e4 2a       	or	r14, r20
    1762:	f5 2a       	or	r15, r21
    1764:	c9 a6       	std	Y+41, r12	; 0x29
    1766:	da a6       	std	Y+42, r13	; 0x2a
    1768:	eb a6       	std	Y+43, r14	; 0x2b
    176a:	fc a6       	std	Y+44, r15	; 0x2c
    176c:	82 01       	movw	r16, r4
    176e:	71 01       	movw	r14, r2
    1770:	67 96       	adiw	r28, 0x17	; 23
    1772:	0f ac       	ldd	r0, Y+63	; 0x3f
    1774:	67 97       	sbiw	r28, 0x17	; 23
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <__umoddi3+0x85c>
    1778:	ee 0c       	add	r14, r14
    177a:	ff 1c       	adc	r15, r15
    177c:	00 1f       	adc	r16, r16
    177e:	11 1f       	adc	r17, r17
    1780:	0a 94       	dec	r0
    1782:	d2 f7       	brpl	.-12     	; 0x1778 <__umoddi3+0x854>
    1784:	ed a2       	std	Y+37, r14	; 0x25
    1786:	fe a2       	std	Y+38, r15	; 0x26
    1788:	0f a3       	std	Y+39, r16	; 0x27
    178a:	18 a7       	std	Y+40, r17	; 0x28
    178c:	64 01       	movw	r12, r8
    178e:	53 01       	movw	r10, r6
    1790:	66 96       	adiw	r28, 0x16	; 22
    1792:	0f ac       	ldd	r0, Y+63	; 0x3f
    1794:	66 97       	sbiw	r28, 0x16	; 22
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <__umoddi3+0x87c>
    1798:	d6 94       	lsr	r13
    179a:	c7 94       	ror	r12
    179c:	b7 94       	ror	r11
    179e:	a7 94       	ror	r10
    17a0:	0a 94       	dec	r0
    17a2:	d2 f7       	brpl	.-12     	; 0x1798 <__umoddi3+0x874>
    17a4:	a4 01       	movw	r20, r8
    17a6:	93 01       	movw	r18, r6
    17a8:	67 96       	adiw	r28, 0x17	; 23
    17aa:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ac:	67 97       	sbiw	r28, 0x17	; 23
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <__umoddi3+0x894>
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	44 1f       	adc	r20, r20
    17b6:	55 1f       	adc	r21, r21
    17b8:	0a 94       	dec	r0
    17ba:	d2 f7       	brpl	.-12     	; 0x17b0 <__umoddi3+0x88c>
    17bc:	6c 96       	adiw	r28, 0x1c	; 28
    17be:	8c ad       	ldd	r24, Y+60	; 0x3c
    17c0:	9d ad       	ldd	r25, Y+61	; 0x3d
    17c2:	ae ad       	ldd	r26, Y+62	; 0x3e
    17c4:	bf ad       	ldd	r27, Y+63	; 0x3f
    17c6:	6c 97       	sbiw	r28, 0x1c	; 28
    17c8:	66 96       	adiw	r28, 0x16	; 22
    17ca:	0f ac       	ldd	r0, Y+63	; 0x3f
    17cc:	66 97       	sbiw	r28, 0x16	; 22
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <__umoddi3+0x8b4>
    17d0:	b6 95       	lsr	r27
    17d2:	a7 95       	ror	r26
    17d4:	97 95       	ror	r25
    17d6:	87 95       	ror	r24
    17d8:	0a 94       	dec	r0
    17da:	d2 f7       	brpl	.-12     	; 0x17d0 <__umoddi3+0x8ac>
    17dc:	3c 01       	movw	r6, r24
    17de:	4d 01       	movw	r8, r26
    17e0:	62 2a       	or	r6, r18
    17e2:	73 2a       	or	r7, r19
    17e4:	84 2a       	or	r8, r20
    17e6:	95 2a       	or	r9, r21
    17e8:	69 a2       	std	Y+33, r6	; 0x21
    17ea:	7a a2       	std	Y+34, r7	; 0x22
    17ec:	8b a2       	std	Y+35, r8	; 0x23
    17ee:	9c a2       	std	Y+36, r9	; 0x24
    17f0:	6c 96       	adiw	r28, 0x1c	; 28
    17f2:	ec ac       	ldd	r14, Y+60	; 0x3c
    17f4:	fd ac       	ldd	r15, Y+61	; 0x3d
    17f6:	0e ad       	ldd	r16, Y+62	; 0x3e
    17f8:	1f ad       	ldd	r17, Y+63	; 0x3f
    17fa:	6c 97       	sbiw	r28, 0x1c	; 28
    17fc:	67 96       	adiw	r28, 0x17	; 23
    17fe:	0f ac       	ldd	r0, Y+63	; 0x3f
    1800:	67 97       	sbiw	r28, 0x17	; 23
    1802:	04 c0       	rjmp	.+8      	; 0x180c <__umoddi3+0x8e8>
    1804:	ee 0c       	add	r14, r14
    1806:	ff 1c       	adc	r15, r15
    1808:	00 1f       	adc	r16, r16
    180a:	11 1f       	adc	r17, r17
    180c:	0a 94       	dec	r0
    180e:	d2 f7       	brpl	.-12     	; 0x1804 <__umoddi3+0x8e0>
    1810:	ed 8e       	std	Y+29, r14	; 0x1d
    1812:	fe 8e       	std	Y+30, r15	; 0x1e
    1814:	0f 8f       	std	Y+31, r16	; 0x1f
    1816:	18 a3       	std	Y+32, r17	; 0x20
    1818:	49 a5       	ldd	r20, Y+41	; 0x29
    181a:	5a a5       	ldd	r21, Y+42	; 0x2a
    181c:	6b a5       	ldd	r22, Y+43	; 0x2b
    181e:	7c a5       	ldd	r23, Y+44	; 0x2c
    1820:	3b 01       	movw	r6, r22
    1822:	88 24       	eor	r8, r8
    1824:	99 24       	eor	r9, r9
    1826:	60 70       	andi	r22, 0x00	; 0
    1828:	70 70       	andi	r23, 0x00	; 0
    182a:	2d 96       	adiw	r28, 0x0d	; 13
    182c:	4c af       	std	Y+60, r20	; 0x3c
    182e:	5d af       	std	Y+61, r21	; 0x3d
    1830:	6e af       	std	Y+62, r22	; 0x3e
    1832:	7f af       	std	Y+63, r23	; 0x3f
    1834:	2d 97       	sbiw	r28, 0x0d	; 13
    1836:	c6 01       	movw	r24, r12
    1838:	b5 01       	movw	r22, r10
    183a:	a4 01       	movw	r20, r8
    183c:	93 01       	movw	r18, r6
    183e:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    1842:	7b 01       	movw	r14, r22
    1844:	8c 01       	movw	r16, r24
    1846:	c6 01       	movw	r24, r12
    1848:	b5 01       	movw	r22, r10
    184a:	a4 01       	movw	r20, r8
    184c:	93 01       	movw	r18, r6
    184e:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    1852:	c9 01       	movw	r24, r18
    1854:	da 01       	movw	r26, r20
    1856:	1c 01       	movw	r2, r24
    1858:	2d 01       	movw	r4, r26
    185a:	c2 01       	movw	r24, r4
    185c:	b1 01       	movw	r22, r2
    185e:	2d 96       	adiw	r28, 0x0d	; 13
    1860:	2c ad       	ldd	r18, Y+60	; 0x3c
    1862:	3d ad       	ldd	r19, Y+61	; 0x3d
    1864:	4e ad       	ldd	r20, Y+62	; 0x3e
    1866:	5f ad       	ldd	r21, Y+63	; 0x3f
    1868:	2d 97       	sbiw	r28, 0x0d	; 13
    186a:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    186e:	9b 01       	movw	r18, r22
    1870:	ac 01       	movw	r20, r24
    1872:	87 01       	movw	r16, r14
    1874:	ff 24       	eor	r15, r15
    1876:	ee 24       	eor	r14, r14
    1878:	a9 a0       	ldd	r10, Y+33	; 0x21
    187a:	ba a0       	ldd	r11, Y+34	; 0x22
    187c:	cb a0       	ldd	r12, Y+35	; 0x23
    187e:	dc a0       	ldd	r13, Y+36	; 0x24
    1880:	c6 01       	movw	r24, r12
    1882:	aa 27       	eor	r26, r26
    1884:	bb 27       	eor	r27, r27
    1886:	57 01       	movw	r10, r14
    1888:	68 01       	movw	r12, r16
    188a:	a8 2a       	or	r10, r24
    188c:	b9 2a       	or	r11, r25
    188e:	ca 2a       	or	r12, r26
    1890:	db 2a       	or	r13, r27
    1892:	a2 16       	cp	r10, r18
    1894:	b3 06       	cpc	r11, r19
    1896:	c4 06       	cpc	r12, r20
    1898:	d5 06       	cpc	r13, r21
    189a:	00 f5       	brcc	.+64     	; 0x18dc <__umoddi3+0x9b8>
    189c:	08 94       	sec
    189e:	21 08       	sbc	r2, r1
    18a0:	31 08       	sbc	r3, r1
    18a2:	41 08       	sbc	r4, r1
    18a4:	51 08       	sbc	r5, r1
    18a6:	e9 a4       	ldd	r14, Y+41	; 0x29
    18a8:	fa a4       	ldd	r15, Y+42	; 0x2a
    18aa:	0b a5       	ldd	r16, Y+43	; 0x2b
    18ac:	1c a5       	ldd	r17, Y+44	; 0x2c
    18ae:	ae 0c       	add	r10, r14
    18b0:	bf 1c       	adc	r11, r15
    18b2:	c0 1e       	adc	r12, r16
    18b4:	d1 1e       	adc	r13, r17
    18b6:	ae 14       	cp	r10, r14
    18b8:	bf 04       	cpc	r11, r15
    18ba:	c0 06       	cpc	r12, r16
    18bc:	d1 06       	cpc	r13, r17
    18be:	70 f0       	brcs	.+28     	; 0x18dc <__umoddi3+0x9b8>
    18c0:	a2 16       	cp	r10, r18
    18c2:	b3 06       	cpc	r11, r19
    18c4:	c4 06       	cpc	r12, r20
    18c6:	d5 06       	cpc	r13, r21
    18c8:	48 f4       	brcc	.+18     	; 0x18dc <__umoddi3+0x9b8>
    18ca:	08 94       	sec
    18cc:	21 08       	sbc	r2, r1
    18ce:	31 08       	sbc	r3, r1
    18d0:	41 08       	sbc	r4, r1
    18d2:	51 08       	sbc	r5, r1
    18d4:	ae 0c       	add	r10, r14
    18d6:	bf 1c       	adc	r11, r15
    18d8:	c0 1e       	adc	r12, r16
    18da:	d1 1e       	adc	r13, r17
    18dc:	a2 1a       	sub	r10, r18
    18de:	b3 0a       	sbc	r11, r19
    18e0:	c4 0a       	sbc	r12, r20
    18e2:	d5 0a       	sbc	r13, r21
    18e4:	c6 01       	movw	r24, r12
    18e6:	b5 01       	movw	r22, r10
    18e8:	a4 01       	movw	r20, r8
    18ea:	93 01       	movw	r18, r6
    18ec:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    18f0:	7b 01       	movw	r14, r22
    18f2:	8c 01       	movw	r16, r24
    18f4:	c6 01       	movw	r24, r12
    18f6:	b5 01       	movw	r22, r10
    18f8:	a4 01       	movw	r20, r8
    18fa:	93 01       	movw	r18, r6
    18fc:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    1900:	c9 01       	movw	r24, r18
    1902:	da 01       	movw	r26, r20
    1904:	3c 01       	movw	r6, r24
    1906:	4d 01       	movw	r8, r26
    1908:	c4 01       	movw	r24, r8
    190a:	b3 01       	movw	r22, r6
    190c:	2d 96       	adiw	r28, 0x0d	; 13
    190e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1910:	3d ad       	ldd	r19, Y+61	; 0x3d
    1912:	4e ad       	ldd	r20, Y+62	; 0x3e
    1914:	5f ad       	ldd	r21, Y+63	; 0x3f
    1916:	2d 97       	sbiw	r28, 0x0d	; 13
    1918:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    191c:	9b 01       	movw	r18, r22
    191e:	ac 01       	movw	r20, r24
    1920:	87 01       	movw	r16, r14
    1922:	ff 24       	eor	r15, r15
    1924:	ee 24       	eor	r14, r14
    1926:	89 a1       	ldd	r24, Y+33	; 0x21
    1928:	9a a1       	ldd	r25, Y+34	; 0x22
    192a:	ab a1       	ldd	r26, Y+35	; 0x23
    192c:	bc a1       	ldd	r27, Y+36	; 0x24
    192e:	a0 70       	andi	r26, 0x00	; 0
    1930:	b0 70       	andi	r27, 0x00	; 0
    1932:	57 01       	movw	r10, r14
    1934:	68 01       	movw	r12, r16
    1936:	a8 2a       	or	r10, r24
    1938:	b9 2a       	or	r11, r25
    193a:	ca 2a       	or	r12, r26
    193c:	db 2a       	or	r13, r27
    193e:	a2 16       	cp	r10, r18
    1940:	b3 06       	cpc	r11, r19
    1942:	c4 06       	cpc	r12, r20
    1944:	d5 06       	cpc	r13, r21
    1946:	00 f5       	brcc	.+64     	; 0x1988 <__umoddi3+0xa64>
    1948:	08 94       	sec
    194a:	61 08       	sbc	r6, r1
    194c:	71 08       	sbc	r7, r1
    194e:	81 08       	sbc	r8, r1
    1950:	91 08       	sbc	r9, r1
    1952:	69 a5       	ldd	r22, Y+41	; 0x29
    1954:	7a a5       	ldd	r23, Y+42	; 0x2a
    1956:	8b a5       	ldd	r24, Y+43	; 0x2b
    1958:	9c a5       	ldd	r25, Y+44	; 0x2c
    195a:	a6 0e       	add	r10, r22
    195c:	b7 1e       	adc	r11, r23
    195e:	c8 1e       	adc	r12, r24
    1960:	d9 1e       	adc	r13, r25
    1962:	a6 16       	cp	r10, r22
    1964:	b7 06       	cpc	r11, r23
    1966:	c8 06       	cpc	r12, r24
    1968:	d9 06       	cpc	r13, r25
    196a:	70 f0       	brcs	.+28     	; 0x1988 <__umoddi3+0xa64>
    196c:	a2 16       	cp	r10, r18
    196e:	b3 06       	cpc	r11, r19
    1970:	c4 06       	cpc	r12, r20
    1972:	d5 06       	cpc	r13, r21
    1974:	48 f4       	brcc	.+18     	; 0x1988 <__umoddi3+0xa64>
    1976:	08 94       	sec
    1978:	61 08       	sbc	r6, r1
    197a:	71 08       	sbc	r7, r1
    197c:	81 08       	sbc	r8, r1
    197e:	91 08       	sbc	r9, r1
    1980:	a6 0e       	add	r10, r22
    1982:	b7 1e       	adc	r11, r23
    1984:	c8 1e       	adc	r12, r24
    1986:	d9 1e       	adc	r13, r25
    1988:	d6 01       	movw	r26, r12
    198a:	c5 01       	movw	r24, r10
    198c:	82 1b       	sub	r24, r18
    198e:	93 0b       	sbc	r25, r19
    1990:	a4 0b       	sbc	r26, r20
    1992:	b5 0b       	sbc	r27, r21
    1994:	89 8f       	std	Y+25, r24	; 0x19
    1996:	9a 8f       	std	Y+26, r25	; 0x1a
    1998:	ab 8f       	std	Y+27, r26	; 0x1b
    199a:	bc 8f       	std	Y+28, r27	; 0x1c
    199c:	d1 01       	movw	r26, r2
    199e:	99 27       	eor	r25, r25
    19a0:	88 27       	eor	r24, r24
    19a2:	84 01       	movw	r16, r8
    19a4:	73 01       	movw	r14, r6
    19a6:	e8 2a       	or	r14, r24
    19a8:	f9 2a       	or	r15, r25
    19aa:	0a 2b       	or	r16, r26
    19ac:	1b 2b       	or	r17, r27
    19ae:	4f ef       	ldi	r20, 0xFF	; 255
    19b0:	a4 2e       	mov	r10, r20
    19b2:	4f ef       	ldi	r20, 0xFF	; 255
    19b4:	b4 2e       	mov	r11, r20
    19b6:	c1 2c       	mov	r12, r1
    19b8:	d1 2c       	mov	r13, r1
    19ba:	ae 20       	and	r10, r14
    19bc:	bf 20       	and	r11, r15
    19be:	c0 22       	and	r12, r16
    19c0:	d1 22       	and	r13, r17
    19c2:	78 01       	movw	r14, r16
    19c4:	00 27       	eor	r16, r16
    19c6:	11 27       	eor	r17, r17
    19c8:	6d a0       	ldd	r6, Y+37	; 0x25
    19ca:	7e a0       	ldd	r7, Y+38	; 0x26
    19cc:	8f a0       	ldd	r8, Y+39	; 0x27
    19ce:	98 a4       	ldd	r9, Y+40	; 0x28
    19d0:	4f ef       	ldi	r20, 0xFF	; 255
    19d2:	5f ef       	ldi	r21, 0xFF	; 255
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	64 22       	and	r6, r20
    19da:	75 22       	and	r7, r21
    19dc:	86 22       	and	r8, r22
    19de:	97 22       	and	r9, r23
    19e0:	8d a1       	ldd	r24, Y+37	; 0x25
    19e2:	9e a1       	ldd	r25, Y+38	; 0x26
    19e4:	af a1       	ldd	r26, Y+39	; 0x27
    19e6:	b8 a5       	ldd	r27, Y+40	; 0x28
    19e8:	bd 01       	movw	r22, r26
    19ea:	88 27       	eor	r24, r24
    19ec:	99 27       	eor	r25, r25
    19ee:	65 96       	adiw	r28, 0x15	; 21
    19f0:	6c af       	std	Y+60, r22	; 0x3c
    19f2:	7d af       	std	Y+61, r23	; 0x3d
    19f4:	8e af       	std	Y+62, r24	; 0x3e
    19f6:	9f af       	std	Y+63, r25	; 0x3f
    19f8:	65 97       	sbiw	r28, 0x15	; 21
    19fa:	c6 01       	movw	r24, r12
    19fc:	b5 01       	movw	r22, r10
    19fe:	a4 01       	movw	r20, r8
    1a00:	93 01       	movw	r18, r6
    1a02:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    1a06:	61 96       	adiw	r28, 0x11	; 17
    1a08:	6c af       	std	Y+60, r22	; 0x3c
    1a0a:	7d af       	std	Y+61, r23	; 0x3d
    1a0c:	8e af       	std	Y+62, r24	; 0x3e
    1a0e:	9f af       	std	Y+63, r25	; 0x3f
    1a10:	61 97       	sbiw	r28, 0x11	; 17
    1a12:	c6 01       	movw	r24, r12
    1a14:	b5 01       	movw	r22, r10
    1a16:	65 96       	adiw	r28, 0x15	; 21
    1a18:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a1a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a1c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a1e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a20:	65 97       	sbiw	r28, 0x15	; 21
    1a22:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    1a26:	1b 01       	movw	r2, r22
    1a28:	2c 01       	movw	r4, r24
    1a2a:	c8 01       	movw	r24, r16
    1a2c:	b7 01       	movw	r22, r14
    1a2e:	a4 01       	movw	r20, r8
    1a30:	93 01       	movw	r18, r6
    1a32:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    1a36:	5b 01       	movw	r10, r22
    1a38:	6c 01       	movw	r12, r24
    1a3a:	c8 01       	movw	r24, r16
    1a3c:	b7 01       	movw	r22, r14
    1a3e:	65 96       	adiw	r28, 0x15	; 21
    1a40:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a42:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a44:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a46:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a48:	65 97       	sbiw	r28, 0x15	; 21
    1a4a:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    1a4e:	7b 01       	movw	r14, r22
    1a50:	8c 01       	movw	r16, r24
    1a52:	a6 01       	movw	r20, r12
    1a54:	95 01       	movw	r18, r10
    1a56:	22 0d       	add	r18, r2
    1a58:	33 1d       	adc	r19, r3
    1a5a:	44 1d       	adc	r20, r4
    1a5c:	55 1d       	adc	r21, r5
    1a5e:	61 96       	adiw	r28, 0x11	; 17
    1a60:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a62:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a64:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a66:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a68:	61 97       	sbiw	r28, 0x11	; 17
    1a6a:	c4 01       	movw	r24, r8
    1a6c:	aa 27       	eor	r26, r26
    1a6e:	bb 27       	eor	r27, r27
    1a70:	28 0f       	add	r18, r24
    1a72:	39 1f       	adc	r19, r25
    1a74:	4a 1f       	adc	r20, r26
    1a76:	5b 1f       	adc	r21, r27
    1a78:	2a 15       	cp	r18, r10
    1a7a:	3b 05       	cpc	r19, r11
    1a7c:	4c 05       	cpc	r20, r12
    1a7e:	5d 05       	cpc	r21, r13
    1a80:	48 f4       	brcc	.+18     	; 0x1a94 <__umoddi3+0xb70>
    1a82:	81 2c       	mov	r8, r1
    1a84:	91 2c       	mov	r9, r1
    1a86:	e1 e0       	ldi	r30, 0x01	; 1
    1a88:	ae 2e       	mov	r10, r30
    1a8a:	b1 2c       	mov	r11, r1
    1a8c:	e8 0c       	add	r14, r8
    1a8e:	f9 1c       	adc	r15, r9
    1a90:	0a 1d       	adc	r16, r10
    1a92:	1b 1d       	adc	r17, r11
    1a94:	ca 01       	movw	r24, r20
    1a96:	aa 27       	eor	r26, r26
    1a98:	bb 27       	eor	r27, r27
    1a9a:	57 01       	movw	r10, r14
    1a9c:	68 01       	movw	r12, r16
    1a9e:	a8 0e       	add	r10, r24
    1aa0:	b9 1e       	adc	r11, r25
    1aa2:	ca 1e       	adc	r12, r26
    1aa4:	db 1e       	adc	r13, r27
    1aa6:	a9 01       	movw	r20, r18
    1aa8:	33 27       	eor	r19, r19
    1aaa:	22 27       	eor	r18, r18
    1aac:	61 96       	adiw	r28, 0x11	; 17
    1aae:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ab0:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ab2:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ab4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ab6:	61 97       	sbiw	r28, 0x11	; 17
    1ab8:	a0 70       	andi	r26, 0x00	; 0
    1aba:	b0 70       	andi	r27, 0x00	; 0
    1abc:	28 0f       	add	r18, r24
    1abe:	39 1f       	adc	r19, r25
    1ac0:	4a 1f       	adc	r20, r26
    1ac2:	5b 1f       	adc	r21, r27
    1ac4:	e9 8c       	ldd	r14, Y+25	; 0x19
    1ac6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1ac8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1aca:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1acc:	ea 14       	cp	r14, r10
    1ace:	fb 04       	cpc	r15, r11
    1ad0:	0c 05       	cpc	r16, r12
    1ad2:	1d 05       	cpc	r17, r13
    1ad4:	70 f0       	brcs	.+28     	; 0x1af2 <__umoddi3+0xbce>
    1ad6:	ae 14       	cp	r10, r14
    1ad8:	bf 04       	cpc	r11, r15
    1ada:	c0 06       	cpc	r12, r16
    1adc:	d1 06       	cpc	r13, r17
    1ade:	69 f5       	brne	.+90     	; 0x1b3a <__umoddi3+0xc16>
    1ae0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ae2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ae4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ae6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ae8:	62 17       	cp	r22, r18
    1aea:	73 07       	cpc	r23, r19
    1aec:	84 07       	cpc	r24, r20
    1aee:	95 07       	cpc	r25, r21
    1af0:	20 f5       	brcc	.+72     	; 0x1b3a <__umoddi3+0xc16>
    1af2:	da 01       	movw	r26, r20
    1af4:	c9 01       	movw	r24, r18
    1af6:	6d a0       	ldd	r6, Y+37	; 0x25
    1af8:	7e a0       	ldd	r7, Y+38	; 0x26
    1afa:	8f a0       	ldd	r8, Y+39	; 0x27
    1afc:	98 a4       	ldd	r9, Y+40	; 0x28
    1afe:	86 19       	sub	r24, r6
    1b00:	97 09       	sbc	r25, r7
    1b02:	a8 09       	sbc	r26, r8
    1b04:	b9 09       	sbc	r27, r9
    1b06:	e9 a4       	ldd	r14, Y+41	; 0x29
    1b08:	fa a4       	ldd	r15, Y+42	; 0x2a
    1b0a:	0b a5       	ldd	r16, Y+43	; 0x2b
    1b0c:	1c a5       	ldd	r17, Y+44	; 0x2c
    1b0e:	ae 18       	sub	r10, r14
    1b10:	bf 08       	sbc	r11, r15
    1b12:	c0 0a       	sbc	r12, r16
    1b14:	d1 0a       	sbc	r13, r17
    1b16:	ee 24       	eor	r14, r14
    1b18:	ff 24       	eor	r15, r15
    1b1a:	87 01       	movw	r16, r14
    1b1c:	28 17       	cp	r18, r24
    1b1e:	39 07       	cpc	r19, r25
    1b20:	4a 07       	cpc	r20, r26
    1b22:	5b 07       	cpc	r21, r27
    1b24:	28 f4       	brcc	.+10     	; 0x1b30 <__umoddi3+0xc0c>
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	e2 2e       	mov	r14, r18
    1b2a:	f1 2c       	mov	r15, r1
    1b2c:	01 2d       	mov	r16, r1
    1b2e:	11 2d       	mov	r17, r1
    1b30:	ae 18       	sub	r10, r14
    1b32:	bf 08       	sbc	r11, r15
    1b34:	c0 0a       	sbc	r12, r16
    1b36:	d1 0a       	sbc	r13, r17
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <__umoddi3+0xc1a>
    1b3a:	da 01       	movw	r26, r20
    1b3c:	c9 01       	movw	r24, r18
    1b3e:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1b40:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1b42:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1b44:	98 a0       	ldd	r9, Y+32	; 0x20
    1b46:	68 1a       	sub	r6, r24
    1b48:	79 0a       	sbc	r7, r25
    1b4a:	8a 0a       	sbc	r8, r26
    1b4c:	9b 0a       	sbc	r9, r27
    1b4e:	49 8d       	ldd	r20, Y+25	; 0x19
    1b50:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b52:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b54:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b56:	4a 19       	sub	r20, r10
    1b58:	5b 09       	sbc	r21, r11
    1b5a:	6c 09       	sbc	r22, r12
    1b5c:	7d 09       	sbc	r23, r13
    1b5e:	5a 01       	movw	r10, r20
    1b60:	6b 01       	movw	r12, r22
    1b62:	22 24       	eor	r2, r2
    1b64:	33 24       	eor	r3, r3
    1b66:	21 01       	movw	r4, r2
    1b68:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b6a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b70:	66 15       	cp	r22, r6
    1b72:	77 05       	cpc	r23, r7
    1b74:	88 05       	cpc	r24, r8
    1b76:	99 05       	cpc	r25, r9
    1b78:	28 f4       	brcc	.+10     	; 0x1b84 <__umoddi3+0xc60>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	28 2e       	mov	r2, r24
    1b7e:	31 2c       	mov	r3, r1
    1b80:	41 2c       	mov	r4, r1
    1b82:	51 2c       	mov	r5, r1
    1b84:	86 01       	movw	r16, r12
    1b86:	75 01       	movw	r14, r10
    1b88:	e2 18       	sub	r14, r2
    1b8a:	f3 08       	sbc	r15, r3
    1b8c:	04 09       	sbc	r16, r4
    1b8e:	15 09       	sbc	r17, r5
    1b90:	a8 01       	movw	r20, r16
    1b92:	97 01       	movw	r18, r14
    1b94:	66 96       	adiw	r28, 0x16	; 22
    1b96:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b98:	66 97       	sbiw	r28, 0x16	; 22
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <__umoddi3+0xc80>
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	44 1f       	adc	r20, r20
    1ba2:	55 1f       	adc	r21, r21
    1ba4:	0a 94       	dec	r0
    1ba6:	d2 f7       	brpl	.-12     	; 0x1b9c <__umoddi3+0xc78>
    1ba8:	d4 01       	movw	r26, r8
    1baa:	c3 01       	movw	r24, r6
    1bac:	67 96       	adiw	r28, 0x17	; 23
    1bae:	0f ac       	ldd	r0, Y+63	; 0x3f
    1bb0:	67 97       	sbiw	r28, 0x17	; 23
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <__umoddi3+0xc98>
    1bb4:	b6 95       	lsr	r27
    1bb6:	a7 95       	ror	r26
    1bb8:	97 95       	ror	r25
    1bba:	87 95       	ror	r24
    1bbc:	0a 94       	dec	r0
    1bbe:	d2 f7       	brpl	.-12     	; 0x1bb4 <__umoddi3+0xc90>
    1bc0:	28 2b       	or	r18, r24
    1bc2:	39 2b       	or	r19, r25
    1bc4:	4a 2b       	or	r20, r26
    1bc6:	5b 2b       	or	r21, r27
    1bc8:	29 8b       	std	Y+17, r18	; 0x11
    1bca:	3a 8b       	std	Y+18, r19	; 0x12
    1bcc:	4b 8b       	std	Y+19, r20	; 0x13
    1bce:	5c 8b       	std	Y+20, r21	; 0x14
    1bd0:	67 96       	adiw	r28, 0x17	; 23
    1bd2:	0f ac       	ldd	r0, Y+63	; 0x3f
    1bd4:	67 97       	sbiw	r28, 0x17	; 23
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <__umoddi3+0xcbc>
    1bd8:	16 95       	lsr	r17
    1bda:	07 95       	ror	r16
    1bdc:	f7 94       	ror	r15
    1bde:	e7 94       	ror	r14
    1be0:	0a 94       	dec	r0
    1be2:	d2 f7       	brpl	.-12     	; 0x1bd8 <__umoddi3+0xcb4>
    1be4:	ed 8a       	std	Y+21, r14	; 0x15
    1be6:	fe 8a       	std	Y+22, r15	; 0x16
    1be8:	0f 8b       	std	Y+23, r16	; 0x17
    1bea:	18 8f       	std	Y+24, r17	; 0x18
    1bec:	3a 89       	ldd	r19, Y+18	; 0x12
    1bee:	4b 89       	ldd	r20, Y+19	; 0x13
    1bf0:	5c 89       	ldd	r21, Y+20	; 0x14
    1bf2:	6e 2d       	mov	r22, r14
    1bf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfa:	c5 5a       	subi	r28, 0xA5	; 165
    1bfc:	df 4f       	sbci	r29, 0xFF	; 255
    1bfe:	e2 e1       	ldi	r30, 0x12	; 18
    1c00:	0c 94 40 2d 	jmp	0x5a80	; 0x5a80 <__epilogue_restores__>

00001c04 <_fpadd_parts>:
    1c04:	a0 e0       	ldi	r26, 0x00	; 0
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e8 e0       	ldi	r30, 0x08	; 8
    1c0a:	fe e0       	ldi	r31, 0x0E	; 14
    1c0c:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <__prologue_saves__>
    1c10:	dc 01       	movw	r26, r24
    1c12:	2b 01       	movw	r4, r22
    1c14:	fa 01       	movw	r30, r20
    1c16:	9c 91       	ld	r25, X
    1c18:	92 30       	cpi	r25, 0x02	; 2
    1c1a:	08 f4       	brcc	.+2      	; 0x1c1e <_fpadd_parts+0x1a>
    1c1c:	39 c1       	rjmp	.+626    	; 0x1e90 <_fpadd_parts+0x28c>
    1c1e:	eb 01       	movw	r28, r22
    1c20:	88 81       	ld	r24, Y
    1c22:	82 30       	cpi	r24, 0x02	; 2
    1c24:	08 f4       	brcc	.+2      	; 0x1c28 <_fpadd_parts+0x24>
    1c26:	33 c1       	rjmp	.+614    	; 0x1e8e <_fpadd_parts+0x28a>
    1c28:	94 30       	cpi	r25, 0x04	; 4
    1c2a:	69 f4       	brne	.+26     	; 0x1c46 <_fpadd_parts+0x42>
    1c2c:	84 30       	cpi	r24, 0x04	; 4
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <_fpadd_parts+0x2e>
    1c30:	2f c1       	rjmp	.+606    	; 0x1e90 <_fpadd_parts+0x28c>
    1c32:	11 96       	adiw	r26, 0x01	; 1
    1c34:	9c 91       	ld	r25, X
    1c36:	11 97       	sbiw	r26, 0x01	; 1
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	98 17       	cp	r25, r24
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <_fpadd_parts+0x3c>
    1c3e:	28 c1       	rjmp	.+592    	; 0x1e90 <_fpadd_parts+0x28c>
    1c40:	a0 e6       	ldi	r26, 0x60	; 96
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	25 c1       	rjmp	.+586    	; 0x1e90 <_fpadd_parts+0x28c>
    1c46:	84 30       	cpi	r24, 0x04	; 4
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <_fpadd_parts+0x48>
    1c4a:	21 c1       	rjmp	.+578    	; 0x1e8e <_fpadd_parts+0x28a>
    1c4c:	82 30       	cpi	r24, 0x02	; 2
    1c4e:	a9 f4       	brne	.+42     	; 0x1c7a <_fpadd_parts+0x76>
    1c50:	92 30       	cpi	r25, 0x02	; 2
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <_fpadd_parts+0x52>
    1c54:	1d c1       	rjmp	.+570    	; 0x1e90 <_fpadd_parts+0x28c>
    1c56:	9a 01       	movw	r18, r20
    1c58:	ad 01       	movw	r20, r26
    1c5a:	88 e0       	ldi	r24, 0x08	; 8
    1c5c:	ea 01       	movw	r28, r20
    1c5e:	09 90       	ld	r0, Y+
    1c60:	ae 01       	movw	r20, r28
    1c62:	e9 01       	movw	r28, r18
    1c64:	09 92       	st	Y+, r0
    1c66:	9e 01       	movw	r18, r28
    1c68:	81 50       	subi	r24, 0x01	; 1
    1c6a:	c1 f7       	brne	.-16     	; 0x1c5c <_fpadd_parts+0x58>
    1c6c:	e2 01       	movw	r28, r4
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	11 96       	adiw	r26, 0x01	; 1
    1c72:	9c 91       	ld	r25, X
    1c74:	89 23       	and	r24, r25
    1c76:	81 83       	std	Z+1, r24	; 0x01
    1c78:	08 c1       	rjmp	.+528    	; 0x1e8a <_fpadd_parts+0x286>
    1c7a:	92 30       	cpi	r25, 0x02	; 2
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <_fpadd_parts+0x7c>
    1c7e:	07 c1       	rjmp	.+526    	; 0x1e8e <_fpadd_parts+0x28a>
    1c80:	12 96       	adiw	r26, 0x02	; 2
    1c82:	2d 90       	ld	r2, X+
    1c84:	3c 90       	ld	r3, X
    1c86:	13 97       	sbiw	r26, 0x03	; 3
    1c88:	eb 01       	movw	r28, r22
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	14 96       	adiw	r26, 0x04	; 4
    1c90:	ad 90       	ld	r10, X+
    1c92:	bd 90       	ld	r11, X+
    1c94:	cd 90       	ld	r12, X+
    1c96:	dc 90       	ld	r13, X
    1c98:	17 97       	sbiw	r26, 0x07	; 7
    1c9a:	ec 80       	ldd	r14, Y+4	; 0x04
    1c9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1c9e:	0e 81       	ldd	r16, Y+6	; 0x06
    1ca0:	1f 81       	ldd	r17, Y+7	; 0x07
    1ca2:	91 01       	movw	r18, r2
    1ca4:	28 1b       	sub	r18, r24
    1ca6:	39 0b       	sbc	r19, r25
    1ca8:	b9 01       	movw	r22, r18
    1caa:	37 ff       	sbrs	r19, 7
    1cac:	04 c0       	rjmp	.+8      	; 0x1cb6 <_fpadd_parts+0xb2>
    1cae:	66 27       	eor	r22, r22
    1cb0:	77 27       	eor	r23, r23
    1cb2:	62 1b       	sub	r22, r18
    1cb4:	73 0b       	sbc	r23, r19
    1cb6:	60 32       	cpi	r22, 0x20	; 32
    1cb8:	71 05       	cpc	r23, r1
    1cba:	0c f0       	brlt	.+2      	; 0x1cbe <_fpadd_parts+0xba>
    1cbc:	61 c0       	rjmp	.+194    	; 0x1d80 <_fpadd_parts+0x17c>
    1cbe:	12 16       	cp	r1, r18
    1cc0:	13 06       	cpc	r1, r19
    1cc2:	6c f5       	brge	.+90     	; 0x1d1e <_fpadd_parts+0x11a>
    1cc4:	37 01       	movw	r6, r14
    1cc6:	48 01       	movw	r8, r16
    1cc8:	06 2e       	mov	r0, r22
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <_fpadd_parts+0xd0>
    1ccc:	96 94       	lsr	r9
    1cce:	87 94       	ror	r8
    1cd0:	77 94       	ror	r7
    1cd2:	67 94       	ror	r6
    1cd4:	0a 94       	dec	r0
    1cd6:	d2 f7       	brpl	.-12     	; 0x1ccc <_fpadd_parts+0xc8>
    1cd8:	21 e0       	ldi	r18, 0x01	; 1
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <_fpadd_parts+0xe6>
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	44 1f       	adc	r20, r20
    1ce8:	55 1f       	adc	r21, r21
    1cea:	6a 95       	dec	r22
    1cec:	d2 f7       	brpl	.-12     	; 0x1ce2 <_fpadd_parts+0xde>
    1cee:	21 50       	subi	r18, 0x01	; 1
    1cf0:	30 40       	sbci	r19, 0x00	; 0
    1cf2:	40 40       	sbci	r20, 0x00	; 0
    1cf4:	50 40       	sbci	r21, 0x00	; 0
    1cf6:	2e 21       	and	r18, r14
    1cf8:	3f 21       	and	r19, r15
    1cfa:	40 23       	and	r20, r16
    1cfc:	51 23       	and	r21, r17
    1cfe:	21 15       	cp	r18, r1
    1d00:	31 05       	cpc	r19, r1
    1d02:	41 05       	cpc	r20, r1
    1d04:	51 05       	cpc	r21, r1
    1d06:	21 f0       	breq	.+8      	; 0x1d10 <_fpadd_parts+0x10c>
    1d08:	21 e0       	ldi	r18, 0x01	; 1
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	79 01       	movw	r14, r18
    1d12:	8a 01       	movw	r16, r20
    1d14:	e6 28       	or	r14, r6
    1d16:	f7 28       	or	r15, r7
    1d18:	08 29       	or	r16, r8
    1d1a:	19 29       	or	r17, r9
    1d1c:	3c c0       	rjmp	.+120    	; 0x1d96 <_fpadd_parts+0x192>
    1d1e:	23 2b       	or	r18, r19
    1d20:	d1 f1       	breq	.+116    	; 0x1d96 <_fpadd_parts+0x192>
    1d22:	26 0e       	add	r2, r22
    1d24:	37 1e       	adc	r3, r23
    1d26:	35 01       	movw	r6, r10
    1d28:	46 01       	movw	r8, r12
    1d2a:	06 2e       	mov	r0, r22
    1d2c:	04 c0       	rjmp	.+8      	; 0x1d36 <_fpadd_parts+0x132>
    1d2e:	96 94       	lsr	r9
    1d30:	87 94       	ror	r8
    1d32:	77 94       	ror	r7
    1d34:	67 94       	ror	r6
    1d36:	0a 94       	dec	r0
    1d38:	d2 f7       	brpl	.-12     	; 0x1d2e <_fpadd_parts+0x12a>
    1d3a:	21 e0       	ldi	r18, 0x01	; 1
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	04 c0       	rjmp	.+8      	; 0x1d4c <_fpadd_parts+0x148>
    1d44:	22 0f       	add	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	44 1f       	adc	r20, r20
    1d4a:	55 1f       	adc	r21, r21
    1d4c:	6a 95       	dec	r22
    1d4e:	d2 f7       	brpl	.-12     	; 0x1d44 <_fpadd_parts+0x140>
    1d50:	21 50       	subi	r18, 0x01	; 1
    1d52:	30 40       	sbci	r19, 0x00	; 0
    1d54:	40 40       	sbci	r20, 0x00	; 0
    1d56:	50 40       	sbci	r21, 0x00	; 0
    1d58:	2a 21       	and	r18, r10
    1d5a:	3b 21       	and	r19, r11
    1d5c:	4c 21       	and	r20, r12
    1d5e:	5d 21       	and	r21, r13
    1d60:	21 15       	cp	r18, r1
    1d62:	31 05       	cpc	r19, r1
    1d64:	41 05       	cpc	r20, r1
    1d66:	51 05       	cpc	r21, r1
    1d68:	21 f0       	breq	.+8      	; 0x1d72 <_fpadd_parts+0x16e>
    1d6a:	21 e0       	ldi	r18, 0x01	; 1
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	59 01       	movw	r10, r18
    1d74:	6a 01       	movw	r12, r20
    1d76:	a6 28       	or	r10, r6
    1d78:	b7 28       	or	r11, r7
    1d7a:	c8 28       	or	r12, r8
    1d7c:	d9 28       	or	r13, r9
    1d7e:	0b c0       	rjmp	.+22     	; 0x1d96 <_fpadd_parts+0x192>
    1d80:	82 15       	cp	r24, r2
    1d82:	93 05       	cpc	r25, r3
    1d84:	2c f0       	brlt	.+10     	; 0x1d90 <_fpadd_parts+0x18c>
    1d86:	1c 01       	movw	r2, r24
    1d88:	aa 24       	eor	r10, r10
    1d8a:	bb 24       	eor	r11, r11
    1d8c:	65 01       	movw	r12, r10
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <_fpadd_parts+0x192>
    1d90:	ee 24       	eor	r14, r14
    1d92:	ff 24       	eor	r15, r15
    1d94:	87 01       	movw	r16, r14
    1d96:	11 96       	adiw	r26, 0x01	; 1
    1d98:	9c 91       	ld	r25, X
    1d9a:	d2 01       	movw	r26, r4
    1d9c:	11 96       	adiw	r26, 0x01	; 1
    1d9e:	8c 91       	ld	r24, X
    1da0:	98 17       	cp	r25, r24
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <_fpadd_parts+0x1a2>
    1da4:	45 c0       	rjmp	.+138    	; 0x1e30 <_fpadd_parts+0x22c>
    1da6:	99 23       	and	r25, r25
    1da8:	39 f0       	breq	.+14     	; 0x1db8 <_fpadd_parts+0x1b4>
    1daa:	a8 01       	movw	r20, r16
    1dac:	97 01       	movw	r18, r14
    1dae:	2a 19       	sub	r18, r10
    1db0:	3b 09       	sbc	r19, r11
    1db2:	4c 09       	sbc	r20, r12
    1db4:	5d 09       	sbc	r21, r13
    1db6:	06 c0       	rjmp	.+12     	; 0x1dc4 <_fpadd_parts+0x1c0>
    1db8:	a6 01       	movw	r20, r12
    1dba:	95 01       	movw	r18, r10
    1dbc:	2e 19       	sub	r18, r14
    1dbe:	3f 09       	sbc	r19, r15
    1dc0:	40 0b       	sbc	r20, r16
    1dc2:	51 0b       	sbc	r21, r17
    1dc4:	57 fd       	sbrc	r21, 7
    1dc6:	08 c0       	rjmp	.+16     	; 0x1dd8 <_fpadd_parts+0x1d4>
    1dc8:	11 82       	std	Z+1, r1	; 0x01
    1dca:	33 82       	std	Z+3, r3	; 0x03
    1dcc:	22 82       	std	Z+2, r2	; 0x02
    1dce:	24 83       	std	Z+4, r18	; 0x04
    1dd0:	35 83       	std	Z+5, r19	; 0x05
    1dd2:	46 83       	std	Z+6, r20	; 0x06
    1dd4:	57 83       	std	Z+7, r21	; 0x07
    1dd6:	1d c0       	rjmp	.+58     	; 0x1e12 <_fpadd_parts+0x20e>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	81 83       	std	Z+1, r24	; 0x01
    1ddc:	33 82       	std	Z+3, r3	; 0x03
    1dde:	22 82       	std	Z+2, r2	; 0x02
    1de0:	88 27       	eor	r24, r24
    1de2:	99 27       	eor	r25, r25
    1de4:	dc 01       	movw	r26, r24
    1de6:	82 1b       	sub	r24, r18
    1de8:	93 0b       	sbc	r25, r19
    1dea:	a4 0b       	sbc	r26, r20
    1dec:	b5 0b       	sbc	r27, r21
    1dee:	84 83       	std	Z+4, r24	; 0x04
    1df0:	95 83       	std	Z+5, r25	; 0x05
    1df2:	a6 83       	std	Z+6, r26	; 0x06
    1df4:	b7 83       	std	Z+7, r27	; 0x07
    1df6:	0d c0       	rjmp	.+26     	; 0x1e12 <_fpadd_parts+0x20e>
    1df8:	22 0f       	add	r18, r18
    1dfa:	33 1f       	adc	r19, r19
    1dfc:	44 1f       	adc	r20, r20
    1dfe:	55 1f       	adc	r21, r21
    1e00:	24 83       	std	Z+4, r18	; 0x04
    1e02:	35 83       	std	Z+5, r19	; 0x05
    1e04:	46 83       	std	Z+6, r20	; 0x06
    1e06:	57 83       	std	Z+7, r21	; 0x07
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	93 83       	std	Z+3, r25	; 0x03
    1e10:	82 83       	std	Z+2, r24	; 0x02
    1e12:	24 81       	ldd	r18, Z+4	; 0x04
    1e14:	35 81       	ldd	r19, Z+5	; 0x05
    1e16:	46 81       	ldd	r20, Z+6	; 0x06
    1e18:	57 81       	ldd	r21, Z+7	; 0x07
    1e1a:	da 01       	movw	r26, r20
    1e1c:	c9 01       	movw	r24, r18
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	a1 09       	sbc	r26, r1
    1e22:	b1 09       	sbc	r27, r1
    1e24:	8f 5f       	subi	r24, 0xFF	; 255
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	af 4f       	sbci	r26, 0xFF	; 255
    1e2a:	bf 43       	sbci	r27, 0x3F	; 63
    1e2c:	28 f3       	brcs	.-54     	; 0x1df8 <_fpadd_parts+0x1f4>
    1e2e:	0b c0       	rjmp	.+22     	; 0x1e46 <_fpadd_parts+0x242>
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	33 82       	std	Z+3, r3	; 0x03
    1e34:	22 82       	std	Z+2, r2	; 0x02
    1e36:	ea 0c       	add	r14, r10
    1e38:	fb 1c       	adc	r15, r11
    1e3a:	0c 1d       	adc	r16, r12
    1e3c:	1d 1d       	adc	r17, r13
    1e3e:	e4 82       	std	Z+4, r14	; 0x04
    1e40:	f5 82       	std	Z+5, r15	; 0x05
    1e42:	06 83       	std	Z+6, r16	; 0x06
    1e44:	17 83       	std	Z+7, r17	; 0x07
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	80 83       	st	Z, r24
    1e4a:	24 81       	ldd	r18, Z+4	; 0x04
    1e4c:	35 81       	ldd	r19, Z+5	; 0x05
    1e4e:	46 81       	ldd	r20, Z+6	; 0x06
    1e50:	57 81       	ldd	r21, Z+7	; 0x07
    1e52:	57 ff       	sbrs	r21, 7
    1e54:	1a c0       	rjmp	.+52     	; 0x1e8a <_fpadd_parts+0x286>
    1e56:	c9 01       	movw	r24, r18
    1e58:	aa 27       	eor	r26, r26
    1e5a:	97 fd       	sbrc	r25, 7
    1e5c:	a0 95       	com	r26
    1e5e:	ba 2f       	mov	r27, r26
    1e60:	81 70       	andi	r24, 0x01	; 1
    1e62:	90 70       	andi	r25, 0x00	; 0
    1e64:	a0 70       	andi	r26, 0x00	; 0
    1e66:	b0 70       	andi	r27, 0x00	; 0
    1e68:	56 95       	lsr	r21
    1e6a:	47 95       	ror	r20
    1e6c:	37 95       	ror	r19
    1e6e:	27 95       	ror	r18
    1e70:	82 2b       	or	r24, r18
    1e72:	93 2b       	or	r25, r19
    1e74:	a4 2b       	or	r26, r20
    1e76:	b5 2b       	or	r27, r21
    1e78:	84 83       	std	Z+4, r24	; 0x04
    1e7a:	95 83       	std	Z+5, r25	; 0x05
    1e7c:	a6 83       	std	Z+6, r26	; 0x06
    1e7e:	b7 83       	std	Z+7, r27	; 0x07
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	93 83       	std	Z+3, r25	; 0x03
    1e88:	82 83       	std	Z+2, r24	; 0x02
    1e8a:	df 01       	movw	r26, r30
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <_fpadd_parts+0x28c>
    1e8e:	d2 01       	movw	r26, r4
    1e90:	cd 01       	movw	r24, r26
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	e2 e1       	ldi	r30, 0x12	; 18
    1e98:	0c 94 40 2d 	jmp	0x5a80	; 0x5a80 <__epilogue_restores__>

00001e9c <__subsf3>:
    1e9c:	a0 e2       	ldi	r26, 0x20	; 32
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e4 e5       	ldi	r30, 0x54	; 84
    1ea2:	ff e0       	ldi	r31, 0x0F	; 15
    1ea4:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <__prologue_saves__+0x18>
    1ea8:	69 83       	std	Y+1, r22	; 0x01
    1eaa:	7a 83       	std	Y+2, r23	; 0x02
    1eac:	8b 83       	std	Y+3, r24	; 0x03
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	2d 83       	std	Y+5, r18	; 0x05
    1eb2:	3e 83       	std	Y+6, r19	; 0x06
    1eb4:	4f 83       	std	Y+7, r20	; 0x07
    1eb6:	58 87       	std	Y+8, r21	; 0x08
    1eb8:	e9 e0       	ldi	r30, 0x09	; 9
    1eba:	ee 2e       	mov	r14, r30
    1ebc:	f1 2c       	mov	r15, r1
    1ebe:	ec 0e       	add	r14, r28
    1ec0:	fd 1e       	adc	r15, r29
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	b7 01       	movw	r22, r14
    1ec8:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1ecc:	8e 01       	movw	r16, r28
    1ece:	0f 5e       	subi	r16, 0xEF	; 239
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	05 96       	adiw	r24, 0x05	; 5
    1ed6:	b8 01       	movw	r22, r16
    1ed8:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1edc:	8a 89       	ldd	r24, Y+18	; 0x12
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	89 27       	eor	r24, r25
    1ee2:	8a 8b       	std	Y+18, r24	; 0x12
    1ee4:	c7 01       	movw	r24, r14
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	ae 01       	movw	r20, r28
    1eea:	47 5e       	subi	r20, 0xE7	; 231
    1eec:	5f 4f       	sbci	r21, 0xFF	; 255
    1eee:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_fpadd_parts>
    1ef2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    1ef6:	a0 96       	adiw	r28, 0x20	; 32
    1ef8:	e6 e0       	ldi	r30, 0x06	; 6
    1efa:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__epilogue_restores__+0x18>

00001efe <__addsf3>:
    1efe:	a0 e2       	ldi	r26, 0x20	; 32
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e5 e8       	ldi	r30, 0x85	; 133
    1f04:	ff e0       	ldi	r31, 0x0F	; 15
    1f06:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <__prologue_saves__+0x18>
    1f0a:	69 83       	std	Y+1, r22	; 0x01
    1f0c:	7a 83       	std	Y+2, r23	; 0x02
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
    1f10:	9c 83       	std	Y+4, r25	; 0x04
    1f12:	2d 83       	std	Y+5, r18	; 0x05
    1f14:	3e 83       	std	Y+6, r19	; 0x06
    1f16:	4f 83       	std	Y+7, r20	; 0x07
    1f18:	58 87       	std	Y+8, r21	; 0x08
    1f1a:	f9 e0       	ldi	r31, 0x09	; 9
    1f1c:	ef 2e       	mov	r14, r31
    1f1e:	f1 2c       	mov	r15, r1
    1f20:	ec 0e       	add	r14, r28
    1f22:	fd 1e       	adc	r15, r29
    1f24:	ce 01       	movw	r24, r28
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	b7 01       	movw	r22, r14
    1f2a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1f2e:	8e 01       	movw	r16, r28
    1f30:	0f 5e       	subi	r16, 0xEF	; 239
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	ce 01       	movw	r24, r28
    1f36:	05 96       	adiw	r24, 0x05	; 5
    1f38:	b8 01       	movw	r22, r16
    1f3a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1f3e:	c7 01       	movw	r24, r14
    1f40:	b8 01       	movw	r22, r16
    1f42:	ae 01       	movw	r20, r28
    1f44:	47 5e       	subi	r20, 0xE7	; 231
    1f46:	5f 4f       	sbci	r21, 0xFF	; 255
    1f48:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_fpadd_parts>
    1f4c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    1f50:	a0 96       	adiw	r28, 0x20	; 32
    1f52:	e6 e0       	ldi	r30, 0x06	; 6
    1f54:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__epilogue_restores__+0x18>

00001f58 <__mulsf3>:
    1f58:	a0 e2       	ldi	r26, 0x20	; 32
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e2 eb       	ldi	r30, 0xB2	; 178
    1f5e:	ff e0       	ldi	r31, 0x0F	; 15
    1f60:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <__prologue_saves__>
    1f64:	69 83       	std	Y+1, r22	; 0x01
    1f66:	7a 83       	std	Y+2, r23	; 0x02
    1f68:	8b 83       	std	Y+3, r24	; 0x03
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	2d 83       	std	Y+5, r18	; 0x05
    1f6e:	3e 83       	std	Y+6, r19	; 0x06
    1f70:	4f 83       	std	Y+7, r20	; 0x07
    1f72:	58 87       	std	Y+8, r21	; 0x08
    1f74:	ce 01       	movw	r24, r28
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	be 01       	movw	r22, r28
    1f7a:	67 5f       	subi	r22, 0xF7	; 247
    1f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1f82:	ce 01       	movw	r24, r28
    1f84:	05 96       	adiw	r24, 0x05	; 5
    1f86:	be 01       	movw	r22, r28
    1f88:	6f 5e       	subi	r22, 0xEF	; 239
    1f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1f90:	99 85       	ldd	r25, Y+9	; 0x09
    1f92:	92 30       	cpi	r25, 0x02	; 2
    1f94:	88 f0       	brcs	.+34     	; 0x1fb8 <__mulsf3+0x60>
    1f96:	89 89       	ldd	r24, Y+17	; 0x11
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	c8 f0       	brcs	.+50     	; 0x1fce <__mulsf3+0x76>
    1f9c:	94 30       	cpi	r25, 0x04	; 4
    1f9e:	19 f4       	brne	.+6      	; 0x1fa6 <__mulsf3+0x4e>
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	51 f4       	brne	.+20     	; 0x1fb8 <__mulsf3+0x60>
    1fa4:	04 c0       	rjmp	.+8      	; 0x1fae <__mulsf3+0x56>
    1fa6:	84 30       	cpi	r24, 0x04	; 4
    1fa8:	29 f4       	brne	.+10     	; 0x1fb4 <__mulsf3+0x5c>
    1faa:	92 30       	cpi	r25, 0x02	; 2
    1fac:	81 f4       	brne	.+32     	; 0x1fce <__mulsf3+0x76>
    1fae:	80 e6       	ldi	r24, 0x60	; 96
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	c6 c0       	rjmp	.+396    	; 0x2140 <__mulsf3+0x1e8>
    1fb4:	92 30       	cpi	r25, 0x02	; 2
    1fb6:	49 f4       	brne	.+18     	; 0x1fca <__mulsf3+0x72>
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	8a 89       	ldd	r24, Y+18	; 0x12
    1fbe:	98 13       	cpse	r25, r24
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	2a 87       	std	Y+10, r18	; 0x0a
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	09 96       	adiw	r24, 0x09	; 9
    1fc8:	bb c0       	rjmp	.+374    	; 0x2140 <__mulsf3+0x1e8>
    1fca:	82 30       	cpi	r24, 0x02	; 2
    1fcc:	49 f4       	brne	.+18     	; 0x1fe0 <__mulsf3+0x88>
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	8a 89       	ldd	r24, Y+18	; 0x12
    1fd4:	98 13       	cpse	r25, r24
    1fd6:	21 e0       	ldi	r18, 0x01	; 1
    1fd8:	2a 8b       	std	Y+18, r18	; 0x12
    1fda:	ce 01       	movw	r24, r28
    1fdc:	41 96       	adiw	r24, 0x11	; 17
    1fde:	b0 c0       	rjmp	.+352    	; 0x2140 <__mulsf3+0x1e8>
    1fe0:	2d 84       	ldd	r2, Y+13	; 0x0d
    1fe2:	3e 84       	ldd	r3, Y+14	; 0x0e
    1fe4:	4f 84       	ldd	r4, Y+15	; 0x0f
    1fe6:	58 88       	ldd	r5, Y+16	; 0x10
    1fe8:	6d 88       	ldd	r6, Y+21	; 0x15
    1fea:	7e 88       	ldd	r7, Y+22	; 0x16
    1fec:	8f 88       	ldd	r8, Y+23	; 0x17
    1fee:	98 8c       	ldd	r9, Y+24	; 0x18
    1ff0:	ee 24       	eor	r14, r14
    1ff2:	ff 24       	eor	r15, r15
    1ff4:	87 01       	movw	r16, r14
    1ff6:	aa 24       	eor	r10, r10
    1ff8:	bb 24       	eor	r11, r11
    1ffa:	65 01       	movw	r12, r10
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	e0 e0       	ldi	r30, 0x00	; 0
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	c1 01       	movw	r24, r2
    200a:	81 70       	andi	r24, 0x01	; 1
    200c:	90 70       	andi	r25, 0x00	; 0
    200e:	89 2b       	or	r24, r25
    2010:	e9 f0       	breq	.+58     	; 0x204c <__mulsf3+0xf4>
    2012:	e6 0c       	add	r14, r6
    2014:	f7 1c       	adc	r15, r7
    2016:	08 1d       	adc	r16, r8
    2018:	19 1d       	adc	r17, r9
    201a:	9a 01       	movw	r18, r20
    201c:	ab 01       	movw	r20, r22
    201e:	2a 0d       	add	r18, r10
    2020:	3b 1d       	adc	r19, r11
    2022:	4c 1d       	adc	r20, r12
    2024:	5d 1d       	adc	r21, r13
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e6 14       	cp	r14, r6
    2030:	f7 04       	cpc	r15, r7
    2032:	08 05       	cpc	r16, r8
    2034:	19 05       	cpc	r17, r9
    2036:	20 f4       	brcc	.+8      	; 0x2040 <__mulsf3+0xe8>
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a0 e0       	ldi	r26, 0x00	; 0
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	ba 01       	movw	r22, r20
    2042:	a9 01       	movw	r20, r18
    2044:	48 0f       	add	r20, r24
    2046:	59 1f       	adc	r21, r25
    2048:	6a 1f       	adc	r22, r26
    204a:	7b 1f       	adc	r23, r27
    204c:	aa 0c       	add	r10, r10
    204e:	bb 1c       	adc	r11, r11
    2050:	cc 1c       	adc	r12, r12
    2052:	dd 1c       	adc	r13, r13
    2054:	97 fe       	sbrs	r9, 7
    2056:	08 c0       	rjmp	.+16     	; 0x2068 <__mulsf3+0x110>
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	a8 2a       	or	r10, r24
    2062:	b9 2a       	or	r11, r25
    2064:	ca 2a       	or	r12, r26
    2066:	db 2a       	or	r13, r27
    2068:	31 96       	adiw	r30, 0x01	; 1
    206a:	e0 32       	cpi	r30, 0x20	; 32
    206c:	f1 05       	cpc	r31, r1
    206e:	49 f0       	breq	.+18     	; 0x2082 <__mulsf3+0x12a>
    2070:	66 0c       	add	r6, r6
    2072:	77 1c       	adc	r7, r7
    2074:	88 1c       	adc	r8, r8
    2076:	99 1c       	adc	r9, r9
    2078:	56 94       	lsr	r5
    207a:	47 94       	ror	r4
    207c:	37 94       	ror	r3
    207e:	27 94       	ror	r2
    2080:	c3 cf       	rjmp	.-122    	; 0x2008 <__mulsf3+0xb0>
    2082:	fa 85       	ldd	r31, Y+10	; 0x0a
    2084:	ea 89       	ldd	r30, Y+18	; 0x12
    2086:	2b 89       	ldd	r18, Y+19	; 0x13
    2088:	3c 89       	ldd	r19, Y+20	; 0x14
    208a:	8b 85       	ldd	r24, Y+11	; 0x0b
    208c:	9c 85       	ldd	r25, Y+12	; 0x0c
    208e:	28 0f       	add	r18, r24
    2090:	39 1f       	adc	r19, r25
    2092:	2e 5f       	subi	r18, 0xFE	; 254
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	17 c0       	rjmp	.+46     	; 0x20c6 <__mulsf3+0x16e>
    2098:	ca 01       	movw	r24, r20
    209a:	81 70       	andi	r24, 0x01	; 1
    209c:	90 70       	andi	r25, 0x00	; 0
    209e:	89 2b       	or	r24, r25
    20a0:	61 f0       	breq	.+24     	; 0x20ba <__mulsf3+0x162>
    20a2:	16 95       	lsr	r17
    20a4:	07 95       	ror	r16
    20a6:	f7 94       	ror	r15
    20a8:	e7 94       	ror	r14
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e0       	ldi	r26, 0x00	; 0
    20b0:	b0 e8       	ldi	r27, 0x80	; 128
    20b2:	e8 2a       	or	r14, r24
    20b4:	f9 2a       	or	r15, r25
    20b6:	0a 2b       	or	r16, r26
    20b8:	1b 2b       	or	r17, r27
    20ba:	76 95       	lsr	r23
    20bc:	67 95       	ror	r22
    20be:	57 95       	ror	r21
    20c0:	47 95       	ror	r20
    20c2:	2f 5f       	subi	r18, 0xFF	; 255
    20c4:	3f 4f       	sbci	r19, 0xFF	; 255
    20c6:	77 fd       	sbrc	r23, 7
    20c8:	e7 cf       	rjmp	.-50     	; 0x2098 <__mulsf3+0x140>
    20ca:	0c c0       	rjmp	.+24     	; 0x20e4 <__mulsf3+0x18c>
    20cc:	44 0f       	add	r20, r20
    20ce:	55 1f       	adc	r21, r21
    20d0:	66 1f       	adc	r22, r22
    20d2:	77 1f       	adc	r23, r23
    20d4:	17 fd       	sbrc	r17, 7
    20d6:	41 60       	ori	r20, 0x01	; 1
    20d8:	ee 0c       	add	r14, r14
    20da:	ff 1c       	adc	r15, r15
    20dc:	00 1f       	adc	r16, r16
    20de:	11 1f       	adc	r17, r17
    20e0:	21 50       	subi	r18, 0x01	; 1
    20e2:	30 40       	sbci	r19, 0x00	; 0
    20e4:	40 30       	cpi	r20, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	59 07       	cpc	r21, r25
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	69 07       	cpc	r22, r25
    20ee:	90 e4       	ldi	r25, 0x40	; 64
    20f0:	79 07       	cpc	r23, r25
    20f2:	60 f3       	brcs	.-40     	; 0x20cc <__mulsf3+0x174>
    20f4:	2b 8f       	std	Y+27, r18	; 0x1b
    20f6:	3c 8f       	std	Y+28, r19	; 0x1c
    20f8:	db 01       	movw	r26, r22
    20fa:	ca 01       	movw	r24, r20
    20fc:	8f 77       	andi	r24, 0x7F	; 127
    20fe:	90 70       	andi	r25, 0x00	; 0
    2100:	a0 70       	andi	r26, 0x00	; 0
    2102:	b0 70       	andi	r27, 0x00	; 0
    2104:	80 34       	cpi	r24, 0x40	; 64
    2106:	91 05       	cpc	r25, r1
    2108:	a1 05       	cpc	r26, r1
    210a:	b1 05       	cpc	r27, r1
    210c:	61 f4       	brne	.+24     	; 0x2126 <__mulsf3+0x1ce>
    210e:	47 fd       	sbrc	r20, 7
    2110:	0a c0       	rjmp	.+20     	; 0x2126 <__mulsf3+0x1ce>
    2112:	e1 14       	cp	r14, r1
    2114:	f1 04       	cpc	r15, r1
    2116:	01 05       	cpc	r16, r1
    2118:	11 05       	cpc	r17, r1
    211a:	29 f0       	breq	.+10     	; 0x2126 <__mulsf3+0x1ce>
    211c:	40 5c       	subi	r20, 0xC0	; 192
    211e:	5f 4f       	sbci	r21, 0xFF	; 255
    2120:	6f 4f       	sbci	r22, 0xFF	; 255
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	40 78       	andi	r20, 0x80	; 128
    2126:	1a 8e       	std	Y+26, r1	; 0x1a
    2128:	fe 17       	cp	r31, r30
    212a:	11 f0       	breq	.+4      	; 0x2130 <__mulsf3+0x1d8>
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	8a 8f       	std	Y+26, r24	; 0x1a
    2130:	4d 8f       	std	Y+29, r20	; 0x1d
    2132:	5e 8f       	std	Y+30, r21	; 0x1e
    2134:	6f 8f       	std	Y+31, r22	; 0x1f
    2136:	78 a3       	std	Y+32, r23	; 0x20
    2138:	83 e0       	ldi	r24, 0x03	; 3
    213a:	89 8f       	std	Y+25, r24	; 0x19
    213c:	ce 01       	movw	r24, r28
    213e:	49 96       	adiw	r24, 0x19	; 25
    2140:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    2144:	a0 96       	adiw	r28, 0x20	; 32
    2146:	e2 e1       	ldi	r30, 0x12	; 18
    2148:	0c 94 40 2d 	jmp	0x5a80	; 0x5a80 <__epilogue_restores__>

0000214c <__divsf3>:
    214c:	a8 e1       	ldi	r26, 0x18	; 24
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	ec ea       	ldi	r30, 0xAC	; 172
    2152:	f0 e1       	ldi	r31, 0x10	; 16
    2154:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <__prologue_saves__+0x10>
    2158:	69 83       	std	Y+1, r22	; 0x01
    215a:	7a 83       	std	Y+2, r23	; 0x02
    215c:	8b 83       	std	Y+3, r24	; 0x03
    215e:	9c 83       	std	Y+4, r25	; 0x04
    2160:	2d 83       	std	Y+5, r18	; 0x05
    2162:	3e 83       	std	Y+6, r19	; 0x06
    2164:	4f 83       	std	Y+7, r20	; 0x07
    2166:	58 87       	std	Y+8, r21	; 0x08
    2168:	b9 e0       	ldi	r27, 0x09	; 9
    216a:	eb 2e       	mov	r14, r27
    216c:	f1 2c       	mov	r15, r1
    216e:	ec 0e       	add	r14, r28
    2170:	fd 1e       	adc	r15, r29
    2172:	ce 01       	movw	r24, r28
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	b7 01       	movw	r22, r14
    2178:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    217c:	8e 01       	movw	r16, r28
    217e:	0f 5e       	subi	r16, 0xEF	; 239
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	ce 01       	movw	r24, r28
    2184:	05 96       	adiw	r24, 0x05	; 5
    2186:	b8 01       	movw	r22, r16
    2188:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    218c:	29 85       	ldd	r18, Y+9	; 0x09
    218e:	22 30       	cpi	r18, 0x02	; 2
    2190:	08 f4       	brcc	.+2      	; 0x2194 <__divsf3+0x48>
    2192:	7e c0       	rjmp	.+252    	; 0x2290 <__divsf3+0x144>
    2194:	39 89       	ldd	r19, Y+17	; 0x11
    2196:	32 30       	cpi	r19, 0x02	; 2
    2198:	10 f4       	brcc	.+4      	; 0x219e <__divsf3+0x52>
    219a:	b8 01       	movw	r22, r16
    219c:	7c c0       	rjmp	.+248    	; 0x2296 <__divsf3+0x14a>
    219e:	8a 85       	ldd	r24, Y+10	; 0x0a
    21a0:	9a 89       	ldd	r25, Y+18	; 0x12
    21a2:	89 27       	eor	r24, r25
    21a4:	8a 87       	std	Y+10, r24	; 0x0a
    21a6:	24 30       	cpi	r18, 0x04	; 4
    21a8:	11 f0       	breq	.+4      	; 0x21ae <__divsf3+0x62>
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 f4       	brne	.+12     	; 0x21ba <__divsf3+0x6e>
    21ae:	23 17       	cp	r18, r19
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <__divsf3+0x68>
    21b2:	6e c0       	rjmp	.+220    	; 0x2290 <__divsf3+0x144>
    21b4:	60 e6       	ldi	r22, 0x60	; 96
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	6e c0       	rjmp	.+220    	; 0x2296 <__divsf3+0x14a>
    21ba:	34 30       	cpi	r19, 0x04	; 4
    21bc:	39 f4       	brne	.+14     	; 0x21cc <__divsf3+0x80>
    21be:	1d 86       	std	Y+13, r1	; 0x0d
    21c0:	1e 86       	std	Y+14, r1	; 0x0e
    21c2:	1f 86       	std	Y+15, r1	; 0x0f
    21c4:	18 8a       	std	Y+16, r1	; 0x10
    21c6:	1c 86       	std	Y+12, r1	; 0x0c
    21c8:	1b 86       	std	Y+11, r1	; 0x0b
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <__divsf3+0x88>
    21cc:	32 30       	cpi	r19, 0x02	; 2
    21ce:	21 f4       	brne	.+8      	; 0x21d8 <__divsf3+0x8c>
    21d0:	84 e0       	ldi	r24, 0x04	; 4
    21d2:	89 87       	std	Y+9, r24	; 0x09
    21d4:	b7 01       	movw	r22, r14
    21d6:	5f c0       	rjmp	.+190    	; 0x2296 <__divsf3+0x14a>
    21d8:	2b 85       	ldd	r18, Y+11	; 0x0b
    21da:	3c 85       	ldd	r19, Y+12	; 0x0c
    21dc:	8b 89       	ldd	r24, Y+19	; 0x13
    21de:	9c 89       	ldd	r25, Y+20	; 0x14
    21e0:	28 1b       	sub	r18, r24
    21e2:	39 0b       	sbc	r19, r25
    21e4:	3c 87       	std	Y+12, r19	; 0x0c
    21e6:	2b 87       	std	Y+11, r18	; 0x0b
    21e8:	ed 84       	ldd	r14, Y+13	; 0x0d
    21ea:	fe 84       	ldd	r15, Y+14	; 0x0e
    21ec:	0f 85       	ldd	r16, Y+15	; 0x0f
    21ee:	18 89       	ldd	r17, Y+16	; 0x10
    21f0:	ad 88       	ldd	r10, Y+21	; 0x15
    21f2:	be 88       	ldd	r11, Y+22	; 0x16
    21f4:	cf 88       	ldd	r12, Y+23	; 0x17
    21f6:	d8 8c       	ldd	r13, Y+24	; 0x18
    21f8:	ea 14       	cp	r14, r10
    21fa:	fb 04       	cpc	r15, r11
    21fc:	0c 05       	cpc	r16, r12
    21fe:	1d 05       	cpc	r17, r13
    2200:	40 f4       	brcc	.+16     	; 0x2212 <__divsf3+0xc6>
    2202:	ee 0c       	add	r14, r14
    2204:	ff 1c       	adc	r15, r15
    2206:	00 1f       	adc	r16, r16
    2208:	11 1f       	adc	r17, r17
    220a:	21 50       	subi	r18, 0x01	; 1
    220c:	30 40       	sbci	r19, 0x00	; 0
    220e:	3c 87       	std	Y+12, r19	; 0x0c
    2210:	2b 87       	std	Y+11, r18	; 0x0b
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a0 e0       	ldi	r26, 0x00	; 0
    2220:	b0 e4       	ldi	r27, 0x40	; 64
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	ea 14       	cp	r14, r10
    2228:	fb 04       	cpc	r15, r11
    222a:	0c 05       	cpc	r16, r12
    222c:	1d 05       	cpc	r17, r13
    222e:	40 f0       	brcs	.+16     	; 0x2240 <__divsf3+0xf4>
    2230:	28 2b       	or	r18, r24
    2232:	39 2b       	or	r19, r25
    2234:	4a 2b       	or	r20, r26
    2236:	5b 2b       	or	r21, r27
    2238:	ea 18       	sub	r14, r10
    223a:	fb 08       	sbc	r15, r11
    223c:	0c 09       	sbc	r16, r12
    223e:	1d 09       	sbc	r17, r13
    2240:	b6 95       	lsr	r27
    2242:	a7 95       	ror	r26
    2244:	97 95       	ror	r25
    2246:	87 95       	ror	r24
    2248:	ee 0c       	add	r14, r14
    224a:	ff 1c       	adc	r15, r15
    224c:	00 1f       	adc	r16, r16
    224e:	11 1f       	adc	r17, r17
    2250:	6f 5f       	subi	r22, 0xFF	; 255
    2252:	7f 4f       	sbci	r23, 0xFF	; 255
    2254:	6f 31       	cpi	r22, 0x1F	; 31
    2256:	71 05       	cpc	r23, r1
    2258:	31 f7       	brne	.-52     	; 0x2226 <__divsf3+0xda>
    225a:	da 01       	movw	r26, r20
    225c:	c9 01       	movw	r24, r18
    225e:	8f 77       	andi	r24, 0x7F	; 127
    2260:	90 70       	andi	r25, 0x00	; 0
    2262:	a0 70       	andi	r26, 0x00	; 0
    2264:	b0 70       	andi	r27, 0x00	; 0
    2266:	80 34       	cpi	r24, 0x40	; 64
    2268:	91 05       	cpc	r25, r1
    226a:	a1 05       	cpc	r26, r1
    226c:	b1 05       	cpc	r27, r1
    226e:	61 f4       	brne	.+24     	; 0x2288 <__divsf3+0x13c>
    2270:	27 fd       	sbrc	r18, 7
    2272:	0a c0       	rjmp	.+20     	; 0x2288 <__divsf3+0x13c>
    2274:	e1 14       	cp	r14, r1
    2276:	f1 04       	cpc	r15, r1
    2278:	01 05       	cpc	r16, r1
    227a:	11 05       	cpc	r17, r1
    227c:	29 f0       	breq	.+10     	; 0x2288 <__divsf3+0x13c>
    227e:	20 5c       	subi	r18, 0xC0	; 192
    2280:	3f 4f       	sbci	r19, 0xFF	; 255
    2282:	4f 4f       	sbci	r20, 0xFF	; 255
    2284:	5f 4f       	sbci	r21, 0xFF	; 255
    2286:	20 78       	andi	r18, 0x80	; 128
    2288:	2d 87       	std	Y+13, r18	; 0x0d
    228a:	3e 87       	std	Y+14, r19	; 0x0e
    228c:	4f 87       	std	Y+15, r20	; 0x0f
    228e:	58 8b       	std	Y+16, r21	; 0x10
    2290:	be 01       	movw	r22, r28
    2292:	67 5f       	subi	r22, 0xF7	; 247
    2294:	7f 4f       	sbci	r23, 0xFF	; 255
    2296:	cb 01       	movw	r24, r22
    2298:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    229c:	68 96       	adiw	r28, 0x18	; 24
    229e:	ea e0       	ldi	r30, 0x0A	; 10
    22a0:	0c 94 48 2d 	jmp	0x5a90	; 0x5a90 <__epilogue_restores__+0x10>

000022a4 <__gtsf2>:
    22a4:	a8 e1       	ldi	r26, 0x18	; 24
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e8 e5       	ldi	r30, 0x58	; 88
    22aa:	f1 e1       	ldi	r31, 0x11	; 17
    22ac:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <__prologue_saves__+0x18>
    22b0:	69 83       	std	Y+1, r22	; 0x01
    22b2:	7a 83       	std	Y+2, r23	; 0x02
    22b4:	8b 83       	std	Y+3, r24	; 0x03
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	2d 83       	std	Y+5, r18	; 0x05
    22ba:	3e 83       	std	Y+6, r19	; 0x06
    22bc:	4f 83       	std	Y+7, r20	; 0x07
    22be:	58 87       	std	Y+8, r21	; 0x08
    22c0:	89 e0       	ldi	r24, 0x09	; 9
    22c2:	e8 2e       	mov	r14, r24
    22c4:	f1 2c       	mov	r15, r1
    22c6:	ec 0e       	add	r14, r28
    22c8:	fd 1e       	adc	r15, r29
    22ca:	ce 01       	movw	r24, r28
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	b7 01       	movw	r22, r14
    22d0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    22d4:	8e 01       	movw	r16, r28
    22d6:	0f 5e       	subi	r16, 0xEF	; 239
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	ce 01       	movw	r24, r28
    22dc:	05 96       	adiw	r24, 0x05	; 5
    22de:	b8 01       	movw	r22, r16
    22e0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	82 30       	cpi	r24, 0x02	; 2
    22e8:	40 f0       	brcs	.+16     	; 0x22fa <__gtsf2+0x56>
    22ea:	89 89       	ldd	r24, Y+17	; 0x11
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	28 f0       	brcs	.+10     	; 0x22fa <__gtsf2+0x56>
    22f0:	c7 01       	movw	r24, r14
    22f2:	b8 01       	movw	r22, r16
    22f4:	0e 94 ca 14 	call	0x2994	; 0x2994 <__fpcmp_parts_f>
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <__gtsf2+0x58>
    22fa:	8f ef       	ldi	r24, 0xFF	; 255
    22fc:	68 96       	adiw	r28, 0x18	; 24
    22fe:	e6 e0       	ldi	r30, 0x06	; 6
    2300:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__epilogue_restores__+0x18>

00002304 <__gesf2>:
    2304:	a8 e1       	ldi	r26, 0x18	; 24
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e8 e8       	ldi	r30, 0x88	; 136
    230a:	f1 e1       	ldi	r31, 0x11	; 17
    230c:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <__prologue_saves__+0x18>
    2310:	69 83       	std	Y+1, r22	; 0x01
    2312:	7a 83       	std	Y+2, r23	; 0x02
    2314:	8b 83       	std	Y+3, r24	; 0x03
    2316:	9c 83       	std	Y+4, r25	; 0x04
    2318:	2d 83       	std	Y+5, r18	; 0x05
    231a:	3e 83       	std	Y+6, r19	; 0x06
    231c:	4f 83       	std	Y+7, r20	; 0x07
    231e:	58 87       	std	Y+8, r21	; 0x08
    2320:	89 e0       	ldi	r24, 0x09	; 9
    2322:	e8 2e       	mov	r14, r24
    2324:	f1 2c       	mov	r15, r1
    2326:	ec 0e       	add	r14, r28
    2328:	fd 1e       	adc	r15, r29
    232a:	ce 01       	movw	r24, r28
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	b7 01       	movw	r22, r14
    2330:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    2334:	8e 01       	movw	r16, r28
    2336:	0f 5e       	subi	r16, 0xEF	; 239
    2338:	1f 4f       	sbci	r17, 0xFF	; 255
    233a:	ce 01       	movw	r24, r28
    233c:	05 96       	adiw	r24, 0x05	; 5
    233e:	b8 01       	movw	r22, r16
    2340:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	82 30       	cpi	r24, 0x02	; 2
    2348:	40 f0       	brcs	.+16     	; 0x235a <__gesf2+0x56>
    234a:	89 89       	ldd	r24, Y+17	; 0x11
    234c:	82 30       	cpi	r24, 0x02	; 2
    234e:	28 f0       	brcs	.+10     	; 0x235a <__gesf2+0x56>
    2350:	c7 01       	movw	r24, r14
    2352:	b8 01       	movw	r22, r16
    2354:	0e 94 ca 14 	call	0x2994	; 0x2994 <__fpcmp_parts_f>
    2358:	01 c0       	rjmp	.+2      	; 0x235c <__gesf2+0x58>
    235a:	8f ef       	ldi	r24, 0xFF	; 255
    235c:	68 96       	adiw	r28, 0x18	; 24
    235e:	e6 e0       	ldi	r30, 0x06	; 6
    2360:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__epilogue_restores__+0x18>

00002364 <__ltsf2>:
    2364:	a8 e1       	ldi	r26, 0x18	; 24
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e8 eb       	ldi	r30, 0xB8	; 184
    236a:	f1 e1       	ldi	r31, 0x11	; 17
    236c:	0c 94 30 2d 	jmp	0x5a60	; 0x5a60 <__prologue_saves__+0x18>
    2370:	69 83       	std	Y+1, r22	; 0x01
    2372:	7a 83       	std	Y+2, r23	; 0x02
    2374:	8b 83       	std	Y+3, r24	; 0x03
    2376:	9c 83       	std	Y+4, r25	; 0x04
    2378:	2d 83       	std	Y+5, r18	; 0x05
    237a:	3e 83       	std	Y+6, r19	; 0x06
    237c:	4f 83       	std	Y+7, r20	; 0x07
    237e:	58 87       	std	Y+8, r21	; 0x08
    2380:	89 e0       	ldi	r24, 0x09	; 9
    2382:	e8 2e       	mov	r14, r24
    2384:	f1 2c       	mov	r15, r1
    2386:	ec 0e       	add	r14, r28
    2388:	fd 1e       	adc	r15, r29
    238a:	ce 01       	movw	r24, r28
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	b7 01       	movw	r22, r14
    2390:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    2394:	8e 01       	movw	r16, r28
    2396:	0f 5e       	subi	r16, 0xEF	; 239
    2398:	1f 4f       	sbci	r17, 0xFF	; 255
    239a:	ce 01       	movw	r24, r28
    239c:	05 96       	adiw	r24, 0x05	; 5
    239e:	b8 01       	movw	r22, r16
    23a0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	82 30       	cpi	r24, 0x02	; 2
    23a8:	40 f0       	brcs	.+16     	; 0x23ba <__ltsf2+0x56>
    23aa:	89 89       	ldd	r24, Y+17	; 0x11
    23ac:	82 30       	cpi	r24, 0x02	; 2
    23ae:	28 f0       	brcs	.+10     	; 0x23ba <__ltsf2+0x56>
    23b0:	c7 01       	movw	r24, r14
    23b2:	b8 01       	movw	r22, r16
    23b4:	0e 94 ca 14 	call	0x2994	; 0x2994 <__fpcmp_parts_f>
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <__ltsf2+0x58>
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	68 96       	adiw	r28, 0x18	; 24
    23be:	e6 e0       	ldi	r30, 0x06	; 6
    23c0:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <__epilogue_restores__+0x18>

000023c4 <__fixsfsi>:
    23c4:	ac e0       	ldi	r26, 0x0C	; 12
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e8 ee       	ldi	r30, 0xE8	; 232
    23ca:	f1 e1       	ldi	r31, 0x11	; 17
    23cc:	0c 94 34 2d 	jmp	0x5a68	; 0x5a68 <__prologue_saves__+0x20>
    23d0:	69 83       	std	Y+1, r22	; 0x01
    23d2:	7a 83       	std	Y+2, r23	; 0x02
    23d4:	8b 83       	std	Y+3, r24	; 0x03
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	be 01       	movw	r22, r28
    23de:	6b 5f       	subi	r22, 0xFB	; 251
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	82 30       	cpi	r24, 0x02	; 2
    23ea:	61 f1       	breq	.+88     	; 0x2444 <__fixsfsi+0x80>
    23ec:	82 30       	cpi	r24, 0x02	; 2
    23ee:	50 f1       	brcs	.+84     	; 0x2444 <__fixsfsi+0x80>
    23f0:	84 30       	cpi	r24, 0x04	; 4
    23f2:	21 f4       	brne	.+8      	; 0x23fc <__fixsfsi+0x38>
    23f4:	8e 81       	ldd	r24, Y+6	; 0x06
    23f6:	88 23       	and	r24, r24
    23f8:	51 f1       	breq	.+84     	; 0x244e <__fixsfsi+0x8a>
    23fa:	2e c0       	rjmp	.+92     	; 0x2458 <__fixsfsi+0x94>
    23fc:	2f 81       	ldd	r18, Y+7	; 0x07
    23fe:	38 85       	ldd	r19, Y+8	; 0x08
    2400:	37 fd       	sbrc	r19, 7
    2402:	20 c0       	rjmp	.+64     	; 0x2444 <__fixsfsi+0x80>
    2404:	6e 81       	ldd	r22, Y+6	; 0x06
    2406:	2f 31       	cpi	r18, 0x1F	; 31
    2408:	31 05       	cpc	r19, r1
    240a:	1c f0       	brlt	.+6      	; 0x2412 <__fixsfsi+0x4e>
    240c:	66 23       	and	r22, r22
    240e:	f9 f0       	breq	.+62     	; 0x244e <__fixsfsi+0x8a>
    2410:	23 c0       	rjmp	.+70     	; 0x2458 <__fixsfsi+0x94>
    2412:	8e e1       	ldi	r24, 0x1E	; 30
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	82 1b       	sub	r24, r18
    2418:	93 0b       	sbc	r25, r19
    241a:	29 85       	ldd	r18, Y+9	; 0x09
    241c:	3a 85       	ldd	r19, Y+10	; 0x0a
    241e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2420:	5c 85       	ldd	r21, Y+12	; 0x0c
    2422:	04 c0       	rjmp	.+8      	; 0x242c <__fixsfsi+0x68>
    2424:	56 95       	lsr	r21
    2426:	47 95       	ror	r20
    2428:	37 95       	ror	r19
    242a:	27 95       	ror	r18
    242c:	8a 95       	dec	r24
    242e:	d2 f7       	brpl	.-12     	; 0x2424 <__fixsfsi+0x60>
    2430:	66 23       	and	r22, r22
    2432:	b1 f0       	breq	.+44     	; 0x2460 <__fixsfsi+0x9c>
    2434:	50 95       	com	r21
    2436:	40 95       	com	r20
    2438:	30 95       	com	r19
    243a:	21 95       	neg	r18
    243c:	3f 4f       	sbci	r19, 0xFF	; 255
    243e:	4f 4f       	sbci	r20, 0xFF	; 255
    2440:	5f 4f       	sbci	r21, 0xFF	; 255
    2442:	0e c0       	rjmp	.+28     	; 0x2460 <__fixsfsi+0x9c>
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	50 e0       	ldi	r21, 0x00	; 0
    244c:	09 c0       	rjmp	.+18     	; 0x2460 <__fixsfsi+0x9c>
    244e:	2f ef       	ldi	r18, 0xFF	; 255
    2450:	3f ef       	ldi	r19, 0xFF	; 255
    2452:	4f ef       	ldi	r20, 0xFF	; 255
    2454:	5f e7       	ldi	r21, 0x7F	; 127
    2456:	04 c0       	rjmp	.+8      	; 0x2460 <__fixsfsi+0x9c>
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	50 e8       	ldi	r21, 0x80	; 128
    2460:	b9 01       	movw	r22, r18
    2462:	ca 01       	movw	r24, r20
    2464:	2c 96       	adiw	r28, 0x0c	; 12
    2466:	e2 e0       	ldi	r30, 0x02	; 2
    2468:	0c 94 50 2d 	jmp	0x5aa0	; 0x5aa0 <__epilogue_restores__+0x20>

0000246c <__floatunsisf>:
    246c:	a8 e0       	ldi	r26, 0x08	; 8
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	ec e3       	ldi	r30, 0x3C	; 60
    2472:	f2 e1       	ldi	r31, 0x12	; 18
    2474:	0c 94 2c 2d 	jmp	0x5a58	; 0x5a58 <__prologue_saves__+0x10>
    2478:	7b 01       	movw	r14, r22
    247a:	8c 01       	movw	r16, r24
    247c:	61 15       	cp	r22, r1
    247e:	71 05       	cpc	r23, r1
    2480:	81 05       	cpc	r24, r1
    2482:	91 05       	cpc	r25, r1
    2484:	19 f4       	brne	.+6      	; 0x248c <__floatunsisf+0x20>
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	60 c0       	rjmp	.+192    	; 0x254c <__floatunsisf+0xe0>
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	8e e1       	ldi	r24, 0x1E	; 30
    2492:	c8 2e       	mov	r12, r24
    2494:	d1 2c       	mov	r13, r1
    2496:	dc 82       	std	Y+4, r13	; 0x04
    2498:	cb 82       	std	Y+3, r12	; 0x03
    249a:	ed 82       	std	Y+5, r14	; 0x05
    249c:	fe 82       	std	Y+6, r15	; 0x06
    249e:	0f 83       	std	Y+7, r16	; 0x07
    24a0:	18 87       	std	Y+8, r17	; 0x08
    24a2:	c8 01       	movw	r24, r16
    24a4:	b7 01       	movw	r22, r14
    24a6:	0e 94 2e 13 	call	0x265c	; 0x265c <__clzsi2>
    24aa:	fc 01       	movw	r30, r24
    24ac:	31 97       	sbiw	r30, 0x01	; 1
    24ae:	f7 ff       	sbrs	r31, 7
    24b0:	3b c0       	rjmp	.+118    	; 0x2528 <__floatunsisf+0xbc>
    24b2:	22 27       	eor	r18, r18
    24b4:	33 27       	eor	r19, r19
    24b6:	2e 1b       	sub	r18, r30
    24b8:	3f 0b       	sbc	r19, r31
    24ba:	57 01       	movw	r10, r14
    24bc:	68 01       	movw	r12, r16
    24be:	02 2e       	mov	r0, r18
    24c0:	04 c0       	rjmp	.+8      	; 0x24ca <__floatunsisf+0x5e>
    24c2:	d6 94       	lsr	r13
    24c4:	c7 94       	ror	r12
    24c6:	b7 94       	ror	r11
    24c8:	a7 94       	ror	r10
    24ca:	0a 94       	dec	r0
    24cc:	d2 f7       	brpl	.-12     	; 0x24c2 <__floatunsisf+0x56>
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	a0 e0       	ldi	r26, 0x00	; 0
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	04 c0       	rjmp	.+8      	; 0x24e8 <__floatunsisf+0x7c>
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	aa 1f       	adc	r26, r26
    24e6:	bb 1f       	adc	r27, r27
    24e8:	2a 95       	dec	r18
    24ea:	d2 f7       	brpl	.-12     	; 0x24e0 <__floatunsisf+0x74>
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	a1 09       	sbc	r26, r1
    24f0:	b1 09       	sbc	r27, r1
    24f2:	8e 21       	and	r24, r14
    24f4:	9f 21       	and	r25, r15
    24f6:	a0 23       	and	r26, r16
    24f8:	b1 23       	and	r27, r17
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	a1 05       	cpc	r26, r1
    24fe:	b1 05       	cpc	r27, r1
    2500:	21 f0       	breq	.+8      	; 0x250a <__floatunsisf+0x9e>
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	70 e0       	ldi	r23, 0x00	; 0
    250a:	4a 29       	or	r20, r10
    250c:	5b 29       	or	r21, r11
    250e:	6c 29       	or	r22, r12
    2510:	7d 29       	or	r23, r13
    2512:	4d 83       	std	Y+5, r20	; 0x05
    2514:	5e 83       	std	Y+6, r21	; 0x06
    2516:	6f 83       	std	Y+7, r22	; 0x07
    2518:	78 87       	std	Y+8, r23	; 0x08
    251a:	8e e1       	ldi	r24, 0x1E	; 30
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	8e 1b       	sub	r24, r30
    2520:	9f 0b       	sbc	r25, r31
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	12 c0       	rjmp	.+36     	; 0x254c <__floatunsisf+0xe0>
    2528:	30 97       	sbiw	r30, 0x00	; 0
    252a:	81 f0       	breq	.+32     	; 0x254c <__floatunsisf+0xe0>
    252c:	0e 2e       	mov	r0, r30
    252e:	04 c0       	rjmp	.+8      	; 0x2538 <__floatunsisf+0xcc>
    2530:	ee 0c       	add	r14, r14
    2532:	ff 1c       	adc	r15, r15
    2534:	00 1f       	adc	r16, r16
    2536:	11 1f       	adc	r17, r17
    2538:	0a 94       	dec	r0
    253a:	d2 f7       	brpl	.-12     	; 0x2530 <__floatunsisf+0xc4>
    253c:	ed 82       	std	Y+5, r14	; 0x05
    253e:	fe 82       	std	Y+6, r15	; 0x06
    2540:	0f 83       	std	Y+7, r16	; 0x07
    2542:	18 87       	std	Y+8, r17	; 0x08
    2544:	ce 1a       	sub	r12, r30
    2546:	df 0a       	sbc	r13, r31
    2548:	dc 82       	std	Y+4, r13	; 0x04
    254a:	cb 82       	std	Y+3, r12	; 0x03
    254c:	1a 82       	std	Y+2, r1	; 0x02
    254e:	ce 01       	movw	r24, r28
    2550:	01 96       	adiw	r24, 0x01	; 1
    2552:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    2556:	28 96       	adiw	r28, 0x08	; 8
    2558:	ea e0       	ldi	r30, 0x0A	; 10
    255a:	0c 94 48 2d 	jmp	0x5a90	; 0x5a90 <__epilogue_restores__+0x10>

0000255e <__ashldi3>:
    255e:	ef 92       	push	r14
    2560:	ff 92       	push	r15
    2562:	0f 93       	push	r16
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	60 97       	sbiw	r28, 0x10	; 16
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	a8 2f       	mov	r26, r24
    257a:	00 23       	and	r16, r16
    257c:	09 f4       	brne	.+2      	; 0x2580 <__ashldi3+0x22>
    257e:	61 c0       	rjmp	.+194    	; 0x2642 <__ashldi3+0xe4>
    2580:	7e 01       	movw	r14, r28
    2582:	08 94       	sec
    2584:	e1 1c       	adc	r14, r1
    2586:	f1 1c       	adc	r15, r1
    2588:	88 e0       	ldi	r24, 0x08	; 8
    258a:	f7 01       	movw	r30, r14
    258c:	11 92       	st	Z+, r1
    258e:	8a 95       	dec	r24
    2590:	e9 f7       	brne	.-6      	; 0x258c <__ashldi3+0x2e>
    2592:	29 83       	std	Y+1, r18	; 0x01
    2594:	3a 83       	std	Y+2, r19	; 0x02
    2596:	4b 83       	std	Y+3, r20	; 0x03
    2598:	5c 83       	std	Y+4, r21	; 0x04
    259a:	6d 83       	std	Y+5, r22	; 0x05
    259c:	7e 83       	std	Y+6, r23	; 0x06
    259e:	af 83       	std	Y+7, r26	; 0x07
    25a0:	98 87       	std	Y+8, r25	; 0x08
    25a2:	80 e2       	ldi	r24, 0x20	; 32
    25a4:	80 1b       	sub	r24, r16
    25a6:	e8 2f       	mov	r30, r24
    25a8:	ff 27       	eor	r31, r31
    25aa:	e7 fd       	sbrc	r30, 7
    25ac:	f0 95       	com	r31
    25ae:	49 81       	ldd	r20, Y+1	; 0x01
    25b0:	5a 81       	ldd	r21, Y+2	; 0x02
    25b2:	6b 81       	ldd	r22, Y+3	; 0x03
    25b4:	7c 81       	ldd	r23, Y+4	; 0x04
    25b6:	18 16       	cp	r1, r24
    25b8:	84 f0       	brlt	.+32     	; 0x25da <__ashldi3+0x7c>
    25ba:	19 86       	std	Y+9, r1	; 0x09
    25bc:	1a 86       	std	Y+10, r1	; 0x0a
    25be:	1b 86       	std	Y+11, r1	; 0x0b
    25c0:	1c 86       	std	Y+12, r1	; 0x0c
    25c2:	88 27       	eor	r24, r24
    25c4:	99 27       	eor	r25, r25
    25c6:	8e 1b       	sub	r24, r30
    25c8:	9f 0b       	sbc	r25, r31
    25ca:	04 c0       	rjmp	.+8      	; 0x25d4 <__ashldi3+0x76>
    25cc:	44 0f       	add	r20, r20
    25ce:	55 1f       	adc	r21, r21
    25d0:	66 1f       	adc	r22, r22
    25d2:	77 1f       	adc	r23, r23
    25d4:	8a 95       	dec	r24
    25d6:	d2 f7       	brpl	.-12     	; 0x25cc <__ashldi3+0x6e>
    25d8:	28 c0       	rjmp	.+80     	; 0x262a <__ashldi3+0xcc>
    25da:	20 2f       	mov	r18, r16
    25dc:	33 27       	eor	r19, r19
    25de:	27 fd       	sbrc	r18, 7
    25e0:	30 95       	com	r19
    25e2:	db 01       	movw	r26, r22
    25e4:	ca 01       	movw	r24, r20
    25e6:	02 2e       	mov	r0, r18
    25e8:	04 c0       	rjmp	.+8      	; 0x25f2 <__ashldi3+0x94>
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	aa 1f       	adc	r26, r26
    25f0:	bb 1f       	adc	r27, r27
    25f2:	0a 94       	dec	r0
    25f4:	d2 f7       	brpl	.-12     	; 0x25ea <__ashldi3+0x8c>
    25f6:	89 87       	std	Y+9, r24	; 0x09
    25f8:	9a 87       	std	Y+10, r25	; 0x0a
    25fa:	ab 87       	std	Y+11, r26	; 0x0b
    25fc:	bc 87       	std	Y+12, r27	; 0x0c
    25fe:	04 c0       	rjmp	.+8      	; 0x2608 <__ashldi3+0xaa>
    2600:	76 95       	lsr	r23
    2602:	67 95       	ror	r22
    2604:	57 95       	ror	r21
    2606:	47 95       	ror	r20
    2608:	ea 95       	dec	r30
    260a:	d2 f7       	brpl	.-12     	; 0x2600 <__ashldi3+0xa2>
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	af 81       	ldd	r26, Y+7	; 0x07
    2612:	b8 85       	ldd	r27, Y+8	; 0x08
    2614:	04 c0       	rjmp	.+8      	; 0x261e <__ashldi3+0xc0>
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	aa 1f       	adc	r26, r26
    261c:	bb 1f       	adc	r27, r27
    261e:	2a 95       	dec	r18
    2620:	d2 f7       	brpl	.-12     	; 0x2616 <__ashldi3+0xb8>
    2622:	48 2b       	or	r20, r24
    2624:	59 2b       	or	r21, r25
    2626:	6a 2b       	or	r22, r26
    2628:	7b 2b       	or	r23, r27
    262a:	4d 87       	std	Y+13, r20	; 0x0d
    262c:	5e 87       	std	Y+14, r21	; 0x0e
    262e:	6f 87       	std	Y+15, r22	; 0x0f
    2630:	78 8b       	std	Y+16, r23	; 0x10
    2632:	29 85       	ldd	r18, Y+9	; 0x09
    2634:	3a 85       	ldd	r19, Y+10	; 0x0a
    2636:	4b 85       	ldd	r20, Y+11	; 0x0b
    2638:	5c 85       	ldd	r21, Y+12	; 0x0c
    263a:	6d 85       	ldd	r22, Y+13	; 0x0d
    263c:	7e 85       	ldd	r23, Y+14	; 0x0e
    263e:	af 85       	ldd	r26, Y+15	; 0x0f
    2640:	98 89       	ldd	r25, Y+16	; 0x10
    2642:	8a 2f       	mov	r24, r26
    2644:	60 96       	adiw	r28, 0x10	; 16
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	08 95       	ret

0000265c <__clzsi2>:
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	7b 01       	movw	r14, r22
    2666:	8c 01       	movw	r16, r24
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	e8 16       	cp	r14, r24
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	f8 06       	cpc	r15, r24
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	08 07       	cpc	r16, r24
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	18 07       	cpc	r17, r24
    2678:	88 f4       	brcc	.+34     	; 0x269c <__clzsi2+0x40>
    267a:	8f ef       	ldi	r24, 0xFF	; 255
    267c:	e8 16       	cp	r14, r24
    267e:	f1 04       	cpc	r15, r1
    2680:	01 05       	cpc	r16, r1
    2682:	11 05       	cpc	r17, r1
    2684:	31 f0       	breq	.+12     	; 0x2692 <__clzsi2+0x36>
    2686:	28 f0       	brcs	.+10     	; 0x2692 <__clzsi2+0x36>
    2688:	88 e0       	ldi	r24, 0x08	; 8
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a0 e0       	ldi	r26, 0x00	; 0
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	17 c0       	rjmp	.+46     	; 0x26c0 <__clzsi2+0x64>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	12 c0       	rjmp	.+36     	; 0x26c0 <__clzsi2+0x64>
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	e8 16       	cp	r14, r24
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	f8 06       	cpc	r15, r24
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	08 07       	cpc	r16, r24
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	18 07       	cpc	r17, r24
    26ac:	28 f0       	brcs	.+10     	; 0x26b8 <__clzsi2+0x5c>
    26ae:	88 e1       	ldi	r24, 0x18	; 24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <__clzsi2+0x64>
    26b8:	80 e1       	ldi	r24, 0x10	; 16
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e0       	ldi	r26, 0x00	; 0
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	20 e2       	ldi	r18, 0x20	; 32
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	28 1b       	sub	r18, r24
    26ca:	39 0b       	sbc	r19, r25
    26cc:	4a 0b       	sbc	r20, r26
    26ce:	5b 0b       	sbc	r21, r27
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <__clzsi2+0x7e>
    26d2:	16 95       	lsr	r17
    26d4:	07 95       	ror	r16
    26d6:	f7 94       	ror	r15
    26d8:	e7 94       	ror	r14
    26da:	8a 95       	dec	r24
    26dc:	d2 f7       	brpl	.-12     	; 0x26d2 <__clzsi2+0x76>
    26de:	f7 01       	movw	r30, r14
    26e0:	e8 59       	subi	r30, 0x98	; 152
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	28 1b       	sub	r18, r24
    26e8:	31 09       	sbc	r19, r1
    26ea:	41 09       	sbc	r20, r1
    26ec:	51 09       	sbc	r21, r1
    26ee:	c9 01       	movw	r24, r18
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	08 95       	ret

000026fa <__pack_f>:
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	fc 01       	movw	r30, r24
    2706:	e4 80       	ldd	r14, Z+4	; 0x04
    2708:	f5 80       	ldd	r15, Z+5	; 0x05
    270a:	06 81       	ldd	r16, Z+6	; 0x06
    270c:	17 81       	ldd	r17, Z+7	; 0x07
    270e:	d1 80       	ldd	r13, Z+1	; 0x01
    2710:	80 81       	ld	r24, Z
    2712:	82 30       	cpi	r24, 0x02	; 2
    2714:	48 f4       	brcc	.+18     	; 0x2728 <__pack_f+0x2e>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	a0 e1       	ldi	r26, 0x10	; 16
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e8 2a       	or	r14, r24
    2720:	f9 2a       	or	r15, r25
    2722:	0a 2b       	or	r16, r26
    2724:	1b 2b       	or	r17, r27
    2726:	a5 c0       	rjmp	.+330    	; 0x2872 <__pack_f+0x178>
    2728:	84 30       	cpi	r24, 0x04	; 4
    272a:	09 f4       	brne	.+2      	; 0x272e <__pack_f+0x34>
    272c:	9f c0       	rjmp	.+318    	; 0x286c <__pack_f+0x172>
    272e:	82 30       	cpi	r24, 0x02	; 2
    2730:	21 f4       	brne	.+8      	; 0x273a <__pack_f+0x40>
    2732:	ee 24       	eor	r14, r14
    2734:	ff 24       	eor	r15, r15
    2736:	87 01       	movw	r16, r14
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <__pack_f+0x4a>
    273a:	e1 14       	cp	r14, r1
    273c:	f1 04       	cpc	r15, r1
    273e:	01 05       	cpc	r16, r1
    2740:	11 05       	cpc	r17, r1
    2742:	19 f4       	brne	.+6      	; 0x274a <__pack_f+0x50>
    2744:	e0 e0       	ldi	r30, 0x00	; 0
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	96 c0       	rjmp	.+300    	; 0x2876 <__pack_f+0x17c>
    274a:	62 81       	ldd	r22, Z+2	; 0x02
    274c:	73 81       	ldd	r23, Z+3	; 0x03
    274e:	9f ef       	ldi	r25, 0xFF	; 255
    2750:	62 38       	cpi	r22, 0x82	; 130
    2752:	79 07       	cpc	r23, r25
    2754:	0c f0       	brlt	.+2      	; 0x2758 <__pack_f+0x5e>
    2756:	5b c0       	rjmp	.+182    	; 0x280e <__pack_f+0x114>
    2758:	22 e8       	ldi	r18, 0x82	; 130
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	26 1b       	sub	r18, r22
    275e:	37 0b       	sbc	r19, r23
    2760:	2a 31       	cpi	r18, 0x1A	; 26
    2762:	31 05       	cpc	r19, r1
    2764:	2c f0       	brlt	.+10     	; 0x2770 <__pack_f+0x76>
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	2a c0       	rjmp	.+84     	; 0x27c4 <__pack_f+0xca>
    2770:	b8 01       	movw	r22, r16
    2772:	a7 01       	movw	r20, r14
    2774:	02 2e       	mov	r0, r18
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <__pack_f+0x86>
    2778:	76 95       	lsr	r23
    277a:	67 95       	ror	r22
    277c:	57 95       	ror	r21
    277e:	47 95       	ror	r20
    2780:	0a 94       	dec	r0
    2782:	d2 f7       	brpl	.-12     	; 0x2778 <__pack_f+0x7e>
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	a0 e0       	ldi	r26, 0x00	; 0
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	04 c0       	rjmp	.+8      	; 0x2796 <__pack_f+0x9c>
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	aa 1f       	adc	r26, r26
    2794:	bb 1f       	adc	r27, r27
    2796:	2a 95       	dec	r18
    2798:	d2 f7       	brpl	.-12     	; 0x278e <__pack_f+0x94>
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	a1 09       	sbc	r26, r1
    279e:	b1 09       	sbc	r27, r1
    27a0:	8e 21       	and	r24, r14
    27a2:	9f 21       	and	r25, r15
    27a4:	a0 23       	and	r26, r16
    27a6:	b1 23       	and	r27, r17
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	a1 05       	cpc	r26, r1
    27ac:	b1 05       	cpc	r27, r1
    27ae:	21 f0       	breq	.+8      	; 0x27b8 <__pack_f+0xbe>
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	9a 01       	movw	r18, r20
    27ba:	ab 01       	movw	r20, r22
    27bc:	28 2b       	or	r18, r24
    27be:	39 2b       	or	r19, r25
    27c0:	4a 2b       	or	r20, r26
    27c2:	5b 2b       	or	r21, r27
    27c4:	da 01       	movw	r26, r20
    27c6:	c9 01       	movw	r24, r18
    27c8:	8f 77       	andi	r24, 0x7F	; 127
    27ca:	90 70       	andi	r25, 0x00	; 0
    27cc:	a0 70       	andi	r26, 0x00	; 0
    27ce:	b0 70       	andi	r27, 0x00	; 0
    27d0:	80 34       	cpi	r24, 0x40	; 64
    27d2:	91 05       	cpc	r25, r1
    27d4:	a1 05       	cpc	r26, r1
    27d6:	b1 05       	cpc	r27, r1
    27d8:	39 f4       	brne	.+14     	; 0x27e8 <__pack_f+0xee>
    27da:	27 ff       	sbrs	r18, 7
    27dc:	09 c0       	rjmp	.+18     	; 0x27f0 <__pack_f+0xf6>
    27de:	20 5c       	subi	r18, 0xC0	; 192
    27e0:	3f 4f       	sbci	r19, 0xFF	; 255
    27e2:	4f 4f       	sbci	r20, 0xFF	; 255
    27e4:	5f 4f       	sbci	r21, 0xFF	; 255
    27e6:	04 c0       	rjmp	.+8      	; 0x27f0 <__pack_f+0xf6>
    27e8:	21 5c       	subi	r18, 0xC1	; 193
    27ea:	3f 4f       	sbci	r19, 0xFF	; 255
    27ec:	4f 4f       	sbci	r20, 0xFF	; 255
    27ee:	5f 4f       	sbci	r21, 0xFF	; 255
    27f0:	e0 e0       	ldi	r30, 0x00	; 0
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	20 30       	cpi	r18, 0x00	; 0
    27f6:	a0 e0       	ldi	r26, 0x00	; 0
    27f8:	3a 07       	cpc	r19, r26
    27fa:	a0 e0       	ldi	r26, 0x00	; 0
    27fc:	4a 07       	cpc	r20, r26
    27fe:	a0 e4       	ldi	r26, 0x40	; 64
    2800:	5a 07       	cpc	r21, r26
    2802:	10 f0       	brcs	.+4      	; 0x2808 <__pack_f+0x10e>
    2804:	e1 e0       	ldi	r30, 0x01	; 1
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	79 01       	movw	r14, r18
    280a:	8a 01       	movw	r16, r20
    280c:	27 c0       	rjmp	.+78     	; 0x285c <__pack_f+0x162>
    280e:	60 38       	cpi	r22, 0x80	; 128
    2810:	71 05       	cpc	r23, r1
    2812:	64 f5       	brge	.+88     	; 0x286c <__pack_f+0x172>
    2814:	fb 01       	movw	r30, r22
    2816:	e1 58       	subi	r30, 0x81	; 129
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	d8 01       	movw	r26, r16
    281c:	c7 01       	movw	r24, r14
    281e:	8f 77       	andi	r24, 0x7F	; 127
    2820:	90 70       	andi	r25, 0x00	; 0
    2822:	a0 70       	andi	r26, 0x00	; 0
    2824:	b0 70       	andi	r27, 0x00	; 0
    2826:	80 34       	cpi	r24, 0x40	; 64
    2828:	91 05       	cpc	r25, r1
    282a:	a1 05       	cpc	r26, r1
    282c:	b1 05       	cpc	r27, r1
    282e:	39 f4       	brne	.+14     	; 0x283e <__pack_f+0x144>
    2830:	e7 fe       	sbrs	r14, 7
    2832:	0d c0       	rjmp	.+26     	; 0x284e <__pack_f+0x154>
    2834:	80 e4       	ldi	r24, 0x40	; 64
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e0       	ldi	r26, 0x00	; 0
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <__pack_f+0x14c>
    283e:	8f e3       	ldi	r24, 0x3F	; 63
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e0       	ldi	r26, 0x00	; 0
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e8 0e       	add	r14, r24
    2848:	f9 1e       	adc	r15, r25
    284a:	0a 1f       	adc	r16, r26
    284c:	1b 1f       	adc	r17, r27
    284e:	17 ff       	sbrs	r17, 7
    2850:	05 c0       	rjmp	.+10     	; 0x285c <__pack_f+0x162>
    2852:	16 95       	lsr	r17
    2854:	07 95       	ror	r16
    2856:	f7 94       	ror	r15
    2858:	e7 94       	ror	r14
    285a:	31 96       	adiw	r30, 0x01	; 1
    285c:	87 e0       	ldi	r24, 0x07	; 7
    285e:	16 95       	lsr	r17
    2860:	07 95       	ror	r16
    2862:	f7 94       	ror	r15
    2864:	e7 94       	ror	r14
    2866:	8a 95       	dec	r24
    2868:	d1 f7       	brne	.-12     	; 0x285e <__pack_f+0x164>
    286a:	05 c0       	rjmp	.+10     	; 0x2876 <__pack_f+0x17c>
    286c:	ee 24       	eor	r14, r14
    286e:	ff 24       	eor	r15, r15
    2870:	87 01       	movw	r16, r14
    2872:	ef ef       	ldi	r30, 0xFF	; 255
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	6e 2f       	mov	r22, r30
    2878:	67 95       	ror	r22
    287a:	66 27       	eor	r22, r22
    287c:	67 95       	ror	r22
    287e:	90 2f       	mov	r25, r16
    2880:	9f 77       	andi	r25, 0x7F	; 127
    2882:	d7 94       	ror	r13
    2884:	dd 24       	eor	r13, r13
    2886:	d7 94       	ror	r13
    2888:	8e 2f       	mov	r24, r30
    288a:	86 95       	lsr	r24
    288c:	49 2f       	mov	r20, r25
    288e:	46 2b       	or	r20, r22
    2890:	58 2f       	mov	r21, r24
    2892:	5d 29       	or	r21, r13
    2894:	b7 01       	movw	r22, r14
    2896:	ca 01       	movw	r24, r20
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	ff 90       	pop	r15
    289e:	ef 90       	pop	r14
    28a0:	df 90       	pop	r13
    28a2:	08 95       	ret

000028a4 <__unpack_f>:
    28a4:	fc 01       	movw	r30, r24
    28a6:	db 01       	movw	r26, r22
    28a8:	40 81       	ld	r20, Z
    28aa:	51 81       	ldd	r21, Z+1	; 0x01
    28ac:	22 81       	ldd	r18, Z+2	; 0x02
    28ae:	62 2f       	mov	r22, r18
    28b0:	6f 77       	andi	r22, 0x7F	; 127
    28b2:	70 e0       	ldi	r23, 0x00	; 0
    28b4:	22 1f       	adc	r18, r18
    28b6:	22 27       	eor	r18, r18
    28b8:	22 1f       	adc	r18, r18
    28ba:	93 81       	ldd	r25, Z+3	; 0x03
    28bc:	89 2f       	mov	r24, r25
    28be:	88 0f       	add	r24, r24
    28c0:	82 2b       	or	r24, r18
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	99 1f       	adc	r25, r25
    28c8:	99 27       	eor	r25, r25
    28ca:	99 1f       	adc	r25, r25
    28cc:	11 96       	adiw	r26, 0x01	; 1
    28ce:	9c 93       	st	X, r25
    28d0:	11 97       	sbiw	r26, 0x01	; 1
    28d2:	21 15       	cp	r18, r1
    28d4:	31 05       	cpc	r19, r1
    28d6:	a9 f5       	brne	.+106    	; 0x2942 <__unpack_f+0x9e>
    28d8:	41 15       	cp	r20, r1
    28da:	51 05       	cpc	r21, r1
    28dc:	61 05       	cpc	r22, r1
    28de:	71 05       	cpc	r23, r1
    28e0:	11 f4       	brne	.+4      	; 0x28e6 <__unpack_f+0x42>
    28e2:	82 e0       	ldi	r24, 0x02	; 2
    28e4:	37 c0       	rjmp	.+110    	; 0x2954 <__unpack_f+0xb0>
    28e6:	82 e8       	ldi	r24, 0x82	; 130
    28e8:	9f ef       	ldi	r25, 0xFF	; 255
    28ea:	13 96       	adiw	r26, 0x03	; 3
    28ec:	9c 93       	st	X, r25
    28ee:	8e 93       	st	-X, r24
    28f0:	12 97       	sbiw	r26, 0x02	; 2
    28f2:	9a 01       	movw	r18, r20
    28f4:	ab 01       	movw	r20, r22
    28f6:	67 e0       	ldi	r22, 0x07	; 7
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	44 1f       	adc	r20, r20
    28fe:	55 1f       	adc	r21, r21
    2900:	6a 95       	dec	r22
    2902:	d1 f7       	brne	.-12     	; 0x28f8 <__unpack_f+0x54>
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	8c 93       	st	X, r24
    2908:	0d c0       	rjmp	.+26     	; 0x2924 <__unpack_f+0x80>
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	44 1f       	adc	r20, r20
    2910:	55 1f       	adc	r21, r21
    2912:	12 96       	adiw	r26, 0x02	; 2
    2914:	8d 91       	ld	r24, X+
    2916:	9c 91       	ld	r25, X
    2918:	13 97       	sbiw	r26, 0x03	; 3
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	13 96       	adiw	r26, 0x03	; 3
    291e:	9c 93       	st	X, r25
    2920:	8e 93       	st	-X, r24
    2922:	12 97       	sbiw	r26, 0x02	; 2
    2924:	20 30       	cpi	r18, 0x00	; 0
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	38 07       	cpc	r19, r24
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	48 07       	cpc	r20, r24
    292e:	80 e4       	ldi	r24, 0x40	; 64
    2930:	58 07       	cpc	r21, r24
    2932:	58 f3       	brcs	.-42     	; 0x290a <__unpack_f+0x66>
    2934:	14 96       	adiw	r26, 0x04	; 4
    2936:	2d 93       	st	X+, r18
    2938:	3d 93       	st	X+, r19
    293a:	4d 93       	st	X+, r20
    293c:	5c 93       	st	X, r21
    293e:	17 97       	sbiw	r26, 0x07	; 7
    2940:	08 95       	ret
    2942:	2f 3f       	cpi	r18, 0xFF	; 255
    2944:	31 05       	cpc	r19, r1
    2946:	79 f4       	brne	.+30     	; 0x2966 <__unpack_f+0xc2>
    2948:	41 15       	cp	r20, r1
    294a:	51 05       	cpc	r21, r1
    294c:	61 05       	cpc	r22, r1
    294e:	71 05       	cpc	r23, r1
    2950:	19 f4       	brne	.+6      	; 0x2958 <__unpack_f+0xb4>
    2952:	84 e0       	ldi	r24, 0x04	; 4
    2954:	8c 93       	st	X, r24
    2956:	08 95       	ret
    2958:	64 ff       	sbrs	r22, 4
    295a:	03 c0       	rjmp	.+6      	; 0x2962 <__unpack_f+0xbe>
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	8c 93       	st	X, r24
    2960:	12 c0       	rjmp	.+36     	; 0x2986 <__unpack_f+0xe2>
    2962:	1c 92       	st	X, r1
    2964:	10 c0       	rjmp	.+32     	; 0x2986 <__unpack_f+0xe2>
    2966:	2f 57       	subi	r18, 0x7F	; 127
    2968:	30 40       	sbci	r19, 0x00	; 0
    296a:	13 96       	adiw	r26, 0x03	; 3
    296c:	3c 93       	st	X, r19
    296e:	2e 93       	st	-X, r18
    2970:	12 97       	sbiw	r26, 0x02	; 2
    2972:	83 e0       	ldi	r24, 0x03	; 3
    2974:	8c 93       	st	X, r24
    2976:	87 e0       	ldi	r24, 0x07	; 7
    2978:	44 0f       	add	r20, r20
    297a:	55 1f       	adc	r21, r21
    297c:	66 1f       	adc	r22, r22
    297e:	77 1f       	adc	r23, r23
    2980:	8a 95       	dec	r24
    2982:	d1 f7       	brne	.-12     	; 0x2978 <__unpack_f+0xd4>
    2984:	70 64       	ori	r23, 0x40	; 64
    2986:	14 96       	adiw	r26, 0x04	; 4
    2988:	4d 93       	st	X+, r20
    298a:	5d 93       	st	X+, r21
    298c:	6d 93       	st	X+, r22
    298e:	7c 93       	st	X, r23
    2990:	17 97       	sbiw	r26, 0x07	; 7
    2992:	08 95       	ret

00002994 <__fpcmp_parts_f>:
    2994:	1f 93       	push	r17
    2996:	dc 01       	movw	r26, r24
    2998:	fb 01       	movw	r30, r22
    299a:	9c 91       	ld	r25, X
    299c:	92 30       	cpi	r25, 0x02	; 2
    299e:	08 f4       	brcc	.+2      	; 0x29a2 <__fpcmp_parts_f+0xe>
    29a0:	47 c0       	rjmp	.+142    	; 0x2a30 <__fpcmp_parts_f+0x9c>
    29a2:	80 81       	ld	r24, Z
    29a4:	82 30       	cpi	r24, 0x02	; 2
    29a6:	08 f4       	brcc	.+2      	; 0x29aa <__fpcmp_parts_f+0x16>
    29a8:	43 c0       	rjmp	.+134    	; 0x2a30 <__fpcmp_parts_f+0x9c>
    29aa:	94 30       	cpi	r25, 0x04	; 4
    29ac:	51 f4       	brne	.+20     	; 0x29c2 <__fpcmp_parts_f+0x2e>
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	1c 91       	ld	r17, X
    29b2:	84 30       	cpi	r24, 0x04	; 4
    29b4:	99 f5       	brne	.+102    	; 0x2a1c <__fpcmp_parts_f+0x88>
    29b6:	81 81       	ldd	r24, Z+1	; 0x01
    29b8:	68 2f       	mov	r22, r24
    29ba:	70 e0       	ldi	r23, 0x00	; 0
    29bc:	61 1b       	sub	r22, r17
    29be:	71 09       	sbc	r23, r1
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <__fpcmp_parts_f+0xac>
    29c2:	84 30       	cpi	r24, 0x04	; 4
    29c4:	21 f0       	breq	.+8      	; 0x29ce <__fpcmp_parts_f+0x3a>
    29c6:	92 30       	cpi	r25, 0x02	; 2
    29c8:	31 f4       	brne	.+12     	; 0x29d6 <__fpcmp_parts_f+0x42>
    29ca:	82 30       	cpi	r24, 0x02	; 2
    29cc:	b9 f1       	breq	.+110    	; 0x2a3c <__fpcmp_parts_f+0xa8>
    29ce:	81 81       	ldd	r24, Z+1	; 0x01
    29d0:	88 23       	and	r24, r24
    29d2:	89 f1       	breq	.+98     	; 0x2a36 <__fpcmp_parts_f+0xa2>
    29d4:	2d c0       	rjmp	.+90     	; 0x2a30 <__fpcmp_parts_f+0x9c>
    29d6:	11 96       	adiw	r26, 0x01	; 1
    29d8:	1c 91       	ld	r17, X
    29da:	11 97       	sbiw	r26, 0x01	; 1
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	f1 f0       	breq	.+60     	; 0x2a1c <__fpcmp_parts_f+0x88>
    29e0:	81 81       	ldd	r24, Z+1	; 0x01
    29e2:	18 17       	cp	r17, r24
    29e4:	d9 f4       	brne	.+54     	; 0x2a1c <__fpcmp_parts_f+0x88>
    29e6:	12 96       	adiw	r26, 0x02	; 2
    29e8:	2d 91       	ld	r18, X+
    29ea:	3c 91       	ld	r19, X
    29ec:	13 97       	sbiw	r26, 0x03	; 3
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	82 17       	cp	r24, r18
    29f4:	93 07       	cpc	r25, r19
    29f6:	94 f0       	brlt	.+36     	; 0x2a1c <__fpcmp_parts_f+0x88>
    29f8:	28 17       	cp	r18, r24
    29fa:	39 07       	cpc	r19, r25
    29fc:	bc f0       	brlt	.+46     	; 0x2a2c <__fpcmp_parts_f+0x98>
    29fe:	14 96       	adiw	r26, 0x04	; 4
    2a00:	8d 91       	ld	r24, X+
    2a02:	9d 91       	ld	r25, X+
    2a04:	0d 90       	ld	r0, X+
    2a06:	bc 91       	ld	r27, X
    2a08:	a0 2d       	mov	r26, r0
    2a0a:	24 81       	ldd	r18, Z+4	; 0x04
    2a0c:	35 81       	ldd	r19, Z+5	; 0x05
    2a0e:	46 81       	ldd	r20, Z+6	; 0x06
    2a10:	57 81       	ldd	r21, Z+7	; 0x07
    2a12:	28 17       	cp	r18, r24
    2a14:	39 07       	cpc	r19, r25
    2a16:	4a 07       	cpc	r20, r26
    2a18:	5b 07       	cpc	r21, r27
    2a1a:	18 f4       	brcc	.+6      	; 0x2a22 <__fpcmp_parts_f+0x8e>
    2a1c:	11 23       	and	r17, r17
    2a1e:	41 f0       	breq	.+16     	; 0x2a30 <__fpcmp_parts_f+0x9c>
    2a20:	0a c0       	rjmp	.+20     	; 0x2a36 <__fpcmp_parts_f+0xa2>
    2a22:	82 17       	cp	r24, r18
    2a24:	93 07       	cpc	r25, r19
    2a26:	a4 07       	cpc	r26, r20
    2a28:	b5 07       	cpc	r27, r21
    2a2a:	40 f4       	brcc	.+16     	; 0x2a3c <__fpcmp_parts_f+0xa8>
    2a2c:	11 23       	and	r17, r17
    2a2e:	19 f0       	breq	.+6      	; 0x2a36 <__fpcmp_parts_f+0xa2>
    2a30:	61 e0       	ldi	r22, 0x01	; 1
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	05 c0       	rjmp	.+10     	; 0x2a40 <__fpcmp_parts_f+0xac>
    2a36:	6f ef       	ldi	r22, 0xFF	; 255
    2a38:	7f ef       	ldi	r23, 0xFF	; 255
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <__fpcmp_parts_f+0xac>
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	cb 01       	movw	r24, r22
    2a42:	1f 91       	pop	r17
    2a44:	08 95       	ret

00002a46 <T0_FastPwm>:
#include"PWM_private.h"



void T0_FastPwm(f32 duty, u8 pulse)
{
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	27 97       	sbiw	r28, 0x07	; 7
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	69 83       	std	Y+1, r22	; 0x01
    2a60:	7a 83       	std	Y+2, r23	; 0x02
    2a62:	8b 83       	std	Y+3, r24	; 0x03
    2a64:	9c 83       	std	Y+4, r25	; 0x04
    2a66:	4d 83       	std	Y+5, r20	; 0x05
	//OCR0 as output
	DDRB_REG=(1<<3);
    2a68:	e7 e3       	ldi	r30, 0x37	; 55
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	88 e0       	ldi	r24, 0x08	; 8
    2a6e:	80 83       	st	Z, r24

	switch(pulse)
    2a70:	8d 81       	ldd	r24, Y+5	; 0x05
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	3f 83       	std	Y+7, r19	; 0x07
    2a78:	2e 83       	std	Y+6, r18	; 0x06
    2a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a7e:	81 30       	cpi	r24, 0x01	; 1
    2a80:	91 05       	cpc	r25, r1
    2a82:	31 f0       	breq	.+12     	; 0x2a90 <T0_FastPwm+0x4a>
    2a84:	ee 81       	ldd	r30, Y+6	; 0x06
    2a86:	ff 81       	ldd	r31, Y+7	; 0x07
    2a88:	e2 30       	cpi	r30, 0x02	; 2
    2a8a:	f1 05       	cpc	r31, r1
    2a8c:	d1 f1       	breq	.+116    	; 0x2b02 <T0_FastPwm+0xbc>
    2a8e:	67 c0       	rjmp	.+206    	; 0x2b5e <T0_FastPwm+0x118>
	{
	case INVERTED:
		OCR0 = TOP-(TOP* (duty/100))-1;
    2a90:	0c e5       	ldi	r16, 0x5C	; 92
    2a92:	10 e0       	ldi	r17, 0x00	; 0
    2a94:	69 81       	ldd	r22, Y+1	; 0x01
    2a96:	7a 81       	ldd	r23, Y+2	; 0x02
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	48 ec       	ldi	r20, 0xC8	; 200
    2aa2:	52 e4       	ldi	r21, 0x42	; 66
    2aa4:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	bc 01       	movw	r22, r24
    2aae:	cd 01       	movw	r24, r26
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	53 ec       	ldi	r21, 0xC3	; 195
    2ab8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	53 e4       	ldi	r21, 0x43	; 67
    2acc:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__addsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__subsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	f8 01       	movw	r30, r16
    2af6:	80 83       	st	Z, r24
		TCCR0= (1<<COM00) | (1<<COM01) | (1<<WGM00) | (1<<WGM01) | PWM_prescaller;
    2af8:	e3 e5       	ldi	r30, 0x53	; 83
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	89 e7       	ldi	r24, 0x79	; 121
    2afe:	80 83       	st	Z, r24
    2b00:	2e c0       	rjmp	.+92     	; 0x2b5e <T0_FastPwm+0x118>
		break;

	case NON_INVERTED:
		OCR0 = (TOP-duty*TOP)-1;
    2b02:	0c e5       	ldi	r16, 0x5C	; 92
    2b04:	10 e0       	ldi	r17, 0x00	; 0
    2b06:	69 81       	ldd	r22, Y+1	; 0x01
    2b08:	7a 81       	ldd	r23, Y+2	; 0x02
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	40 e8       	ldi	r20, 0x80	; 128
    2b14:	53 ec       	ldi	r21, 0xC3	; 195
    2b16:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e8       	ldi	r20, 0x80	; 128
    2b28:	53 e4       	ldi	r21, 0x43	; 67
    2b2a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__addsf3>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e8       	ldi	r20, 0x80	; 128
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__subsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	f8 01       	movw	r30, r16
    2b54:	80 83       	st	Z, r24
		TCCR0=  (1<<COM01) | (1<<WGM00) | (1<<WGM01) | PWM_prescaller;
    2b56:	e3 e5       	ldi	r30, 0x53	; 83
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	89 e6       	ldi	r24, 0x69	; 105
    2b5c:	80 83       	st	Z, r24
	default :
		break;

	}

}
    2b5e:	27 96       	adiw	r28, 0x07	; 7
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	1f 91       	pop	r17
    2b70:	0f 91       	pop	r16
    2b72:	08 95       	ret

00002b74 <T0_PhaseCorrectPwm>:


void T0_PhaseCorrectPwm(f32 duty, u8 pulse)
{
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	27 97       	sbiw	r28, 0x07	; 7
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	69 83       	std	Y+1, r22	; 0x01
    2b8e:	7a 83       	std	Y+2, r23	; 0x02
    2b90:	8b 83       	std	Y+3, r24	; 0x03
    2b92:	9c 83       	std	Y+4, r25	; 0x04
    2b94:	4d 83       	std	Y+5, r20	; 0x05
	DDRB_REG = (1 << 3);
    2b96:	e7 e3       	ldi	r30, 0x37	; 55
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	88 e0       	ldi	r24, 0x08	; 8
    2b9c:	80 83       	st	Z, r24

	switch(pulse)
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	3f 83       	std	Y+7, r19	; 0x07
    2ba6:	2e 83       	std	Y+6, r18	; 0x06
    2ba8:	8e 81       	ldd	r24, Y+6	; 0x06
    2baa:	9f 81       	ldd	r25, Y+7	; 0x07
    2bac:	81 30       	cpi	r24, 0x01	; 1
    2bae:	91 05       	cpc	r25, r1
    2bb0:	31 f0       	breq	.+12     	; 0x2bbe <T0_PhaseCorrectPwm+0x4a>
    2bb2:	ee 81       	ldd	r30, Y+6	; 0x06
    2bb4:	ff 81       	ldd	r31, Y+7	; 0x07
    2bb6:	e2 30       	cpi	r30, 0x02	; 2
    2bb8:	f1 05       	cpc	r31, r1
    2bba:	81 f1       	breq	.+96     	; 0x2c1c <T0_PhaseCorrectPwm+0xa8>
    2bbc:	53 c0       	rjmp	.+166    	; 0x2c64 <T0_PhaseCorrectPwm+0xf0>
	{
	case INVERTED :
		OCR0 = ((TOP-1)-(duty*(TOP-1)/100));
    2bbe:	0c e5       	ldi	r16, 0x5C	; 92
    2bc0:	10 e0       	ldi	r17, 0x00	; 0
    2bc2:	69 81       	ldd	r22, Y+1	; 0x01
    2bc4:	7a 81       	ldd	r23, Y+2	; 0x02
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4f e7       	ldi	r20, 0x7F	; 127
    2bd0:	53 e4       	ldi	r21, 0x43	; 67
    2bd2:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	48 ec       	ldi	r20, 0xC8	; 200
    2be4:	52 ec       	ldi	r21, 0xC2	; 194
    2be6:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4f e7       	ldi	r20, 0x7F	; 127
    2bf8:	53 e4       	ldi	r21, 0x43	; 67
    2bfa:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__addsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	f8 01       	movw	r30, r16
    2c10:	80 83       	st	Z, r24
		TCCR0 = (1 << WGM00) | (1 << COM01) | (1 << COM00) | PWM_prescaller;
    2c12:	e3 e5       	ldi	r30, 0x53	; 83
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	81 e7       	ldi	r24, 0x71	; 113
    2c18:	80 83       	st	Z, r24
    2c1a:	24 c0       	rjmp	.+72     	; 0x2c64 <T0_PhaseCorrectPwm+0xf0>
		break;

	case NON_INVERTED :
		OCR0 = (duty*(TOP-1))/100;
    2c1c:	0c e5       	ldi	r16, 0x5C	; 92
    2c1e:	10 e0       	ldi	r17, 0x00	; 0
    2c20:	69 81       	ldd	r22, Y+1	; 0x01
    2c22:	7a 81       	ldd	r23, Y+2	; 0x02
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	9c 81       	ldd	r25, Y+4	; 0x04
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	4f e7       	ldi	r20, 0x7F	; 127
    2c2e:	53 e4       	ldi	r21, 0x43	; 67
    2c30:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	48 ec       	ldi	r20, 0xC8	; 200
    2c42:	52 e4       	ldi	r21, 0x42	; 66
    2c44:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	bc 01       	movw	r22, r24
    2c4e:	cd 01       	movw	r24, r26
    2c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	f8 01       	movw	r30, r16
    2c5a:	80 83       	st	Z, r24
		TCCR0 = (1 << WGM00) | (1 << COM01) | PWM_prescaller;
    2c5c:	e3 e5       	ldi	r30, 0x53	; 83
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	81 e6       	ldi	r24, 0x61	; 97
    2c62:	80 83       	st	Z, r24

	default :
		break;
	}

}
    2c64:	27 96       	adiw	r28, 0x07	; 7
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	1f 91       	pop	r17
    2c76:	0f 91       	pop	r16
    2c78:	08 95       	ret

00002c7a <I2C_voidInit>:
#include "I2C_interface.h"
#include "I2C_private.h"
#include "I2C_config.h"

void I2C_voidInit(void)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
	#if I2C_MODE == MASTER
		TWAR = ( NODE_ADDRESS << 1 ) | GEN_CALL ;  // Write the Node Address and State the General Call Mode
    2c82:	e2 e2       	ldi	r30, 0x22	; 34
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	82 e0       	ldi	r24, 0x02	; 2
    2c88:	80 83       	st	Z, r24
		CLR_BIT( TWSR, 0) ; // Select the pre-scaler
    2c8a:	a1 e2       	ldi	r26, 0x21	; 33
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	e1 e2       	ldi	r30, 0x21	; 33
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	8e 7f       	andi	r24, 0xFE	; 254
    2c96:	8c 93       	st	X, r24
		CLR_BIT( TWSR, 1) ;
    2c98:	a1 e2       	ldi	r26, 0x21	; 33
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e1 e2       	ldi	r30, 0x21	; 33
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8d 7f       	andi	r24, 0xFD	; 253
    2ca4:	8c 93       	st	X, r24
		TWBR = I2C_SPEED; // Select the I2C Speed as Standard speed (100KHz) the MC Clock is 8MHz
    2ca6:	e0 e2       	ldi	r30, 0x20	; 32
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 e2       	ldi	r24, 0x20	; 32
    2cac:	80 83       	st	Z, r24
		TWCR->Bit.TWEN = 1;  //Enable the I2C
    2cae:	e6 e5       	ldi	r30, 0x56	; 86
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	84 60       	ori	r24, 0x04	; 4
    2cb6:	80 83       	st	Z, r24
		TWAR = ( NODE_ADDRESS << 1 ) | GEN_CALL ; // Select the Node Status
		TWCR->Bit->TWEN = 1;  //Enable the I2C
	#else 
		#error "Wrong I2C Mode"
	#endif
}
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <I2C_MASTER_voidSetConfigure>:
void I2C_MASTER_voidSetConfigure(I2C_MASTER_CONFIG Copy_structConfigurations)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <I2C_MASTER_voidSetConfigure+0x6>
    2cc4:	0f 92       	push	r0
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	69 83       	std	Y+1, r22	; 0x01
    2ccc:	7a 83       	std	Y+2, r23	; 0x02
    2cce:	8b 83       	std	Y+3, r24	; 0x03
	TWAR = Copy_structConfigurations.NodeAddress | Copy_structConfigurations.G_CALL ;
    2cd0:	e2 e2       	ldi	r30, 0x22	; 34
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	89 2b       	or	r24, r25
    2cda:	80 83       	st	Z, r24
	/* Pre-scaler 1 */
	CLR_BIT( TWSR , 0 );
    2cdc:	a1 e2       	ldi	r26, 0x21	; 33
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	e1 e2       	ldi	r30, 0x21	; 33
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	8e 7f       	andi	r24, 0xFE	; 254
    2ce8:	8c 93       	st	X, r24
	CLR_BIT( TWSR , 1 );
    2cea:	a1 e2       	ldi	r26, 0x21	; 33
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	e1 e2       	ldi	r30, 0x21	; 33
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	8d 7f       	andi	r24, 0xFD	; 253
    2cf6:	8c 93       	st	X, r24
	/* Speed due to 8MHz Clock Frequency Crystal */
	TWBR = Copy_structConfigurations.speed;
    2cf8:	e0 e2       	ldi	r30, 0x20	; 32
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	80 83       	st	Z, r24
	TWCR->Bit.TWEN = 1; // Enable the IIC Circuit
    2d00:	e6 e5       	ldi	r30, 0x56	; 86
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	84 60       	ori	r24, 0x04	; 4
    2d08:	80 83       	st	Z, r24
}
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <I2C_MASTER_enumSendStart>:

ERROR_STATE I2C_MASTER_enumSendStart(void)
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	0f 92       	push	r0
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE State = NOK;
    2d20:	19 82       	std	Y+1, r1	; 0x01
	// Setting the Start Condition Bit
	TWCR->Bit.TWSTA = 1;
    2d22:	e6 e5       	ldi	r30, 0x56	; 86
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	80 62       	ori	r24, 0x20	; 32
    2d2a:	80 83       	st	Z, r24
	// Clearing the Flag by Writing one
	TWCR->Bit.TWINT = 1;
    2d2c:	e6 e5       	ldi	r30, 0x56	; 86
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	80 68       	ori	r24, 0x80	; 128
    2d34:	80 83       	st	Z, r24
	// pooling the Flag
	while( ! TWCR->Bit.TWINT );
    2d36:	e6 e5       	ldi	r30, 0x56	; 86
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	80 78       	andi	r24, 0x80	; 128
    2d3e:	88 23       	and	r24, r24
    2d40:	d1 f3       	breq	.-12     	; 0x2d36 <I2C_MASTER_enumSendStart+0x20>
	// Checking the Status Register Value With START CONDITION
	if ( (TWSR & 0xF8) == 0x08 )
    2d42:	e1 e2       	ldi	r30, 0x21	; 33
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	88 2f       	mov	r24, r24
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	88 7f       	andi	r24, 0xF8	; 248
    2d4e:	90 70       	andi	r25, 0x00	; 0
    2d50:	88 30       	cpi	r24, 0x08	; 8
    2d52:	91 05       	cpc	r25, r1
    2d54:	11 f4       	brne	.+4      	; 0x2d5a <I2C_MASTER_enumSendStart+0x44>
	{
		State = OK;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return State;
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2d5c:	0f 90       	pop	r0
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <I2C_MASTER_enumSendRepeatedStart>:
ERROR_STATE I2C_MASTER_enumSendRepeatedStart(void)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	0f 92       	push	r0
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE State = NOK;
    2d6e:	19 82       	std	Y+1, r1	; 0x01
	// Setting the Start Condition Bit
	TWCR->Bit.TWSTA = 1;
    2d70:	e6 e5       	ldi	r30, 0x56	; 86
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	80 62       	ori	r24, 0x20	; 32
    2d78:	80 83       	st	Z, r24
	// Clearing the Flag by Writing one
	TWCR->Bit.TWINT = 1;
    2d7a:	e6 e5       	ldi	r30, 0x56	; 86
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	80 68       	ori	r24, 0x80	; 128
    2d82:	80 83       	st	Z, r24
	// pooling the Flag
	while( ! TWCR->Bit.TWINT );
    2d84:	e6 e5       	ldi	r30, 0x56	; 86
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	80 78       	andi	r24, 0x80	; 128
    2d8c:	88 23       	and	r24, r24
    2d8e:	d1 f3       	breq	.-12     	; 0x2d84 <I2C_MASTER_enumSendRepeatedStart+0x20>
	// Checking the Status Register Value with MASTER REPEATED START CONDITION
	if ( (TWSR & 0xF8) == 0x10 )
    2d90:	e1 e2       	ldi	r30, 0x21	; 33
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	88 2f       	mov	r24, r24
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	88 7f       	andi	r24, 0xF8	; 248
    2d9c:	90 70       	andi	r25, 0x00	; 0
    2d9e:	80 31       	cpi	r24, 0x10	; 16
    2da0:	91 05       	cpc	r25, r1
    2da2:	11 f4       	brne	.+4      	; 0x2da8 <I2C_MASTER_enumSendRepeatedStart+0x44>
	{
		State = OK;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return State;
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2daa:	0f 90       	pop	r0
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <I2C_MASTER_voidSendSTOP>:

void I2C_MASTER_voidSendSTOP(void)
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
	// Setting the Stop Condition Bit
	TWCR->Bit.TWSTO = 1;
    2dba:	e6 e5       	ldi	r30, 0x56	; 86
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	80 61       	ori	r24, 0x10	; 16
    2dc2:	80 83       	st	Z, r24
	// Clearing the Flag by Writing one
	TWCR->Bit.TWINT = 1;
    2dc4:	e6 e5       	ldi	r30, 0x56	; 86
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	80 68       	ori	r24, 0x80	; 128
    2dcc:	80 83       	st	Z, r24
}
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <I2C_MASTER_enumSendSlaveAddressWithRead>:

ERROR_STATE I2C_MASTER_enumSendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <I2C_MASTER_enumSendSlaveAddressWithRead+0x6>
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK;
    2de0:	19 82       	std	Y+1, r1	; 0x01
	// Writing the Address of the Slave
	TWDR =  ( Copy_u8SlaveAddress << 1 ) | 0x01 ;
    2de2:	e3 e2       	ldi	r30, 0x23	; 35
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	88 2f       	mov	r24, r24
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	88 0f       	add	r24, r24
    2dee:	99 1f       	adc	r25, r25
    2df0:	81 60       	ori	r24, 0x01	; 1
    2df2:	80 83       	st	Z, r24
	// Clearing the Start Condition
	TWCR->Bit.TWSTA = 0;
    2df4:	e6 e5       	ldi	r30, 0x56	; 86
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	8f 7d       	andi	r24, 0xDF	; 223
    2dfc:	80 83       	st	Z, r24
	// Clearing the flag
	TWCR->Bit.TWINT = 1;
    2dfe:	e6 e5       	ldi	r30, 0x56	; 86
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	80 68       	ori	r24, 0x80	; 128
    2e06:	80 83       	st	Z, r24
	// pooling the Flag
	while(! TWCR->Bit.TWINT);
    2e08:	e6 e5       	ldi	r30, 0x56	; 86
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	80 78       	andi	r24, 0x80	; 128
    2e10:	88 23       	and	r24, r24
    2e12:	d1 f3       	breq	.-12     	; 0x2e08 <I2C_MASTER_enumSendSlaveAddressWithRead+0x34>
	if ( (TWSR & 0xF8) == 0x40)
    2e14:	e1 e2       	ldi	r30, 0x21	; 33
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	88 2f       	mov	r24, r24
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	88 7f       	andi	r24, 0xF8	; 248
    2e20:	90 70       	andi	r25, 0x00	; 0
    2e22:	80 34       	cpi	r24, 0x40	; 64
    2e24:	91 05       	cpc	r25, r1
    2e26:	11 f4       	brne	.+4      	; 0x2e2c <I2C_MASTER_enumSendSlaveAddressWithRead+0x58>
	{
		State = OK;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	08 95       	ret

00002e38 <I2C_MASTER_enumSendSlaveAddressWithWrite>:

ERROR_STATE I2C_MASTER_enumSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <I2C_MASTER_enumSendSlaveAddressWithWrite+0x6>
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK;
    2e44:	19 82       	std	Y+1, r1	; 0x01
	// Writing the Address of the Slave
	TWDR =  ( Copy_u8SlaveAddress << 1 ) ;
    2e46:	e3 e2       	ldi	r30, 0x23	; 35
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	88 0f       	add	r24, r24
    2e4e:	80 83       	st	Z, r24
	// Clearing the Start Condition
	TWCR->Bit.TWSTA = 0;
    2e50:	e6 e5       	ldi	r30, 0x56	; 86
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	8f 7d       	andi	r24, 0xDF	; 223
    2e58:	80 83       	st	Z, r24
	// Clearing the flag
	TWCR->Bit.TWINT = 1;
    2e5a:	e6 e5       	ldi	r30, 0x56	; 86
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	80 68       	ori	r24, 0x80	; 128
    2e62:	80 83       	st	Z, r24
	// pooling the Flag
	while(! TWCR->Bit.TWINT);
    2e64:	e6 e5       	ldi	r30, 0x56	; 86
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	80 78       	andi	r24, 0x80	; 128
    2e6c:	88 23       	and	r24, r24
    2e6e:	d1 f3       	breq	.-12     	; 0x2e64 <I2C_MASTER_enumSendSlaveAddressWithWrite+0x2c>
	if ( (TWSR & 0xF8) == 0x18)
    2e70:	e1 e2       	ldi	r30, 0x21	; 33
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	88 7f       	andi	r24, 0xF8	; 248
    2e7c:	90 70       	andi	r25, 0x00	; 0
    2e7e:	88 31       	cpi	r24, 0x18	; 24
    2e80:	91 05       	cpc	r25, r1
    2e82:	11 f4       	brne	.+4      	; 0x2e88 <I2C_MASTER_enumSendSlaveAddressWithWrite+0x50>
	{
		State = OK;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <I2C_MASTER_enumSendByte>:

ERROR_STATE I2C_MASTER_enumSendByte(u8 Copy_u8Data)
{
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	00 d0       	rcall	.+0      	; 0x2e9a <I2C_MASTER_enumSendByte+0x6>
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK ;
    2ea0:	19 82       	std	Y+1, r1	; 0x01
	/// Writing data to TWDR
	TWDR = Copy_u8Data;
    2ea2:	e3 e2       	ldi	r30, 0x23	; 35
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	80 83       	st	Z, r24
	/// Clearing the flag
	TWCR->Bit.TWINT = 1;
    2eaa:	e6 e5       	ldi	r30, 0x56	; 86
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	80 68       	ori	r24, 0x80	; 128
    2eb2:	80 83       	st	Z, r24
	/// pooling the flag 
	while( !TWCR->Bit.TWINT );
    2eb4:	e6 e5       	ldi	r30, 0x56	; 86
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	80 78       	andi	r24, 0x80	; 128
    2ebc:	88 23       	and	r24, r24
    2ebe:	d1 f3       	breq	.-12     	; 0x2eb4 <I2C_MASTER_enumSendByte+0x20>
	if ( (TWSR&0xF8) == 0x28 )
    2ec0:	e1 e2       	ldi	r30, 0x21	; 33
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	88 2f       	mov	r24, r24
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	88 7f       	andi	r24, 0xF8	; 248
    2ecc:	90 70       	andi	r25, 0x00	; 0
    2ece:	88 32       	cpi	r24, 0x28	; 40
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	11 f4       	brne	.+4      	; 0x2ed8 <I2C_MASTER_enumSendByte+0x44>
	{
		State = OK;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	89 83       	std	Y+1, r24	; 0x01
	}
	return State ;
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <I2C_MASTER_enumReadByte_With_NACK>:
ERROR_STATE I2C_MASTER_enumReadByte_With_NACK(u8 * Copy_u8Data)
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	00 d0       	rcall	.+0      	; 0x2eea <I2C_MASTER_enumReadByte_With_NACK+0x6>
    2eea:	0f 92       	push	r0
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	9b 83       	std	Y+3, r25	; 0x03
    2ef2:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK;
    2ef4:	19 82       	std	Y+1, r1	; 0x01
	/// Clearing the flag
	TWCR->Bit.TWINT = 1;
    2ef6:	e6 e5       	ldi	r30, 0x56	; 86
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	80 68       	ori	r24, 0x80	; 128
    2efe:	80 83       	st	Z, r24
	TWCR->Bit.TWEA = 0;
    2f00:	e6 e5       	ldi	r30, 0x56	; 86
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	8f 7b       	andi	r24, 0xBF	; 191
    2f08:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT );
    2f0a:	e6 e5       	ldi	r30, 0x56	; 86
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	80 78       	andi	r24, 0x80	; 128
    2f12:	88 23       	and	r24, r24
    2f14:	d1 f3       	breq	.-12     	; 0x2f0a <I2C_MASTER_enumReadByte_With_NACK+0x26>
	if( (TWSR&0xF8) == 0x58)
    2f16:	e1 e2       	ldi	r30, 0x21	; 33
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 2f       	mov	r24, r24
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	88 7f       	andi	r24, 0xF8	; 248
    2f22:	90 70       	andi	r25, 0x00	; 0
    2f24:	88 35       	cpi	r24, 0x58	; 88
    2f26:	91 05       	cpc	r25, r1
    2f28:	41 f4       	brne	.+16     	; 0x2f3a <I2C_MASTER_enumReadByte_With_NACK+0x56>
	{
		State = OK;
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	89 83       	std	Y+1, r24	; 0x01
		/// Reading the Data from TWDR
		*Copy_u8Data = TWDR ;
    2f2e:	e3 e2       	ldi	r30, 0x23	; 35
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	ea 81       	ldd	r30, Y+2	; 0x02
    2f36:	fb 81       	ldd	r31, Y+3	; 0x03
    2f38:	80 83       	st	Z, r24
	}
	return State;
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <I2C_MASTER_enumReadByte_With_ACK>:

ERROR_STATE I2C_MASTER_enumReadByte_With_ACK( u8 * Copy_u8Buffer)
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <I2C_MASTER_enumReadByte_With_ACK+0x6>
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <I2C_MASTER_enumReadByte_With_ACK+0x8>
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	9c 83       	std	Y+4, r25	; 0x04
    2f56:	8b 83       	std	Y+3, r24	; 0x03
	ERROR_STATE Local_enumErrorState = NOK;
    2f58:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter = 0;
    2f5a:	19 82       	std	Y+1, r1	; 0x01
	TWCR->Bit.TWINT = 1;  //<Clearing the flag
    2f5c:	e6 e5       	ldi	r30, 0x56	; 86
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	80 68       	ori	r24, 0x80	; 128
    2f64:	80 83       	st	Z, r24
	TWCR->Bit.TWEA = 1;  //< Sending ACK to receive more than one byte
    2f66:	e6 e5       	ldi	r30, 0x56	; 86
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	80 64       	ori	r24, 0x40	; 64
    2f6e:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT);
    2f70:	e6 e5       	ldi	r30, 0x56	; 86
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	80 78       	andi	r24, 0x80	; 128
    2f78:	88 23       	and	r24, r24
    2f7a:	d1 f3       	breq	.-12     	; 0x2f70 <I2C_MASTER_enumReadByte_With_ACK+0x28>
	if( (TWSR & 0xF8) == 0x50)
    2f7c:	e1 e2       	ldi	r30, 0x21	; 33
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	88 2f       	mov	r24, r24
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	88 7f       	andi	r24, 0xF8	; 248
    2f88:	90 70       	andi	r25, 0x00	; 0
    2f8a:	80 35       	cpi	r24, 0x50	; 80
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	71 f4       	brne	.+28     	; 0x2fac <I2C_MASTER_enumReadByte_With_ACK+0x64>
	{
		Local_enumErrorState = OK;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	8a 83       	std	Y+2, r24	; 0x02
		*(Copy_u8Buffer + Local_u8Counter) = TWDR;
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	a2 0f       	add	r26, r18
    2fa2:	b3 1f       	adc	r27, r19
    2fa4:	e3 e2       	ldi	r30, 0x23	; 35
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	8c 93       	st	X, r24
	}

	return Local_enumErrorState;
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <I2C_SLAVE_voidSetConfigure>:


void I2C_SLAVE_voidSetConfigure (I2C_SLAVE_CONFIG Copy_structConfigurations )
{
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <I2C_SLAVE_voidSetConfigure+0x6>
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	9a 83       	std	Y+2, r25	; 0x02
    2fc8:	89 83       	std	Y+1, r24	; 0x01
	TWAR = (Copy_structConfigurations.NodeAddress << 1) | Copy_structConfigurations.G_CALL ;
    2fca:	e2 e2       	ldi	r30, 0x22	; 34
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	88 2f       	mov	r24, r24
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	88 0f       	add	r24, r24
    2fd6:	99 1f       	adc	r25, r25
    2fd8:	98 2f       	mov	r25, r24
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	89 2b       	or	r24, r25
    2fde:	80 83       	st	Z, r24
	TWCR->Bit.TWEN = 1;
    2fe0:	e6 e5       	ldi	r30, 0x56	; 86
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	84 60       	ori	r24, 0x04	; 4
    2fe8:	80 83       	st	Z, r24
}
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <I2C_SLAVE_Listen_Adress_MASTER_Read>:

ERROR_STATE I2C_SLAVE_Listen_Adress_MASTER_Read(void)
{
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	0f 92       	push	r0
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE State = NOK;
    2ffe:	19 82       	std	Y+1, r1	; 0x01
	// Enable the ACK
	TWCR->Bit.TWEA = 1;
    3000:	e6 e5       	ldi	r30, 0x56	; 86
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	80 64       	ori	r24, 0x40	; 64
    3008:	80 83       	st	Z, r24
	// Clear the flag
	TWCR->Bit.TWINT = 1;
    300a:	e6 e5       	ldi	r30, 0x56	; 86
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	80 68       	ori	r24, 0x80	; 128
    3012:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT  );
    3014:	e6 e5       	ldi	r30, 0x56	; 86
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	80 78       	andi	r24, 0x80	; 128
    301c:	88 23       	and	r24, r24
    301e:	d1 f3       	breq	.-12     	; 0x3014 <I2C_SLAVE_Listen_Adress_MASTER_Read+0x20>
	/* MAster Will Read from Slave */
	/* Check the value of status register from Slave in Transmitter mode table */
	if ( (TWSR &0xF8) == 0xA8 )
    3020:	e1 e2       	ldi	r30, 0x21	; 33
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	88 2f       	mov	r24, r24
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	88 7f       	andi	r24, 0xF8	; 248
    302c:	90 70       	andi	r25, 0x00	; 0
    302e:	88 3a       	cpi	r24, 0xA8	; 168
    3030:	91 05       	cpc	r25, r1
    3032:	11 f4       	brne	.+4      	; 0x3038 <I2C_SLAVE_Listen_Adress_MASTER_Read+0x44>
	{
		State = OK ;
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    3038:	89 81       	ldd	r24, Y+1	; 0x01
}
    303a:	0f 90       	pop	r0
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	08 95       	ret

00003042 <I2C_SLAVE_Listen_Adress_MASTER_Write>:
ERROR_STATE I2C_SLAVE_Listen_Adress_MASTER_Write(void)
{
    3042:	df 93       	push	r29
    3044:	cf 93       	push	r28
    3046:	0f 92       	push	r0
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE State = NOK;
    304c:	19 82       	std	Y+1, r1	; 0x01
	///Enable the ACK
	TWCR->Bit.TWEA = 1;
    304e:	e6 e5       	ldi	r30, 0x56	; 86
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	80 64       	ori	r24, 0x40	; 64
    3056:	80 83       	st	Z, r24
	///Clear the flag
	TWCR->Bit.TWINT = 1;
    3058:	e6 e5       	ldi	r30, 0x56	; 86
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	80 68       	ori	r24, 0x80	; 128
    3060:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT  );
    3062:	e6 e5       	ldi	r30, 0x56	; 86
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	80 78       	andi	r24, 0x80	; 128
    306a:	88 23       	and	r24, r24
    306c:	d1 f3       	breq	.-12     	; 0x3062 <I2C_SLAVE_Listen_Adress_MASTER_Write+0x20>
	/* MAster Will Write to Slave */
	/* Check the value of status register from Slave in Reciever mode table */
	if ( (TWSR&0xF8) == 0x60 )
    306e:	e1 e2       	ldi	r30, 0x21	; 33
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	88 2f       	mov	r24, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	88 7f       	andi	r24, 0xF8	; 248
    307a:	90 70       	andi	r25, 0x00	; 0
    307c:	80 36       	cpi	r24, 0x60	; 96
    307e:	91 05       	cpc	r25, r1
    3080:	11 f4       	brne	.+4      	; 0x3086 <I2C_SLAVE_Listen_Adress_MASTER_Write+0x44>
	{
		State = OK ;
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    3086:	89 81       	ldd	r24, Y+1	; 0x01
}
    3088:	0f 90       	pop	r0
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <I2C_SLAVE_enumSendByte_NACK>:
ERROR_STATE I2C_SLAVE_enumSendByte_NACK(u8 Copy_u8Data)
{
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	00 d0       	rcall	.+0      	; 0x3096 <I2C_SLAVE_enumSendByte_NACK+0x6>
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK;
    309c:	19 82       	std	Y+1, r1	; 0x01
	/// Write the data on the Bus
	TWDR = Copy_u8Data;
    309e:	e3 e2       	ldi	r30, 0x23	; 35
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	80 83       	st	Z, r24
	///Clear the flag
	TWCR->Bit.TWINT = 1;
    30a6:	e6 e5       	ldi	r30, 0x56	; 86
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	80 68       	ori	r24, 0x80	; 128
    30ae:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT  );
    30b0:	e6 e5       	ldi	r30, 0x56	; 86
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	80 78       	andi	r24, 0x80	; 128
    30b8:	88 23       	and	r24, r24
    30ba:	d1 f3       	breq	.-12     	; 0x30b0 <I2C_SLAVE_enumSendByte_NACK+0x20>
	if ( (TWSR&0xF8) == 0xC0 )
    30bc:	e1 e2       	ldi	r30, 0x21	; 33
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	88 2f       	mov	r24, r24
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	88 7f       	andi	r24, 0xF8	; 248
    30c8:	90 70       	andi	r25, 0x00	; 0
    30ca:	80 3c       	cpi	r24, 0xC0	; 192
    30cc:	91 05       	cpc	r25, r1
    30ce:	11 f4       	brne	.+4      	; 0x30d4 <I2C_SLAVE_enumSendByte_NACK+0x44>
	{
		State = OK ;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <I2C_SLAVE_enumReadByte>:
ERROR_STATE I2C_SLAVE_enumReadByte(u8 * Copy_u8Data)
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <I2C_SLAVE_enumReadByte+0x6>
    30e6:	0f 92       	push	r0
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
    30ec:	9b 83       	std	Y+3, r25	; 0x03
    30ee:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK;
    30f0:	19 82       	std	Y+1, r1	; 0x01
	///Clear the flag
	TWCR->Bit.TWINT = 1;
    30f2:	e6 e5       	ldi	r30, 0x56	; 86
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	80 68       	ori	r24, 0x80	; 128
    30fa:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT  );
    30fc:	e6 e5       	ldi	r30, 0x56	; 86
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	80 78       	andi	r24, 0x80	; 128
    3104:	88 23       	and	r24, r24
    3106:	d1 f3       	breq	.-12     	; 0x30fc <I2C_SLAVE_enumReadByte+0x1c>
	if ( (TWSR&0xF8) == 0x80 )
    3108:	e1 e2       	ldi	r30, 0x21	; 33
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	88 2f       	mov	r24, r24
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	88 7f       	andi	r24, 0xF8	; 248
    3114:	90 70       	andi	r25, 0x00	; 0
    3116:	80 38       	cpi	r24, 0x80	; 128
    3118:	91 05       	cpc	r25, r1
    311a:	41 f4       	brne	.+16     	; 0x312c <I2C_SLAVE_enumReadByte+0x4c>
	{
		State = OK ;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	89 83       	std	Y+1, r24	; 0x01
		/* Reading the Data from the Bus */
		*Copy_u8Data = TWDR ;
    3120:	e3 e2       	ldi	r30, 0x23	; 35
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	ea 81       	ldd	r30, Y+2	; 0x02
    3128:	fb 81       	ldd	r31, Y+3	; 0x03
    312a:	80 83       	st	Z, r24
	}
	return State;
    312c:	89 81       	ldd	r24, Y+1	; 0x01
}
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <DIO_SetPinValue>:
#include"DIO_private.h"



DIO_ErrorStatus DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	28 97       	sbiw	r28, 0x08	; 8
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	8a 83       	std	Y+2, r24	; 0x02
    3150:	6b 83       	std	Y+3, r22	; 0x03
    3152:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
		if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	84 30       	cpi	r24, 0x04	; 4
    315c:	08 f0       	brcs	.+2      	; 0x3160 <DIO_SetPinValue+0x26>
    315e:	f1 c0       	rjmp	.+482    	; 0x3342 <DIO_SetPinValue+0x208>
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	88 30       	cpi	r24, 0x08	; 8
    3164:	08 f0       	brcs	.+2      	; 0x3168 <DIO_SetPinValue+0x2e>
    3166:	ed c0       	rjmp	.+474    	; 0x3342 <DIO_SetPinValue+0x208>
		{
			if (u8PinValCopy == HIGH)
    3168:	8c 81       	ldd	r24, Y+4	; 0x04
    316a:	81 30       	cpi	r24, 0x01	; 1
    316c:	09 f0       	breq	.+2      	; 0x3170 <DIO_SetPinValue+0x36>
    316e:	6f c0       	rjmp	.+222    	; 0x324e <DIO_SetPinValue+0x114>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	28 2f       	mov	r18, r24
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	38 87       	std	Y+8, r19	; 0x08
    3178:	2f 83       	std	Y+7, r18	; 0x07
    317a:	8f 81       	ldd	r24, Y+7	; 0x07
    317c:	98 85       	ldd	r25, Y+8	; 0x08
    317e:	81 30       	cpi	r24, 0x01	; 1
    3180:	91 05       	cpc	r25, r1
    3182:	49 f1       	breq	.+82     	; 0x31d6 <DIO_SetPinValue+0x9c>
    3184:	2f 81       	ldd	r18, Y+7	; 0x07
    3186:	38 85       	ldd	r19, Y+8	; 0x08
    3188:	22 30       	cpi	r18, 0x02	; 2
    318a:	31 05       	cpc	r19, r1
    318c:	2c f4       	brge	.+10     	; 0x3198 <DIO_SetPinValue+0x5e>
    318e:	8f 81       	ldd	r24, Y+7	; 0x07
    3190:	98 85       	ldd	r25, Y+8	; 0x08
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	61 f0       	breq	.+24     	; 0x31ae <DIO_SetPinValue+0x74>
    3196:	d6 c0       	rjmp	.+428    	; 0x3344 <DIO_SetPinValue+0x20a>
    3198:	2f 81       	ldd	r18, Y+7	; 0x07
    319a:	38 85       	ldd	r19, Y+8	; 0x08
    319c:	22 30       	cpi	r18, 0x02	; 2
    319e:	31 05       	cpc	r19, r1
    31a0:	71 f1       	breq	.+92     	; 0x31fe <DIO_SetPinValue+0xc4>
    31a2:	8f 81       	ldd	r24, Y+7	; 0x07
    31a4:	98 85       	ldd	r25, Y+8	; 0x08
    31a6:	83 30       	cpi	r24, 0x03	; 3
    31a8:	91 05       	cpc	r25, r1
    31aa:	e9 f1       	breq	.+122    	; 0x3226 <DIO_SetPinValue+0xec>
    31ac:	cb c0       	rjmp	.+406    	; 0x3344 <DIO_SetPinValue+0x20a>
				{
					case PORTA: SET_BIT(PORTA_REG,u8PinIdCopy); break;
    31ae:	ab e3       	ldi	r26, 0x3B	; 59
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	eb e3       	ldi	r30, 0x3B	; 59
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	48 2f       	mov	r20, r24
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	02 2e       	mov	r0, r18
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <DIO_SetPinValue+0x92>
    31c8:	88 0f       	add	r24, r24
    31ca:	99 1f       	adc	r25, r25
    31cc:	0a 94       	dec	r0
    31ce:	e2 f7       	brpl	.-8      	; 0x31c8 <DIO_SetPinValue+0x8e>
    31d0:	84 2b       	or	r24, r20
    31d2:	8c 93       	st	X, r24
    31d4:	b7 c0       	rjmp	.+366    	; 0x3344 <DIO_SetPinValue+0x20a>
					case PORTB: SET_BIT(PORTB_REG,u8PinIdCopy); break;
    31d6:	a8 e3       	ldi	r26, 0x38	; 56
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	e8 e3       	ldi	r30, 0x38	; 56
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	48 2f       	mov	r20, r24
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	28 2f       	mov	r18, r24
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	02 2e       	mov	r0, r18
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <DIO_SetPinValue+0xba>
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	0a 94       	dec	r0
    31f6:	e2 f7       	brpl	.-8      	; 0x31f0 <DIO_SetPinValue+0xb6>
    31f8:	84 2b       	or	r24, r20
    31fa:	8c 93       	st	X, r24
    31fc:	a3 c0       	rjmp	.+326    	; 0x3344 <DIO_SetPinValue+0x20a>
					case PORTC: SET_BIT(PORTC_REG,u8PinIdCopy); break;
    31fe:	a5 e3       	ldi	r26, 0x35	; 53
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	e5 e3       	ldi	r30, 0x35	; 53
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	48 2f       	mov	r20, r24
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	28 2f       	mov	r18, r24
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	02 2e       	mov	r0, r18
    3216:	02 c0       	rjmp	.+4      	; 0x321c <DIO_SetPinValue+0xe2>
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	0a 94       	dec	r0
    321e:	e2 f7       	brpl	.-8      	; 0x3218 <DIO_SetPinValue+0xde>
    3220:	84 2b       	or	r24, r20
    3222:	8c 93       	st	X, r24
    3224:	8f c0       	rjmp	.+286    	; 0x3344 <DIO_SetPinValue+0x20a>
					case PORTD: SET_BIT(PORTD_REG,u8PinIdCopy); break;
    3226:	a2 e3       	ldi	r26, 0x32	; 50
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	e2 e3       	ldi	r30, 0x32	; 50
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	48 2f       	mov	r20, r24
    3232:	8b 81       	ldd	r24, Y+3	; 0x03
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	02 2e       	mov	r0, r18
    323e:	02 c0       	rjmp	.+4      	; 0x3244 <DIO_SetPinValue+0x10a>
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	0a 94       	dec	r0
    3246:	e2 f7       	brpl	.-8      	; 0x3240 <DIO_SetPinValue+0x106>
    3248:	84 2b       	or	r24, r20
    324a:	8c 93       	st	X, r24
    324c:	7b c0       	rjmp	.+246    	; 0x3344 <DIO_SetPinValue+0x20a>
				}

			}

			else if (u8PinValCopy == LOW)
    324e:	8c 81       	ldd	r24, Y+4	; 0x04
    3250:	88 23       	and	r24, r24
    3252:	09 f0       	breq	.+2      	; 0x3256 <DIO_SetPinValue+0x11c>
    3254:	74 c0       	rjmp	.+232    	; 0x333e <DIO_SetPinValue+0x204>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    3256:	8a 81       	ldd	r24, Y+2	; 0x02
    3258:	28 2f       	mov	r18, r24
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	3e 83       	std	Y+6, r19	; 0x06
    325e:	2d 83       	std	Y+5, r18	; 0x05
    3260:	8d 81       	ldd	r24, Y+5	; 0x05
    3262:	9e 81       	ldd	r25, Y+6	; 0x06
    3264:	81 30       	cpi	r24, 0x01	; 1
    3266:	91 05       	cpc	r25, r1
    3268:	59 f1       	breq	.+86     	; 0x32c0 <DIO_SetPinValue+0x186>
    326a:	2d 81       	ldd	r18, Y+5	; 0x05
    326c:	3e 81       	ldd	r19, Y+6	; 0x06
    326e:	22 30       	cpi	r18, 0x02	; 2
    3270:	31 05       	cpc	r19, r1
    3272:	2c f4       	brge	.+10     	; 0x327e <DIO_SetPinValue+0x144>
    3274:	8d 81       	ldd	r24, Y+5	; 0x05
    3276:	9e 81       	ldd	r25, Y+6	; 0x06
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	69 f0       	breq	.+26     	; 0x3296 <DIO_SetPinValue+0x15c>
    327c:	63 c0       	rjmp	.+198    	; 0x3344 <DIO_SetPinValue+0x20a>
    327e:	2d 81       	ldd	r18, Y+5	; 0x05
    3280:	3e 81       	ldd	r19, Y+6	; 0x06
    3282:	22 30       	cpi	r18, 0x02	; 2
    3284:	31 05       	cpc	r19, r1
    3286:	89 f1       	breq	.+98     	; 0x32ea <DIO_SetPinValue+0x1b0>
    3288:	8d 81       	ldd	r24, Y+5	; 0x05
    328a:	9e 81       	ldd	r25, Y+6	; 0x06
    328c:	83 30       	cpi	r24, 0x03	; 3
    328e:	91 05       	cpc	r25, r1
    3290:	09 f4       	brne	.+2      	; 0x3294 <DIO_SetPinValue+0x15a>
    3292:	40 c0       	rjmp	.+128    	; 0x3314 <DIO_SetPinValue+0x1da>
    3294:	57 c0       	rjmp	.+174    	; 0x3344 <DIO_SetPinValue+0x20a>
				{
					case PORTA: CLR_BIT(PORTA_REG,u8PinIdCopy); break;
    3296:	ab e3       	ldi	r26, 0x3B	; 59
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	eb e3       	ldi	r30, 0x3B	; 59
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	48 2f       	mov	r20, r24
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	28 2f       	mov	r18, r24
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	02 2e       	mov	r0, r18
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <DIO_SetPinValue+0x17a>
    32b0:	88 0f       	add	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	0a 94       	dec	r0
    32b6:	e2 f7       	brpl	.-8      	; 0x32b0 <DIO_SetPinValue+0x176>
    32b8:	80 95       	com	r24
    32ba:	84 23       	and	r24, r20
    32bc:	8c 93       	st	X, r24
    32be:	42 c0       	rjmp	.+132    	; 0x3344 <DIO_SetPinValue+0x20a>
					case PORTB: CLR_BIT(PORTB_REG,u8PinIdCopy); break;
    32c0:	a8 e3       	ldi	r26, 0x38	; 56
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	e8 e3       	ldi	r30, 0x38	; 56
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	80 81       	ld	r24, Z
    32ca:	48 2f       	mov	r20, r24
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	02 2e       	mov	r0, r18
    32d8:	02 c0       	rjmp	.+4      	; 0x32de <DIO_SetPinValue+0x1a4>
    32da:	88 0f       	add	r24, r24
    32dc:	99 1f       	adc	r25, r25
    32de:	0a 94       	dec	r0
    32e0:	e2 f7       	brpl	.-8      	; 0x32da <DIO_SetPinValue+0x1a0>
    32e2:	80 95       	com	r24
    32e4:	84 23       	and	r24, r20
    32e6:	8c 93       	st	X, r24
    32e8:	2d c0       	rjmp	.+90     	; 0x3344 <DIO_SetPinValue+0x20a>
					case PORTC: CLR_BIT(PORTC_REG,u8PinIdCopy); break;
    32ea:	a5 e3       	ldi	r26, 0x35	; 53
    32ec:	b0 e0       	ldi	r27, 0x00	; 0
    32ee:	e5 e3       	ldi	r30, 0x35	; 53
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	48 2f       	mov	r20, r24
    32f6:	8b 81       	ldd	r24, Y+3	; 0x03
    32f8:	28 2f       	mov	r18, r24
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	02 2e       	mov	r0, r18
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <DIO_SetPinValue+0x1ce>
    3304:	88 0f       	add	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	0a 94       	dec	r0
    330a:	e2 f7       	brpl	.-8      	; 0x3304 <DIO_SetPinValue+0x1ca>
    330c:	80 95       	com	r24
    330e:	84 23       	and	r24, r20
    3310:	8c 93       	st	X, r24
    3312:	18 c0       	rjmp	.+48     	; 0x3344 <DIO_SetPinValue+0x20a>
					case PORTD: CLR_BIT(PORTD_REG,u8PinIdCopy); break;
    3314:	a2 e3       	ldi	r26, 0x32	; 50
    3316:	b0 e0       	ldi	r27, 0x00	; 0
    3318:	e2 e3       	ldi	r30, 0x32	; 50
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	80 81       	ld	r24, Z
    331e:	48 2f       	mov	r20, r24
    3320:	8b 81       	ldd	r24, Y+3	; 0x03
    3322:	28 2f       	mov	r18, r24
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	02 2e       	mov	r0, r18
    332c:	02 c0       	rjmp	.+4      	; 0x3332 <DIO_SetPinValue+0x1f8>
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	0a 94       	dec	r0
    3334:	e2 f7       	brpl	.-8      	; 0x332e <DIO_SetPinValue+0x1f4>
    3336:	80 95       	com	r24
    3338:	84 23       	and	r24, r20
    333a:	8c 93       	st	X, r24
    333c:	03 c0       	rjmp	.+6      	; 0x3344 <DIO_SetPinValue+0x20a>
				}
			}

			else
			{
				LOC_enumState = DIO_NOK ;
    333e:	19 82       	std	Y+1, r1	; 0x01
    3340:	01 c0       	rjmp	.+2      	; 0x3344 <DIO_SetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    3342:	19 82       	std	Y+1, r1	; 0x01
		}
     return LOC_enumState;
    3344:	89 81       	ldd	r24, Y+1	; 0x01
}
    3346:	28 96       	adiw	r28, 0x08	; 8
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	08 95       	ret

00003358 <DIO_TOGPinValue>:

DIO_ErrorStatus DIO_TOGPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	28 97       	sbiw	r28, 0x08	; 8
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	8a 83       	std	Y+2, r24	; 0x02
    336e:	6b 83       	std	Y+3, r22	; 0x03
    3370:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
		if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    3376:	8a 81       	ldd	r24, Y+2	; 0x02
    3378:	84 30       	cpi	r24, 0x04	; 4
    337a:	08 f0       	brcs	.+2      	; 0x337e <DIO_TOGPinValue+0x26>
    337c:	f1 c0       	rjmp	.+482    	; 0x3560 <DIO_TOGPinValue+0x208>
    337e:	8b 81       	ldd	r24, Y+3	; 0x03
    3380:	88 30       	cpi	r24, 0x08	; 8
    3382:	08 f0       	brcs	.+2      	; 0x3386 <DIO_TOGPinValue+0x2e>
    3384:	ed c0       	rjmp	.+474    	; 0x3560 <DIO_TOGPinValue+0x208>
		{
			if (u8PinValCopy == HIGH)
    3386:	8c 81       	ldd	r24, Y+4	; 0x04
    3388:	81 30       	cpi	r24, 0x01	; 1
    338a:	09 f0       	breq	.+2      	; 0x338e <DIO_TOGPinValue+0x36>
    338c:	74 c0       	rjmp	.+232    	; 0x3476 <DIO_TOGPinValue+0x11e>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	38 87       	std	Y+8, r19	; 0x08
    3396:	2f 83       	std	Y+7, r18	; 0x07
    3398:	8f 81       	ldd	r24, Y+7	; 0x07
    339a:	98 85       	ldd	r25, Y+8	; 0x08
    339c:	81 30       	cpi	r24, 0x01	; 1
    339e:	91 05       	cpc	r25, r1
    33a0:	59 f1       	breq	.+86     	; 0x33f8 <DIO_TOGPinValue+0xa0>
    33a2:	2f 81       	ldd	r18, Y+7	; 0x07
    33a4:	38 85       	ldd	r19, Y+8	; 0x08
    33a6:	22 30       	cpi	r18, 0x02	; 2
    33a8:	31 05       	cpc	r19, r1
    33aa:	2c f4       	brge	.+10     	; 0x33b6 <DIO_TOGPinValue+0x5e>
    33ac:	8f 81       	ldd	r24, Y+7	; 0x07
    33ae:	98 85       	ldd	r25, Y+8	; 0x08
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	69 f0       	breq	.+26     	; 0x33ce <DIO_TOGPinValue+0x76>
    33b4:	d6 c0       	rjmp	.+428    	; 0x3562 <DIO_TOGPinValue+0x20a>
    33b6:	2f 81       	ldd	r18, Y+7	; 0x07
    33b8:	38 85       	ldd	r19, Y+8	; 0x08
    33ba:	22 30       	cpi	r18, 0x02	; 2
    33bc:	31 05       	cpc	r19, r1
    33be:	89 f1       	breq	.+98     	; 0x3422 <DIO_TOGPinValue+0xca>
    33c0:	8f 81       	ldd	r24, Y+7	; 0x07
    33c2:	98 85       	ldd	r25, Y+8	; 0x08
    33c4:	83 30       	cpi	r24, 0x03	; 3
    33c6:	91 05       	cpc	r25, r1
    33c8:	09 f4       	brne	.+2      	; 0x33cc <DIO_TOGPinValue+0x74>
    33ca:	40 c0       	rjmp	.+128    	; 0x344c <DIO_TOGPinValue+0xf4>
    33cc:	ca c0       	rjmp	.+404    	; 0x3562 <DIO_TOGPinValue+0x20a>
				{
					case PORTA: CLR_BIT(PORTA_REG,u8PinIdCopy); break;
    33ce:	ab e3       	ldi	r26, 0x3B	; 59
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	eb e3       	ldi	r30, 0x3B	; 59
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	80 81       	ld	r24, Z
    33d8:	48 2f       	mov	r20, r24
    33da:	8b 81       	ldd	r24, Y+3	; 0x03
    33dc:	28 2f       	mov	r18, r24
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	02 2e       	mov	r0, r18
    33e6:	02 c0       	rjmp	.+4      	; 0x33ec <DIO_TOGPinValue+0x94>
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	0a 94       	dec	r0
    33ee:	e2 f7       	brpl	.-8      	; 0x33e8 <DIO_TOGPinValue+0x90>
    33f0:	80 95       	com	r24
    33f2:	84 23       	and	r24, r20
    33f4:	8c 93       	st	X, r24
    33f6:	b5 c0       	rjmp	.+362    	; 0x3562 <DIO_TOGPinValue+0x20a>
					case PORTB: CLR_BIT(PORTB_REG,u8PinIdCopy); break;
    33f8:	a8 e3       	ldi	r26, 0x38	; 56
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	e8 e3       	ldi	r30, 0x38	; 56
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	48 2f       	mov	r20, r24
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	28 2f       	mov	r18, r24
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	02 2e       	mov	r0, r18
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <DIO_TOGPinValue+0xbe>
    3412:	88 0f       	add	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	0a 94       	dec	r0
    3418:	e2 f7       	brpl	.-8      	; 0x3412 <DIO_TOGPinValue+0xba>
    341a:	80 95       	com	r24
    341c:	84 23       	and	r24, r20
    341e:	8c 93       	st	X, r24
    3420:	a0 c0       	rjmp	.+320    	; 0x3562 <DIO_TOGPinValue+0x20a>
					case PORTC: CLR_BIT(PORTC_REG,u8PinIdCopy); break;
    3422:	a5 e3       	ldi	r26, 0x35	; 53
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	e5 e3       	ldi	r30, 0x35	; 53
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	48 2f       	mov	r20, r24
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	28 2f       	mov	r18, r24
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	02 2e       	mov	r0, r18
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <DIO_TOGPinValue+0xe8>
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	0a 94       	dec	r0
    3442:	e2 f7       	brpl	.-8      	; 0x343c <DIO_TOGPinValue+0xe4>
    3444:	80 95       	com	r24
    3446:	84 23       	and	r24, r20
    3448:	8c 93       	st	X, r24
    344a:	8b c0       	rjmp	.+278    	; 0x3562 <DIO_TOGPinValue+0x20a>
					case PORTD: CLR_BIT(PORTD_REG,u8PinIdCopy); break;
    344c:	a2 e3       	ldi	r26, 0x32	; 50
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	e2 e3       	ldi	r30, 0x32	; 50
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	48 2f       	mov	r20, r24
    3458:	8b 81       	ldd	r24, Y+3	; 0x03
    345a:	28 2f       	mov	r18, r24
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	02 2e       	mov	r0, r18
    3464:	02 c0       	rjmp	.+4      	; 0x346a <DIO_TOGPinValue+0x112>
    3466:	88 0f       	add	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	0a 94       	dec	r0
    346c:	e2 f7       	brpl	.-8      	; 0x3466 <DIO_TOGPinValue+0x10e>
    346e:	80 95       	com	r24
    3470:	84 23       	and	r24, r20
    3472:	8c 93       	st	X, r24
    3474:	76 c0       	rjmp	.+236    	; 0x3562 <DIO_TOGPinValue+0x20a>
				}

			}

			else if (u8PinValCopy == LOW)
    3476:	8c 81       	ldd	r24, Y+4	; 0x04
    3478:	88 23       	and	r24, r24
    347a:	09 f0       	breq	.+2      	; 0x347e <DIO_TOGPinValue+0x126>
    347c:	6f c0       	rjmp	.+222    	; 0x355c <DIO_TOGPinValue+0x204>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	28 2f       	mov	r18, r24
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	3e 83       	std	Y+6, r19	; 0x06
    3486:	2d 83       	std	Y+5, r18	; 0x05
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
    348a:	9e 81       	ldd	r25, Y+6	; 0x06
    348c:	81 30       	cpi	r24, 0x01	; 1
    348e:	91 05       	cpc	r25, r1
    3490:	49 f1       	breq	.+82     	; 0x34e4 <DIO_TOGPinValue+0x18c>
    3492:	2d 81       	ldd	r18, Y+5	; 0x05
    3494:	3e 81       	ldd	r19, Y+6	; 0x06
    3496:	22 30       	cpi	r18, 0x02	; 2
    3498:	31 05       	cpc	r19, r1
    349a:	2c f4       	brge	.+10     	; 0x34a6 <DIO_TOGPinValue+0x14e>
    349c:	8d 81       	ldd	r24, Y+5	; 0x05
    349e:	9e 81       	ldd	r25, Y+6	; 0x06
    34a0:	00 97       	sbiw	r24, 0x00	; 0
    34a2:	61 f0       	breq	.+24     	; 0x34bc <DIO_TOGPinValue+0x164>
    34a4:	5e c0       	rjmp	.+188    	; 0x3562 <DIO_TOGPinValue+0x20a>
    34a6:	2d 81       	ldd	r18, Y+5	; 0x05
    34a8:	3e 81       	ldd	r19, Y+6	; 0x06
    34aa:	22 30       	cpi	r18, 0x02	; 2
    34ac:	31 05       	cpc	r19, r1
    34ae:	71 f1       	breq	.+92     	; 0x350c <DIO_TOGPinValue+0x1b4>
    34b0:	8d 81       	ldd	r24, Y+5	; 0x05
    34b2:	9e 81       	ldd	r25, Y+6	; 0x06
    34b4:	83 30       	cpi	r24, 0x03	; 3
    34b6:	91 05       	cpc	r25, r1
    34b8:	e9 f1       	breq	.+122    	; 0x3534 <DIO_TOGPinValue+0x1dc>
    34ba:	53 c0       	rjmp	.+166    	; 0x3562 <DIO_TOGPinValue+0x20a>
				{
				case PORTA: SET_BIT(PORTA_REG,u8PinIdCopy); break;
    34bc:	ab e3       	ldi	r26, 0x3B	; 59
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	eb e3       	ldi	r30, 0x3B	; 59
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	48 2f       	mov	r20, r24
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	28 2f       	mov	r18, r24
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	02 2e       	mov	r0, r18
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <DIO_TOGPinValue+0x182>
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	0a 94       	dec	r0
    34dc:	e2 f7       	brpl	.-8      	; 0x34d6 <DIO_TOGPinValue+0x17e>
    34de:	84 2b       	or	r24, r20
    34e0:	8c 93       	st	X, r24
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <DIO_TOGPinValue+0x20a>
				case PORTB: SET_BIT(PORTB_REG,u8PinIdCopy); break;
    34e4:	a8 e3       	ldi	r26, 0x38	; 56
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	e8 e3       	ldi	r30, 0x38	; 56
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	80 81       	ld	r24, Z
    34ee:	48 2f       	mov	r20, r24
    34f0:	8b 81       	ldd	r24, Y+3	; 0x03
    34f2:	28 2f       	mov	r18, r24
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	02 2e       	mov	r0, r18
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <DIO_TOGPinValue+0x1aa>
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	0a 94       	dec	r0
    3504:	e2 f7       	brpl	.-8      	; 0x34fe <DIO_TOGPinValue+0x1a6>
    3506:	84 2b       	or	r24, r20
    3508:	8c 93       	st	X, r24
    350a:	2b c0       	rjmp	.+86     	; 0x3562 <DIO_TOGPinValue+0x20a>
				case PORTC: SET_BIT(PORTC_REG,u8PinIdCopy); break;
    350c:	a5 e3       	ldi	r26, 0x35	; 53
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	e5 e3       	ldi	r30, 0x35	; 53
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	80 81       	ld	r24, Z
    3516:	48 2f       	mov	r20, r24
    3518:	8b 81       	ldd	r24, Y+3	; 0x03
    351a:	28 2f       	mov	r18, r24
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	02 2e       	mov	r0, r18
    3524:	02 c0       	rjmp	.+4      	; 0x352a <DIO_TOGPinValue+0x1d2>
    3526:	88 0f       	add	r24, r24
    3528:	99 1f       	adc	r25, r25
    352a:	0a 94       	dec	r0
    352c:	e2 f7       	brpl	.-8      	; 0x3526 <DIO_TOGPinValue+0x1ce>
    352e:	84 2b       	or	r24, r20
    3530:	8c 93       	st	X, r24
    3532:	17 c0       	rjmp	.+46     	; 0x3562 <DIO_TOGPinValue+0x20a>
				case PORTD: SET_BIT(PORTD_REG,u8PinIdCopy); break;
    3534:	a2 e3       	ldi	r26, 0x32	; 50
    3536:	b0 e0       	ldi	r27, 0x00	; 0
    3538:	e2 e3       	ldi	r30, 0x32	; 50
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	80 81       	ld	r24, Z
    353e:	48 2f       	mov	r20, r24
    3540:	8b 81       	ldd	r24, Y+3	; 0x03
    3542:	28 2f       	mov	r18, r24
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	02 2e       	mov	r0, r18
    354c:	02 c0       	rjmp	.+4      	; 0x3552 <DIO_TOGPinValue+0x1fa>
    354e:	88 0f       	add	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	0a 94       	dec	r0
    3554:	e2 f7       	brpl	.-8      	; 0x354e <DIO_TOGPinValue+0x1f6>
    3556:	84 2b       	or	r24, r20
    3558:	8c 93       	st	X, r24
    355a:	03 c0       	rjmp	.+6      	; 0x3562 <DIO_TOGPinValue+0x20a>
				}
			}

			else
			{
				LOC_enumState = DIO_NOK ;
    355c:	19 82       	std	Y+1, r1	; 0x01
    355e:	01 c0       	rjmp	.+2      	; 0x3562 <DIO_TOGPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    3560:	19 82       	std	Y+1, r1	; 0x01
		}
     return LOC_enumState;
    3562:	89 81       	ldd	r24, Y+1	; 0x01
}
    3564:	28 96       	adiw	r28, 0x08	; 8
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	cf 91       	pop	r28
    3572:	df 91       	pop	r29
    3574:	08 95       	ret

00003576 <DIO_GetPinValue>:

DIO_ErrorStatus DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy,  u8 *u8PinVal)
{
    3576:	df 93       	push	r29
    3578:	cf 93       	push	r28
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
    357e:	27 97       	sbiw	r28, 0x07	; 7
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	8a 83       	std	Y+2, r24	; 0x02
    358c:	6b 83       	std	Y+3, r22	; 0x03
    358e:	5d 83       	std	Y+5, r21	; 0x05
    3590:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
			if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    3596:	8a 81       	ldd	r24, Y+2	; 0x02
    3598:	84 30       	cpi	r24, 0x04	; 4
    359a:	08 f0       	brcs	.+2      	; 0x359e <DIO_GetPinValue+0x28>
    359c:	75 c0       	rjmp	.+234    	; 0x3688 <DIO_GetPinValue+0x112>
    359e:	8b 81       	ldd	r24, Y+3	; 0x03
    35a0:	88 30       	cpi	r24, 0x08	; 8
    35a2:	08 f0       	brcs	.+2      	; 0x35a6 <DIO_GetPinValue+0x30>
    35a4:	71 c0       	rjmp	.+226    	; 0x3688 <DIO_GetPinValue+0x112>
			{

					/* Check on the Required PORT Number */
					switch (u8PortIdCopy)
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	28 2f       	mov	r18, r24
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	3f 83       	std	Y+7, r19	; 0x07
    35ae:	2e 83       	std	Y+6, r18	; 0x06
    35b0:	4e 81       	ldd	r20, Y+6	; 0x06
    35b2:	5f 81       	ldd	r21, Y+7	; 0x07
    35b4:	41 30       	cpi	r20, 0x01	; 1
    35b6:	51 05       	cpc	r21, r1
    35b8:	59 f1       	breq	.+86     	; 0x3610 <DIO_GetPinValue+0x9a>
    35ba:	8e 81       	ldd	r24, Y+6	; 0x06
    35bc:	9f 81       	ldd	r25, Y+7	; 0x07
    35be:	82 30       	cpi	r24, 0x02	; 2
    35c0:	91 05       	cpc	r25, r1
    35c2:	34 f4       	brge	.+12     	; 0x35d0 <DIO_GetPinValue+0x5a>
    35c4:	2e 81       	ldd	r18, Y+6	; 0x06
    35c6:	3f 81       	ldd	r19, Y+7	; 0x07
    35c8:	21 15       	cp	r18, r1
    35ca:	31 05       	cpc	r19, r1
    35cc:	69 f0       	breq	.+26     	; 0x35e8 <DIO_GetPinValue+0x72>
    35ce:	5d c0       	rjmp	.+186    	; 0x368a <DIO_GetPinValue+0x114>
    35d0:	4e 81       	ldd	r20, Y+6	; 0x06
    35d2:	5f 81       	ldd	r21, Y+7	; 0x07
    35d4:	42 30       	cpi	r20, 0x02	; 2
    35d6:	51 05       	cpc	r21, r1
    35d8:	79 f1       	breq	.+94     	; 0x3638 <DIO_GetPinValue+0xc2>
    35da:	8e 81       	ldd	r24, Y+6	; 0x06
    35dc:	9f 81       	ldd	r25, Y+7	; 0x07
    35de:	83 30       	cpi	r24, 0x03	; 3
    35e0:	91 05       	cpc	r25, r1
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <DIO_GetPinValue+0x70>
    35e4:	3d c0       	rjmp	.+122    	; 0x3660 <DIO_GetPinValue+0xea>
    35e6:	51 c0       	rjmp	.+162    	; 0x368a <DIO_GetPinValue+0x114>
					{
						case PORTA:*u8PinVal= GET_BIT(PINA_REG,u8PinIdCopy); break;
    35e8:	e9 e3       	ldi	r30, 0x39	; 57
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	80 81       	ld	r24, Z
    35ee:	28 2f       	mov	r18, r24
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	88 2f       	mov	r24, r24
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	a9 01       	movw	r20, r18
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <DIO_GetPinValue+0x8a>
    35fc:	55 95       	asr	r21
    35fe:	47 95       	ror	r20
    3600:	8a 95       	dec	r24
    3602:	e2 f7       	brpl	.-8      	; 0x35fc <DIO_GetPinValue+0x86>
    3604:	ca 01       	movw	r24, r20
    3606:	81 70       	andi	r24, 0x01	; 1
    3608:	ec 81       	ldd	r30, Y+4	; 0x04
    360a:	fd 81       	ldd	r31, Y+5	; 0x05
    360c:	80 83       	st	Z, r24
    360e:	3d c0       	rjmp	.+122    	; 0x368a <DIO_GetPinValue+0x114>
						case PORTB:*u8PinVal= GET_BIT(PINB_REG,u8PinIdCopy); break;
    3610:	e6 e3       	ldi	r30, 0x36	; 54
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	80 81       	ld	r24, Z
    3616:	28 2f       	mov	r18, r24
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	8b 81       	ldd	r24, Y+3	; 0x03
    361c:	88 2f       	mov	r24, r24
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	a9 01       	movw	r20, r18
    3622:	02 c0       	rjmp	.+4      	; 0x3628 <DIO_GetPinValue+0xb2>
    3624:	55 95       	asr	r21
    3626:	47 95       	ror	r20
    3628:	8a 95       	dec	r24
    362a:	e2 f7       	brpl	.-8      	; 0x3624 <DIO_GetPinValue+0xae>
    362c:	ca 01       	movw	r24, r20
    362e:	81 70       	andi	r24, 0x01	; 1
    3630:	ec 81       	ldd	r30, Y+4	; 0x04
    3632:	fd 81       	ldd	r31, Y+5	; 0x05
    3634:	80 83       	st	Z, r24
    3636:	29 c0       	rjmp	.+82     	; 0x368a <DIO_GetPinValue+0x114>
						case PORTC:*u8PinVal= GET_BIT(PINC_REG,u8PinIdCopy); break;
    3638:	e3 e3       	ldi	r30, 0x33	; 51
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	28 2f       	mov	r18, r24
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	88 2f       	mov	r24, r24
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	a9 01       	movw	r20, r18
    364a:	02 c0       	rjmp	.+4      	; 0x3650 <DIO_GetPinValue+0xda>
    364c:	55 95       	asr	r21
    364e:	47 95       	ror	r20
    3650:	8a 95       	dec	r24
    3652:	e2 f7       	brpl	.-8      	; 0x364c <DIO_GetPinValue+0xd6>
    3654:	ca 01       	movw	r24, r20
    3656:	81 70       	andi	r24, 0x01	; 1
    3658:	ec 81       	ldd	r30, Y+4	; 0x04
    365a:	fd 81       	ldd	r31, Y+5	; 0x05
    365c:	80 83       	st	Z, r24
    365e:	15 c0       	rjmp	.+42     	; 0x368a <DIO_GetPinValue+0x114>
						case PORTD:*u8PinVal= GET_BIT(PIND_REG,u8PinIdCopy); break;
    3660:	e0 e3       	ldi	r30, 0x30	; 48
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	80 81       	ld	r24, Z
    3666:	28 2f       	mov	r18, r24
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	8b 81       	ldd	r24, Y+3	; 0x03
    366c:	88 2f       	mov	r24, r24
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	a9 01       	movw	r20, r18
    3672:	02 c0       	rjmp	.+4      	; 0x3678 <DIO_GetPinValue+0x102>
    3674:	55 95       	asr	r21
    3676:	47 95       	ror	r20
    3678:	8a 95       	dec	r24
    367a:	e2 f7       	brpl	.-8      	; 0x3674 <DIO_GetPinValue+0xfe>
    367c:	ca 01       	movw	r24, r20
    367e:	81 70       	andi	r24, 0x01	; 1
    3680:	ec 81       	ldd	r30, Y+4	; 0x04
    3682:	fd 81       	ldd	r31, Y+5	; 0x05
    3684:	80 83       	st	Z, r24
    3686:	01 c0       	rjmp	.+2      	; 0x368a <DIO_GetPinValue+0x114>

			}

			else
				{
				LOC_enumState = DIO_NOK ;
    3688:	19 82       	std	Y+1, r1	; 0x01
				}

				return LOC_enumState;
    368a:	89 81       	ldd	r24, Y+1	; 0x01

}
    368c:	27 96       	adiw	r28, 0x07	; 7
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	08 95       	ret

0000369e <DIO_SetPinDirection>:

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
    369e:	df 93       	push	r29
    36a0:	cf 93       	push	r28
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	28 97       	sbiw	r28, 0x08	; 8
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	8a 83       	std	Y+2, r24	; 0x02
    36b4:	6b 83       	std	Y+3, r22	; 0x03
    36b6:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
		if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	84 30       	cpi	r24, 0x04	; 4
    36c0:	08 f0       	brcs	.+2      	; 0x36c4 <DIO_SetPinDirection+0x26>
    36c2:	f2 c0       	rjmp	.+484    	; 0x38a8 <DIO_SetPinDirection+0x20a>
    36c4:	8b 81       	ldd	r24, Y+3	; 0x03
    36c6:	88 30       	cpi	r24, 0x08	; 8
    36c8:	08 f0       	brcs	.+2      	; 0x36cc <DIO_SetPinDirection+0x2e>
    36ca:	ee c0       	rjmp	.+476    	; 0x38a8 <DIO_SetPinDirection+0x20a>
		{
			if ( u8PinDirCopy == OUTPUT )
    36cc:	8c 81       	ldd	r24, Y+4	; 0x04
    36ce:	81 30       	cpi	r24, 0x01	; 1
    36d0:	09 f0       	breq	.+2      	; 0x36d4 <DIO_SetPinDirection+0x36>
    36d2:	6f c0       	rjmp	.+222    	; 0x37b2 <DIO_SetPinDirection+0x114>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    36d4:	8a 81       	ldd	r24, Y+2	; 0x02
    36d6:	28 2f       	mov	r18, r24
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	38 87       	std	Y+8, r19	; 0x08
    36dc:	2f 83       	std	Y+7, r18	; 0x07
    36de:	8f 81       	ldd	r24, Y+7	; 0x07
    36e0:	98 85       	ldd	r25, Y+8	; 0x08
    36e2:	81 30       	cpi	r24, 0x01	; 1
    36e4:	91 05       	cpc	r25, r1
    36e6:	49 f1       	breq	.+82     	; 0x373a <DIO_SetPinDirection+0x9c>
    36e8:	2f 81       	ldd	r18, Y+7	; 0x07
    36ea:	38 85       	ldd	r19, Y+8	; 0x08
    36ec:	22 30       	cpi	r18, 0x02	; 2
    36ee:	31 05       	cpc	r19, r1
    36f0:	2c f4       	brge	.+10     	; 0x36fc <DIO_SetPinDirection+0x5e>
    36f2:	8f 81       	ldd	r24, Y+7	; 0x07
    36f4:	98 85       	ldd	r25, Y+8	; 0x08
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	61 f0       	breq	.+24     	; 0x3712 <DIO_SetPinDirection+0x74>
    36fa:	d7 c0       	rjmp	.+430    	; 0x38aa <DIO_SetPinDirection+0x20c>
    36fc:	2f 81       	ldd	r18, Y+7	; 0x07
    36fe:	38 85       	ldd	r19, Y+8	; 0x08
    3700:	22 30       	cpi	r18, 0x02	; 2
    3702:	31 05       	cpc	r19, r1
    3704:	71 f1       	breq	.+92     	; 0x3762 <DIO_SetPinDirection+0xc4>
    3706:	8f 81       	ldd	r24, Y+7	; 0x07
    3708:	98 85       	ldd	r25, Y+8	; 0x08
    370a:	83 30       	cpi	r24, 0x03	; 3
    370c:	91 05       	cpc	r25, r1
    370e:	e9 f1       	breq	.+122    	; 0x378a <DIO_SetPinDirection+0xec>
    3710:	cc c0       	rjmp	.+408    	; 0x38aa <DIO_SetPinDirection+0x20c>
				{
					case PORTA: SET_BIT(DDRA_REG,u8PinIdCopy); break;
    3712:	aa e3       	ldi	r26, 0x3A	; 58
    3714:	b0 e0       	ldi	r27, 0x00	; 0
    3716:	ea e3       	ldi	r30, 0x3A	; 58
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	80 81       	ld	r24, Z
    371c:	48 2f       	mov	r20, r24
    371e:	8b 81       	ldd	r24, Y+3	; 0x03
    3720:	28 2f       	mov	r18, r24
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	02 2e       	mov	r0, r18
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <DIO_SetPinDirection+0x92>
    372c:	88 0f       	add	r24, r24
    372e:	99 1f       	adc	r25, r25
    3730:	0a 94       	dec	r0
    3732:	e2 f7       	brpl	.-8      	; 0x372c <DIO_SetPinDirection+0x8e>
    3734:	84 2b       	or	r24, r20
    3736:	8c 93       	st	X, r24
    3738:	b8 c0       	rjmp	.+368    	; 0x38aa <DIO_SetPinDirection+0x20c>
					case PORTB: SET_BIT(DDRB_REG,u8PinIdCopy); break;
    373a:	a7 e3       	ldi	r26, 0x37	; 55
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e7 e3       	ldi	r30, 0x37	; 55
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	48 2f       	mov	r20, r24
    3746:	8b 81       	ldd	r24, Y+3	; 0x03
    3748:	28 2f       	mov	r18, r24
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	02 2e       	mov	r0, r18
    3752:	02 c0       	rjmp	.+4      	; 0x3758 <DIO_SetPinDirection+0xba>
    3754:	88 0f       	add	r24, r24
    3756:	99 1f       	adc	r25, r25
    3758:	0a 94       	dec	r0
    375a:	e2 f7       	brpl	.-8      	; 0x3754 <DIO_SetPinDirection+0xb6>
    375c:	84 2b       	or	r24, r20
    375e:	8c 93       	st	X, r24
    3760:	a4 c0       	rjmp	.+328    	; 0x38aa <DIO_SetPinDirection+0x20c>
					case PORTC: SET_BIT(DDRC_REG,u8PinIdCopy); break;
    3762:	a4 e3       	ldi	r26, 0x34	; 52
    3764:	b0 e0       	ldi	r27, 0x00	; 0
    3766:	e4 e3       	ldi	r30, 0x34	; 52
    3768:	f0 e0       	ldi	r31, 0x00	; 0
    376a:	80 81       	ld	r24, Z
    376c:	48 2f       	mov	r20, r24
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	28 2f       	mov	r18, r24
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	02 2e       	mov	r0, r18
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <DIO_SetPinDirection+0xe2>
    377c:	88 0f       	add	r24, r24
    377e:	99 1f       	adc	r25, r25
    3780:	0a 94       	dec	r0
    3782:	e2 f7       	brpl	.-8      	; 0x377c <DIO_SetPinDirection+0xde>
    3784:	84 2b       	or	r24, r20
    3786:	8c 93       	st	X, r24
    3788:	90 c0       	rjmp	.+288    	; 0x38aa <DIO_SetPinDirection+0x20c>
					case PORTD: SET_BIT(DDRD_REG,u8PinIdCopy); break;
    378a:	a1 e3       	ldi	r26, 0x31	; 49
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	e1 e3       	ldi	r30, 0x31	; 49
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	80 81       	ld	r24, Z
    3794:	48 2f       	mov	r20, r24
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	28 2f       	mov	r18, r24
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	02 2e       	mov	r0, r18
    37a2:	02 c0       	rjmp	.+4      	; 0x37a8 <DIO_SetPinDirection+0x10a>
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	0a 94       	dec	r0
    37aa:	e2 f7       	brpl	.-8      	; 0x37a4 <DIO_SetPinDirection+0x106>
    37ac:	84 2b       	or	r24, r20
    37ae:	8c 93       	st	X, r24
    37b0:	7c c0       	rjmp	.+248    	; 0x38aa <DIO_SetPinDirection+0x20c>
				}
			}

			else if ( u8PinDirCopy == INPUT )
    37b2:	8c 81       	ldd	r24, Y+4	; 0x04
    37b4:	88 23       	and	r24, r24
    37b6:	09 f0       	breq	.+2      	; 0x37ba <DIO_SetPinDirection+0x11c>
    37b8:	74 c0       	rjmp	.+232    	; 0x38a2 <DIO_SetPinDirection+0x204>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    37ba:	8a 81       	ldd	r24, Y+2	; 0x02
    37bc:	28 2f       	mov	r18, r24
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	3e 83       	std	Y+6, r19	; 0x06
    37c2:	2d 83       	std	Y+5, r18	; 0x05
    37c4:	8d 81       	ldd	r24, Y+5	; 0x05
    37c6:	9e 81       	ldd	r25, Y+6	; 0x06
    37c8:	81 30       	cpi	r24, 0x01	; 1
    37ca:	91 05       	cpc	r25, r1
    37cc:	59 f1       	breq	.+86     	; 0x3824 <DIO_SetPinDirection+0x186>
    37ce:	2d 81       	ldd	r18, Y+5	; 0x05
    37d0:	3e 81       	ldd	r19, Y+6	; 0x06
    37d2:	22 30       	cpi	r18, 0x02	; 2
    37d4:	31 05       	cpc	r19, r1
    37d6:	2c f4       	brge	.+10     	; 0x37e2 <DIO_SetPinDirection+0x144>
    37d8:	8d 81       	ldd	r24, Y+5	; 0x05
    37da:	9e 81       	ldd	r25, Y+6	; 0x06
    37dc:	00 97       	sbiw	r24, 0x00	; 0
    37de:	69 f0       	breq	.+26     	; 0x37fa <DIO_SetPinDirection+0x15c>
    37e0:	64 c0       	rjmp	.+200    	; 0x38aa <DIO_SetPinDirection+0x20c>
    37e2:	2d 81       	ldd	r18, Y+5	; 0x05
    37e4:	3e 81       	ldd	r19, Y+6	; 0x06
    37e6:	22 30       	cpi	r18, 0x02	; 2
    37e8:	31 05       	cpc	r19, r1
    37ea:	89 f1       	breq	.+98     	; 0x384e <DIO_SetPinDirection+0x1b0>
    37ec:	8d 81       	ldd	r24, Y+5	; 0x05
    37ee:	9e 81       	ldd	r25, Y+6	; 0x06
    37f0:	83 30       	cpi	r24, 0x03	; 3
    37f2:	91 05       	cpc	r25, r1
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <DIO_SetPinDirection+0x15a>
    37f6:	40 c0       	rjmp	.+128    	; 0x3878 <DIO_SetPinDirection+0x1da>
    37f8:	58 c0       	rjmp	.+176    	; 0x38aa <DIO_SetPinDirection+0x20c>
				{
					case PORTA: CLR_BIT(DDRA_REG,u8PinIdCopy); break;
    37fa:	aa e3       	ldi	r26, 0x3A	; 58
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	ea e3       	ldi	r30, 0x3A	; 58
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	48 2f       	mov	r20, r24
    3806:	8b 81       	ldd	r24, Y+3	; 0x03
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	02 2e       	mov	r0, r18
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <DIO_SetPinDirection+0x17a>
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	0a 94       	dec	r0
    381a:	e2 f7       	brpl	.-8      	; 0x3814 <DIO_SetPinDirection+0x176>
    381c:	80 95       	com	r24
    381e:	84 23       	and	r24, r20
    3820:	8c 93       	st	X, r24
    3822:	43 c0       	rjmp	.+134    	; 0x38aa <DIO_SetPinDirection+0x20c>
					case PORTB: CLR_BIT(DDRB_REG,u8PinIdCopy); break;
    3824:	a7 e3       	ldi	r26, 0x37	; 55
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	e7 e3       	ldi	r30, 0x37	; 55
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	48 2f       	mov	r20, r24
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	28 2f       	mov	r18, r24
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	02 2e       	mov	r0, r18
    383c:	02 c0       	rjmp	.+4      	; 0x3842 <DIO_SetPinDirection+0x1a4>
    383e:	88 0f       	add	r24, r24
    3840:	99 1f       	adc	r25, r25
    3842:	0a 94       	dec	r0
    3844:	e2 f7       	brpl	.-8      	; 0x383e <DIO_SetPinDirection+0x1a0>
    3846:	80 95       	com	r24
    3848:	84 23       	and	r24, r20
    384a:	8c 93       	st	X, r24
    384c:	2e c0       	rjmp	.+92     	; 0x38aa <DIO_SetPinDirection+0x20c>
					case PORTC: CLR_BIT(DDRC_REG,u8PinIdCopy); break;
    384e:	a4 e3       	ldi	r26, 0x34	; 52
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	e4 e3       	ldi	r30, 0x34	; 52
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	80 81       	ld	r24, Z
    3858:	48 2f       	mov	r20, r24
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	28 2f       	mov	r18, r24
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	02 2e       	mov	r0, r18
    3866:	02 c0       	rjmp	.+4      	; 0x386c <DIO_SetPinDirection+0x1ce>
    3868:	88 0f       	add	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	0a 94       	dec	r0
    386e:	e2 f7       	brpl	.-8      	; 0x3868 <DIO_SetPinDirection+0x1ca>
    3870:	80 95       	com	r24
    3872:	84 23       	and	r24, r20
    3874:	8c 93       	st	X, r24
    3876:	19 c0       	rjmp	.+50     	; 0x38aa <DIO_SetPinDirection+0x20c>
					case PORTD: CLR_BIT(DDRD_REG,u8PinIdCopy); break;
    3878:	a1 e3       	ldi	r26, 0x31	; 49
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	e1 e3       	ldi	r30, 0x31	; 49
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	80 81       	ld	r24, Z
    3882:	48 2f       	mov	r20, r24
    3884:	8b 81       	ldd	r24, Y+3	; 0x03
    3886:	28 2f       	mov	r18, r24
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	02 2e       	mov	r0, r18
    3890:	02 c0       	rjmp	.+4      	; 0x3896 <DIO_SetPinDirection+0x1f8>
    3892:	88 0f       	add	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	0a 94       	dec	r0
    3898:	e2 f7       	brpl	.-8      	; 0x3892 <DIO_SetPinDirection+0x1f4>
    389a:	80 95       	com	r24
    389c:	84 23       	and	r24, r20
    389e:	8c 93       	st	X, r24
    38a0:	04 c0       	rjmp	.+8      	; 0x38aa <DIO_SetPinDirection+0x20c>
				}
			}

			else
			{
				LOC_enumState = DIO_OK ;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	89 83       	std	Y+1, r24	; 0x01
    38a6:	01 c0       	rjmp	.+2      	; 0x38aa <DIO_SetPinDirection+0x20c>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    38a8:	19 82       	std	Y+1, r1	; 0x01
		}
       return LOC_enumState;
    38aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    38ac:	28 96       	adiw	r28, 0x08	; 8
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	08 95       	ret

000038be <DIO_SetPortDirection>:

DIO_ErrorStatus DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    38be:	df 93       	push	r29
    38c0:	cf 93       	push	r28
    38c2:	00 d0       	rcall	.+0      	; 0x38c4 <DIO_SetPortDirection+0x6>
    38c4:	00 d0       	rcall	.+0      	; 0x38c6 <DIO_SetPortDirection+0x8>
    38c6:	0f 92       	push	r0
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
    38cc:	8a 83       	std	Y+2, r24	; 0x02
    38ce:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	89 83       	std	Y+1, r24	; 0x01
	if (( u8PortId <= PORTD) )
    38d4:	8a 81       	ldd	r24, Y+2	; 0x02
    38d6:	84 30       	cpi	r24, 0x04	; 4
    38d8:	a8 f5       	brcc	.+106    	; 0x3944 <DIO_SetPortDirection+0x86>
	{
	/* Check on the Required PORT Number */
		switch (u8PortId)
    38da:	8a 81       	ldd	r24, Y+2	; 0x02
    38dc:	28 2f       	mov	r18, r24
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	3d 83       	std	Y+5, r19	; 0x05
    38e2:	2c 83       	std	Y+4, r18	; 0x04
    38e4:	8c 81       	ldd	r24, Y+4	; 0x04
    38e6:	9d 81       	ldd	r25, Y+5	; 0x05
    38e8:	81 30       	cpi	r24, 0x01	; 1
    38ea:	91 05       	cpc	r25, r1
    38ec:	d1 f0       	breq	.+52     	; 0x3922 <DIO_SetPortDirection+0x64>
    38ee:	2c 81       	ldd	r18, Y+4	; 0x04
    38f0:	3d 81       	ldd	r19, Y+5	; 0x05
    38f2:	22 30       	cpi	r18, 0x02	; 2
    38f4:	31 05       	cpc	r19, r1
    38f6:	2c f4       	brge	.+10     	; 0x3902 <DIO_SetPortDirection+0x44>
    38f8:	8c 81       	ldd	r24, Y+4	; 0x04
    38fa:	9d 81       	ldd	r25, Y+5	; 0x05
    38fc:	00 97       	sbiw	r24, 0x00	; 0
    38fe:	61 f0       	breq	.+24     	; 0x3918 <DIO_SetPortDirection+0x5a>
    3900:	1f c0       	rjmp	.+62     	; 0x3940 <DIO_SetPortDirection+0x82>
    3902:	2c 81       	ldd	r18, Y+4	; 0x04
    3904:	3d 81       	ldd	r19, Y+5	; 0x05
    3906:	22 30       	cpi	r18, 0x02	; 2
    3908:	31 05       	cpc	r19, r1
    390a:	81 f0       	breq	.+32     	; 0x392c <DIO_SetPortDirection+0x6e>
    390c:	8c 81       	ldd	r24, Y+4	; 0x04
    390e:	9d 81       	ldd	r25, Y+5	; 0x05
    3910:	83 30       	cpi	r24, 0x03	; 3
    3912:	91 05       	cpc	r25, r1
    3914:	81 f0       	breq	.+32     	; 0x3936 <DIO_SetPortDirection+0x78>
    3916:	14 c0       	rjmp	.+40     	; 0x3940 <DIO_SetPortDirection+0x82>
		{
			case     PORTA: PORTA_REG = u8PortDir; break;
    3918:	eb e3       	ldi	r30, 0x3B	; 59
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	80 83       	st	Z, r24
    3920:	12 c0       	rjmp	.+36     	; 0x3946 <DIO_SetPortDirection+0x88>
			case     PORTB: PORTB_REG = u8PortDir; break;
    3922:	e8 e3       	ldi	r30, 0x38	; 56
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	8b 81       	ldd	r24, Y+3	; 0x03
    3928:	80 83       	st	Z, r24
    392a:	0d c0       	rjmp	.+26     	; 0x3946 <DIO_SetPortDirection+0x88>
			case     PORTC: PORTC_REG = u8PortDir; break;
    392c:	e5 e3       	ldi	r30, 0x35	; 53
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	8b 81       	ldd	r24, Y+3	; 0x03
    3932:	80 83       	st	Z, r24
    3934:	08 c0       	rjmp	.+16     	; 0x3946 <DIO_SetPortDirection+0x88>
			case     PORTD: PORTD_REG = u8PortDir; break;
    3936:	e2 e3       	ldi	r30, 0x32	; 50
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	8b 81       	ldd	r24, Y+3	; 0x03
    393c:	80 83       	st	Z, r24
    393e:	03 c0       	rjmp	.+6      	; 0x3946 <DIO_SetPortDirection+0x88>
			default: /* Wrong Port ID */  LOC_enumState = DIO_NOK ;      break;
    3940:	19 82       	std	Y+1, r1	; 0x01
    3942:	01 c0       	rjmp	.+2      	; 0x3946 <DIO_SetPortDirection+0x88>
		}
	}
	else
			{
				LOC_enumState = DIO_NOK ;
    3944:	19 82       	std	Y+1, r1	; 0x01
			}

        return LOC_enumState ;
    3946:	89 81       	ldd	r24, Y+1	; 0x01
}
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
    394e:	0f 90       	pop	r0
    3950:	0f 90       	pop	r0
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	08 95       	ret

00003958 <DIO_SetPortValue>:

DIO_ErrorStatus DIO_SetPortValue     (u8 u8PortId, u8 u8PortVal)
{
    3958:	df 93       	push	r29
    395a:	cf 93       	push	r28
    395c:	00 d0       	rcall	.+0      	; 0x395e <DIO_SetPortValue+0x6>
    395e:	00 d0       	rcall	.+0      	; 0x3960 <DIO_SetPortValue+0x8>
    3960:	0f 92       	push	r0
    3962:	cd b7       	in	r28, 0x3d	; 61
    3964:	de b7       	in	r29, 0x3e	; 62
    3966:	8a 83       	std	Y+2, r24	; 0x02
    3968:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	89 83       	std	Y+1, r24	; 0x01
	if (( u8PortId <= PORTD) )
    396e:	8a 81       	ldd	r24, Y+2	; 0x02
    3970:	84 30       	cpi	r24, 0x04	; 4
    3972:	a8 f5       	brcc	.+106    	; 0x39de <DIO_SetPortValue+0x86>
	{
	/* Check on the Required PORT Number */
		switch (u8PortId)
    3974:	8a 81       	ldd	r24, Y+2	; 0x02
    3976:	28 2f       	mov	r18, r24
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	3d 83       	std	Y+5, r19	; 0x05
    397c:	2c 83       	std	Y+4, r18	; 0x04
    397e:	8c 81       	ldd	r24, Y+4	; 0x04
    3980:	9d 81       	ldd	r25, Y+5	; 0x05
    3982:	81 30       	cpi	r24, 0x01	; 1
    3984:	91 05       	cpc	r25, r1
    3986:	d1 f0       	breq	.+52     	; 0x39bc <DIO_SetPortValue+0x64>
    3988:	2c 81       	ldd	r18, Y+4	; 0x04
    398a:	3d 81       	ldd	r19, Y+5	; 0x05
    398c:	22 30       	cpi	r18, 0x02	; 2
    398e:	31 05       	cpc	r19, r1
    3990:	2c f4       	brge	.+10     	; 0x399c <DIO_SetPortValue+0x44>
    3992:	8c 81       	ldd	r24, Y+4	; 0x04
    3994:	9d 81       	ldd	r25, Y+5	; 0x05
    3996:	00 97       	sbiw	r24, 0x00	; 0
    3998:	61 f0       	breq	.+24     	; 0x39b2 <DIO_SetPortValue+0x5a>
    399a:	1f c0       	rjmp	.+62     	; 0x39da <DIO_SetPortValue+0x82>
    399c:	2c 81       	ldd	r18, Y+4	; 0x04
    399e:	3d 81       	ldd	r19, Y+5	; 0x05
    39a0:	22 30       	cpi	r18, 0x02	; 2
    39a2:	31 05       	cpc	r19, r1
    39a4:	81 f0       	breq	.+32     	; 0x39c6 <DIO_SetPortValue+0x6e>
    39a6:	8c 81       	ldd	r24, Y+4	; 0x04
    39a8:	9d 81       	ldd	r25, Y+5	; 0x05
    39aa:	83 30       	cpi	r24, 0x03	; 3
    39ac:	91 05       	cpc	r25, r1
    39ae:	81 f0       	breq	.+32     	; 0x39d0 <DIO_SetPortValue+0x78>
    39b0:	14 c0       	rjmp	.+40     	; 0x39da <DIO_SetPortValue+0x82>
		{
			case     PORTA: PORTA_REG = u8PortVal; break;
    39b2:	eb e3       	ldi	r30, 0x3B	; 59
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	8b 81       	ldd	r24, Y+3	; 0x03
    39b8:	80 83       	st	Z, r24
    39ba:	12 c0       	rjmp	.+36     	; 0x39e0 <DIO_SetPortValue+0x88>
			case     PORTB: PORTB_REG = u8PortVal; break;
    39bc:	e8 e3       	ldi	r30, 0x38	; 56
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	8b 81       	ldd	r24, Y+3	; 0x03
    39c2:	80 83       	st	Z, r24
    39c4:	0d c0       	rjmp	.+26     	; 0x39e0 <DIO_SetPortValue+0x88>
			case     PORTC: PORTC_REG = u8PortVal; break;
    39c6:	e5 e3       	ldi	r30, 0x35	; 53
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	8b 81       	ldd	r24, Y+3	; 0x03
    39cc:	80 83       	st	Z, r24
    39ce:	08 c0       	rjmp	.+16     	; 0x39e0 <DIO_SetPortValue+0x88>
			case     PORTD: PORTD_REG = u8PortVal; break;
    39d0:	e2 e3       	ldi	r30, 0x32	; 50
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	8b 81       	ldd	r24, Y+3	; 0x03
    39d6:	80 83       	st	Z, r24
    39d8:	03 c0       	rjmp	.+6      	; 0x39e0 <DIO_SetPortValue+0x88>
			default: LOC_enumState = DIO_NOK ;       break;
    39da:	19 82       	std	Y+1, r1	; 0x01
    39dc:	01 c0       	rjmp	.+2      	; 0x39e0 <DIO_SetPortValue+0x88>
		}
	}
	          else
				{
					LOC_enumState = DIO_NOK ;
    39de:	19 82       	std	Y+1, r1	; 0x01
				}
        return LOC_enumState ;
    39e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	cf 91       	pop	r28
    39ee:	df 91       	pop	r29
    39f0:	08 95       	ret

000039f2 <DIO_TOGPortValue>:
DIO_ErrorStatus DIO_TOGPortValue     (u8 u8PortId, u8 u8PortVal)
{
    39f2:	df 93       	push	r29
    39f4:	cf 93       	push	r28
    39f6:	00 d0       	rcall	.+0      	; 0x39f8 <DIO_TOGPortValue+0x6>
    39f8:	00 d0       	rcall	.+0      	; 0x39fa <DIO_TOGPortValue+0x8>
    39fa:	0f 92       	push	r0
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	8a 83       	std	Y+2, r24	; 0x02
    3a02:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	89 83       	std	Y+1, r24	; 0x01
	if (( u8PortId <= PORTD) )
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	84 30       	cpi	r24, 0x04	; 4
    3a0c:	c8 f5       	brcc	.+114    	; 0x3a80 <DIO_TOGPortValue+0x8e>
	{
	/* Check on the Required PORT Number */
		switch (u8PortId)
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	28 2f       	mov	r18, r24
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	3d 83       	std	Y+5, r19	; 0x05
    3a16:	2c 83       	std	Y+4, r18	; 0x04
    3a18:	8c 81       	ldd	r24, Y+4	; 0x04
    3a1a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a1c:	81 30       	cpi	r24, 0x01	; 1
    3a1e:	91 05       	cpc	r25, r1
    3a20:	d9 f0       	breq	.+54     	; 0x3a58 <DIO_TOGPortValue+0x66>
    3a22:	2c 81       	ldd	r18, Y+4	; 0x04
    3a24:	3d 81       	ldd	r19, Y+5	; 0x05
    3a26:	22 30       	cpi	r18, 0x02	; 2
    3a28:	31 05       	cpc	r19, r1
    3a2a:	2c f4       	brge	.+10     	; 0x3a36 <DIO_TOGPortValue+0x44>
    3a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	61 f0       	breq	.+24     	; 0x3a4c <DIO_TOGPortValue+0x5a>
    3a34:	23 c0       	rjmp	.+70     	; 0x3a7c <DIO_TOGPortValue+0x8a>
    3a36:	2c 81       	ldd	r18, Y+4	; 0x04
    3a38:	3d 81       	ldd	r19, Y+5	; 0x05
    3a3a:	22 30       	cpi	r18, 0x02	; 2
    3a3c:	31 05       	cpc	r19, r1
    3a3e:	91 f0       	breq	.+36     	; 0x3a64 <DIO_TOGPortValue+0x72>
    3a40:	8c 81       	ldd	r24, Y+4	; 0x04
    3a42:	9d 81       	ldd	r25, Y+5	; 0x05
    3a44:	83 30       	cpi	r24, 0x03	; 3
    3a46:	91 05       	cpc	r25, r1
    3a48:	99 f0       	breq	.+38     	; 0x3a70 <DIO_TOGPortValue+0x7e>
    3a4a:	18 c0       	rjmp	.+48     	; 0x3a7c <DIO_TOGPortValue+0x8a>
		{
			case     PORTA: PORTA_REG =~u8PortVal; break;
    3a4c:	eb e3       	ldi	r30, 0x3B	; 59
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	80 95       	com	r24
    3a54:	80 83       	st	Z, r24
    3a56:	15 c0       	rjmp	.+42     	; 0x3a82 <DIO_TOGPortValue+0x90>
			case     PORTB: PORTB_REG =~u8PortVal; break;
    3a58:	e8 e3       	ldi	r30, 0x38	; 56
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5e:	80 95       	com	r24
    3a60:	80 83       	st	Z, r24
    3a62:	0f c0       	rjmp	.+30     	; 0x3a82 <DIO_TOGPortValue+0x90>
			case     PORTC: PORTC_REG =~u8PortVal; break;
    3a64:	e5 e3       	ldi	r30, 0x35	; 53
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6a:	80 95       	com	r24
    3a6c:	80 83       	st	Z, r24
    3a6e:	09 c0       	rjmp	.+18     	; 0x3a82 <DIO_TOGPortValue+0x90>
			case     PORTD: PORTD_REG =~u8PortVal; break;
    3a70:	e2 e3       	ldi	r30, 0x32	; 50
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	8b 81       	ldd	r24, Y+3	; 0x03
    3a76:	80 95       	com	r24
    3a78:	80 83       	st	Z, r24
    3a7a:	03 c0       	rjmp	.+6      	; 0x3a82 <DIO_TOGPortValue+0x90>
			default: LOC_enumState = DIO_NOK ;       break;
    3a7c:	19 82       	std	Y+1, r1	; 0x01
    3a7e:	01 c0       	rjmp	.+2      	; 0x3a82 <DIO_TOGPortValue+0x90>
		}
	}
	          else
				{
					LOC_enumState = DIO_NOK ;
    3a80:	19 82       	std	Y+1, r1	; 0x01
				}
        return LOC_enumState ;
    3a82:	89 81       	ldd	r24, Y+1	; 0x01

}
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	0f 90       	pop	r0
    3a8e:	cf 91       	pop	r28
    3a90:	df 91       	pop	r29
    3a92:	08 95       	ret

00003a94 <ADC_VoidInit>:
#include"ADC_interface.h"
#include"ADC_private.h"
#include"ADC_config.h"

void ADC_VoidInit (void)
{
    3a94:	df 93       	push	r29
    3a96:	cf 93       	push	r28
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62

	ADMUX_Reg =  ADC_REFERNECE_VOLTAGE | ADLAR;
    3a9c:	e7 e2       	ldi	r30, 0x27	; 39
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	80 e6       	ldi	r24, 0x60	; 96
    3aa2:	80 83       	st	Z, r24
	ADCSRA_Reg = ADC_STATE | ADC_INTERRUPT | ADC_prescaller;
    3aa4:	e6 e2       	ldi	r30, 0x26	; 38
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	87 e8       	ldi	r24, 0x87	; 135
    3aaa:	80 83       	st	Z, r24

}
    3aac:	cf 91       	pop	r28
    3aae:	df 91       	pop	r29
    3ab0:	08 95       	ret

00003ab2 <ADC_u16Read>:


u16 ADC_u16Read (u8 Copy_u8Channel_Id)
{
    3ab2:	df 93       	push	r29
    3ab4:	cf 93       	push	r28
    3ab6:	00 d0       	rcall	.+0      	; 0x3ab8 <ADC_u16Read+0x6>
    3ab8:	0f 92       	push	r0
    3aba:	cd b7       	in	r28, 0x3d	; 61
    3abc:	de b7       	in	r29, 0x3e	; 62
    3abe:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_u8Result=0;
    3ac0:	1a 82       	std	Y+2, r1	; 0x02
    3ac2:	19 82       	std	Y+1, r1	; 0x01
	ADMUX_Reg &=~(0b11111);
    3ac4:	a7 e2       	ldi	r26, 0x27	; 39
    3ac6:	b0 e0       	ldi	r27, 0x00	; 0
    3ac8:	e7 e2       	ldi	r30, 0x27	; 39
    3aca:	f0 e0       	ldi	r31, 0x00	; 0
    3acc:	80 81       	ld	r24, Z
    3ace:	80 7e       	andi	r24, 0xE0	; 224
    3ad0:	8c 93       	st	X, r24
	//select channel
	ADMUX_Reg |= Copy_u8Channel_Id;
    3ad2:	a7 e2       	ldi	r26, 0x27	; 39
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	e7 e2       	ldi	r30, 0x27	; 39
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	90 81       	ld	r25, Z
    3adc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ade:	89 2b       	or	r24, r25
    3ae0:	8c 93       	st	X, r24
	//start conversion
	ADCSRA_Reg |= (1 << 6);
    3ae2:	a6 e2       	ldi	r26, 0x26	; 38
    3ae4:	b0 e0       	ldi	r27, 0x00	; 0
    3ae6:	e6 e2       	ldi	r30, 0x26	; 38
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	80 81       	ld	r24, Z
    3aec:	80 64       	ori	r24, 0x40	; 64
    3aee:	8c 93       	st	X, r24
	// wait the flag to be set
	while( ( (ADCSRA_Reg >> 4)& 1) == 0 );
    3af0:	e6 e2       	ldi	r30, 0x26	; 38
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	80 81       	ld	r24, Z
    3af6:	82 95       	swap	r24
    3af8:	8f 70       	andi	r24, 0x0F	; 15
    3afa:	88 2f       	mov	r24, r24
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	81 70       	andi	r24, 0x01	; 1
    3b00:	90 70       	andi	r25, 0x00	; 0
    3b02:	00 97       	sbiw	r24, 0x00	; 0
    3b04:	a9 f3       	breq	.-22     	; 0x3af0 <ADC_u16Read+0x3e>
#if ADLAR == ADC_LEFT_ADJUST_DISABEL
	ADC_u8Result = ADCL_Reg | (ADCH_Reg <<8 );

#elif ADLAR == ADC_LEFT_ADJUST_ENABLE
	ADC_u8Result = (ADCH_Reg << 2);
    3b06:	e5 e2       	ldi	r30, 0x25	; 37
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	80 81       	ld	r24, Z
    3b0c:	88 2f       	mov	r24, r24
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	88 0f       	add	r24, r24
    3b12:	99 1f       	adc	r25, r25
    3b14:	88 0f       	add	r24, r24
    3b16:	99 1f       	adc	r25, r25
    3b18:	9a 83       	std	Y+2, r25	; 0x02
    3b1a:	89 83       	std	Y+1, r24	; 0x01
#endif

	// clear flag
	ADCSRA_Reg |= (1 << 4);
    3b1c:	a6 e2       	ldi	r26, 0x26	; 38
    3b1e:	b0 e0       	ldi	r27, 0x00	; 0
    3b20:	e6 e2       	ldi	r30, 0x26	; 38
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	80 81       	ld	r24, Z
    3b26:	80 61       	ori	r24, 0x10	; 16
    3b28:	8c 93       	st	X, r24

	return ADC_u8Result;
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	cf 91       	pop	r28
    3b36:	df 91       	pop	r29
    3b38:	08 95       	ret

00003b3a <RTC_enumUpdateTime>:
#include "RTC_interface.h"
#include "RTC_private.h"
#include "RTC_config.h"

ERROR_STATE RTC_enumUpdateTime(RTC_Time * Copy_struct_ptr_Time)
{
    3b3a:	df 93       	push	r29
    3b3c:	cf 93       	push	r28
    3b3e:	00 d0       	rcall	.+0      	; 0x3b40 <RTC_enumUpdateTime+0x6>
    3b40:	00 d0       	rcall	.+0      	; 0x3b42 <RTC_enumUpdateTime+0x8>
    3b42:	00 d0       	rcall	.+0      	; 0x3b44 <RTC_enumUpdateTime+0xa>
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	9e 83       	std	Y+6, r25	; 0x06
    3b4a:	8d 83       	std	Y+5, r24	; 0x05
	ERROR_STATE Local_enum_ErrorState = NOK;
    3b4c:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8Seconds = (((Copy_struct_ptr_Time->Seconds) / 10 ) << 4);
    3b4e:	ed 81       	ldd	r30, Y+5	; 0x05
    3b50:	fe 81       	ldd	r31, Y+6	; 0x06
    3b52:	80 81       	ld	r24, Z
    3b54:	9a e0       	ldi	r25, 0x0A	; 10
    3b56:	69 2f       	mov	r22, r25
    3b58:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3b5c:	82 95       	swap	r24
    3b5e:	80 7f       	andi	r24, 0xF0	; 240
    3b60:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8Seconds   |= ((Copy_struct_ptr_Time->Seconds) % 10);
    3b62:	ed 81       	ldd	r30, Y+5	; 0x05
    3b64:	fe 81       	ldd	r31, Y+6	; 0x06
    3b66:	80 81       	ld	r24, Z
    3b68:	9a e0       	ldi	r25, 0x0A	; 10
    3b6a:	69 2f       	mov	r22, r25
    3b6c:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3b70:	89 2f       	mov	r24, r25
    3b72:	98 2f       	mov	r25, r24
    3b74:	8b 81       	ldd	r24, Y+3	; 0x03
    3b76:	89 2b       	or	r24, r25
    3b78:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Minutes = (((Copy_struct_ptr_Time->Minutes)/10) << 4);
    3b7a:	ed 81       	ldd	r30, Y+5	; 0x05
    3b7c:	fe 81       	ldd	r31, Y+6	; 0x06
    3b7e:	81 81       	ldd	r24, Z+1	; 0x01
    3b80:	9a e0       	ldi	r25, 0x0A	; 10
    3b82:	69 2f       	mov	r22, r25
    3b84:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3b88:	82 95       	swap	r24
    3b8a:	80 7f       	andi	r24, 0xF0	; 240
    3b8c:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8Minutes |= ((Copy_struct_ptr_Time->Minutes) % 10);
    3b8e:	ed 81       	ldd	r30, Y+5	; 0x05
    3b90:	fe 81       	ldd	r31, Y+6	; 0x06
    3b92:	81 81       	ldd	r24, Z+1	; 0x01
    3b94:	9a e0       	ldi	r25, 0x0A	; 10
    3b96:	69 2f       	mov	r22, r25
    3b98:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3b9c:	89 2f       	mov	r24, r25
    3b9e:	98 2f       	mov	r25, r24
    3ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba2:	89 2b       	or	r24, r25
    3ba4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Hours = (((Copy_struct_ptr_Time->Hours)/10) << 4);
    3ba6:	ed 81       	ldd	r30, Y+5	; 0x05
    3ba8:	fe 81       	ldd	r31, Y+6	; 0x06
    3baa:	82 81       	ldd	r24, Z+2	; 0x02
    3bac:	9a e0       	ldi	r25, 0x0A	; 10
    3bae:	69 2f       	mov	r22, r25
    3bb0:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3bb4:	82 95       	swap	r24
    3bb6:	80 7f       	andi	r24, 0xF0	; 240
    3bb8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_struct_ptr_Time->HoursMode == Hours_24)
    3bba:	ed 81       	ldd	r30, Y+5	; 0x05
    3bbc:	fe 81       	ldd	r31, Y+6	; 0x06
    3bbe:	84 81       	ldd	r24, Z+4	; 0x04
    3bc0:	88 23       	and	r24, r24
    3bc2:	89 f4       	brne	.+34     	; 0x3be6 <RTC_enumUpdateTime+0xac>
	{
		Local_u8Hours |= ((Copy_struct_ptr_Time->HoursMode)|((Copy_struct_ptr_Time->Hours)%10));
    3bc4:	ed 81       	ldd	r30, Y+5	; 0x05
    3bc6:	fe 81       	ldd	r31, Y+6	; 0x06
    3bc8:	24 81       	ldd	r18, Z+4	; 0x04
    3bca:	ed 81       	ldd	r30, Y+5	; 0x05
    3bcc:	fe 81       	ldd	r31, Y+6	; 0x06
    3bce:	82 81       	ldd	r24, Z+2	; 0x02
    3bd0:	9a e0       	ldi	r25, 0x0A	; 10
    3bd2:	69 2f       	mov	r22, r25
    3bd4:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3bd8:	89 2f       	mov	r24, r25
    3bda:	92 2f       	mov	r25, r18
    3bdc:	98 2b       	or	r25, r24
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	89 2b       	or	r24, r25
    3be2:	89 83       	std	Y+1, r24	; 0x01
    3be4:	15 c0       	rjmp	.+42     	; 0x3c10 <RTC_enumUpdateTime+0xd6>
	}
	else
	{
		Local_u8Hours |= ((Copy_struct_ptr_Time->HoursMode)|(Copy_struct_ptr_Time->AM_PM)|((Copy_struct_ptr_Time->Hours)%10));
    3be6:	ed 81       	ldd	r30, Y+5	; 0x05
    3be8:	fe 81       	ldd	r31, Y+6	; 0x06
    3bea:	94 81       	ldd	r25, Z+4	; 0x04
    3bec:	ed 81       	ldd	r30, Y+5	; 0x05
    3bee:	fe 81       	ldd	r31, Y+6	; 0x06
    3bf0:	83 81       	ldd	r24, Z+3	; 0x03
    3bf2:	29 2f       	mov	r18, r25
    3bf4:	28 2b       	or	r18, r24
    3bf6:	ed 81       	ldd	r30, Y+5	; 0x05
    3bf8:	fe 81       	ldd	r31, Y+6	; 0x06
    3bfa:	82 81       	ldd	r24, Z+2	; 0x02
    3bfc:	9a e0       	ldi	r25, 0x0A	; 10
    3bfe:	69 2f       	mov	r22, r25
    3c00:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3c04:	89 2f       	mov	r24, r25
    3c06:	92 2f       	mov	r25, r18
    3c08:	98 2b       	or	r25, r24
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	89 2b       	or	r24, r25
    3c0e:	89 83       	std	Y+1, r24	; 0x01

	}

	Local_enum_ErrorState = I2C_MASTER_enumSendStart();
    3c10:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <I2C_MASTER_enumSendStart>
    3c14:	8c 83       	std	Y+4, r24	; 0x04
	if (Local_enum_ErrorState == OK)
    3c16:	8c 81       	ldd	r24, Y+4	; 0x04
    3c18:	81 30       	cpi	r24, 0x01	; 1
    3c1a:	29 f5       	brne	.+74     	; 0x3c66 <RTC_enumUpdateTime+0x12c>
	{
		Local_enum_ErrorState = I2C_MASTER_enumSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
    3c1c:	88 e6       	ldi	r24, 0x68	; 104
    3c1e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <I2C_MASTER_enumSendSlaveAddressWithWrite>
    3c22:	8c 83       	std	Y+4, r24	; 0x04
		if(Local_enum_ErrorState == OK)
    3c24:	8c 81       	ldd	r24, Y+4	; 0x04
    3c26:	81 30       	cpi	r24, 0x01	; 1
    3c28:	f1 f4       	brne	.+60     	; 0x3c66 <RTC_enumUpdateTime+0x12c>
		{
			Local_enum_ErrorState = I2C_MASTER_enumSendByte(RTC_BASE_TIME_ADDRESS);
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    3c30:	8c 83       	std	Y+4, r24	; 0x04
			if( Local_enum_ErrorState == OK )
    3c32:	8c 81       	ldd	r24, Y+4	; 0x04
    3c34:	81 30       	cpi	r24, 0x01	; 1
    3c36:	b9 f4       	brne	.+46     	; 0x3c66 <RTC_enumUpdateTime+0x12c>
			{
				Local_enum_ErrorState = I2C_MASTER_enumSendByte(Local_u8Seconds);
    3c38:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3a:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    3c3e:	8c 83       	std	Y+4, r24	; 0x04
				if( Local_enum_ErrorState == OK )
    3c40:	8c 81       	ldd	r24, Y+4	; 0x04
    3c42:	81 30       	cpi	r24, 0x01	; 1
    3c44:	81 f4       	brne	.+32     	; 0x3c66 <RTC_enumUpdateTime+0x12c>
				{
					Local_enum_ErrorState = I2C_MASTER_enumSendByte(Local_u8Minutes);
    3c46:	8a 81       	ldd	r24, Y+2	; 0x02
    3c48:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    3c4c:	8c 83       	std	Y+4, r24	; 0x04
					if(Local_enum_ErrorState == OK)
    3c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c50:	81 30       	cpi	r24, 0x01	; 1
    3c52:	49 f4       	brne	.+18     	; 0x3c66 <RTC_enumUpdateTime+0x12c>
					{
						Local_enum_ErrorState = I2C_MASTER_enumSendByte(Local_u8Hours);
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    3c5a:	8c 83       	std	Y+4, r24	; 0x04
						if(Local_enum_ErrorState == OK)
    3c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c5e:	81 30       	cpi	r24, 0x01	; 1
    3c60:	11 f4       	brne	.+4      	; 0x3c66 <RTC_enumUpdateTime+0x12c>
						{
							I2C_MASTER_voidSendSTOP();
    3c62:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <I2C_MASTER_voidSendSTOP>
					}
				}
			}
		}
	}
	return Local_enum_ErrorState;
    3c66:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3c68:	26 96       	adiw	r28, 0x06	; 6
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	f8 94       	cli
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	cd bf       	out	0x3d, r28	; 61
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	08 95       	ret

00003c7a <RTC_enumUpdateCalendar>:

ERROR_STATE RTC_enumUpdateCalendar(RTC_Date * Copy_struct_ptr_Date)
{
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	00 d0       	rcall	.+0      	; 0x3c80 <RTC_enumUpdateCalendar+0x6>
    3c80:	00 d0       	rcall	.+0      	; 0x3c82 <RTC_enumUpdateCalendar+0x8>
    3c82:	00 d0       	rcall	.+0      	; 0x3c84 <RTC_enumUpdateCalendar+0xa>
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
    3c88:	9e 83       	std	Y+6, r25	; 0x06
    3c8a:	8d 83       	std	Y+5, r24	; 0x05
	ERROR_STATE Local_enumErrorState = NOK;
    3c8c:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8Date = ((Copy_struct_ptr_Date->Date /10 )<<4);
    3c8e:	ed 81       	ldd	r30, Y+5	; 0x05
    3c90:	fe 81       	ldd	r31, Y+6	; 0x06
    3c92:	81 81       	ldd	r24, Z+1	; 0x01
    3c94:	9a e0       	ldi	r25, 0x0A	; 10
    3c96:	69 2f       	mov	r22, r25
    3c98:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3c9c:	82 95       	swap	r24
    3c9e:	80 7f       	andi	r24, 0xF0	; 240
    3ca0:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8Date |= (Copy_struct_ptr_Date->Date % 10);
    3ca2:	ed 81       	ldd	r30, Y+5	; 0x05
    3ca4:	fe 81       	ldd	r31, Y+6	; 0x06
    3ca6:	81 81       	ldd	r24, Z+1	; 0x01
    3ca8:	9a e0       	ldi	r25, 0x0A	; 10
    3caa:	69 2f       	mov	r22, r25
    3cac:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3cb0:	89 2f       	mov	r24, r25
    3cb2:	98 2f       	mov	r25, r24
    3cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb6:	89 2b       	or	r24, r25
    3cb8:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8_Month = ((Copy_struct_ptr_Date->Month /10) << 4);
    3cba:	ed 81       	ldd	r30, Y+5	; 0x05
    3cbc:	fe 81       	ldd	r31, Y+6	; 0x06
    3cbe:	82 81       	ldd	r24, Z+2	; 0x02
    3cc0:	9a e0       	ldi	r25, 0x0A	; 10
    3cc2:	69 2f       	mov	r22, r25
    3cc4:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3cc8:	82 95       	swap	r24
    3cca:	80 7f       	andi	r24, 0xF0	; 240
    3ccc:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8_Month |= (Copy_struct_ptr_Date->Month % 10);
    3cce:	ed 81       	ldd	r30, Y+5	; 0x05
    3cd0:	fe 81       	ldd	r31, Y+6	; 0x06
    3cd2:	82 81       	ldd	r24, Z+2	; 0x02
    3cd4:	9a e0       	ldi	r25, 0x0A	; 10
    3cd6:	69 2f       	mov	r22, r25
    3cd8:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3cdc:	89 2f       	mov	r24, r25
    3cde:	98 2f       	mov	r25, r24
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	89 2b       	or	r24, r25
    3ce4:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8_Year = ((Copy_struct_ptr_Date->Year /10) << 4);
    3ce6:	ed 81       	ldd	r30, Y+5	; 0x05
    3ce8:	fe 81       	ldd	r31, Y+6	; 0x06
    3cea:	83 81       	ldd	r24, Z+3	; 0x03
    3cec:	9a e0       	ldi	r25, 0x0A	; 10
    3cee:	69 2f       	mov	r22, r25
    3cf0:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3cf4:	82 95       	swap	r24
    3cf6:	80 7f       	andi	r24, 0xF0	; 240
    3cf8:	89 83       	std	Y+1, r24	; 0x01
	Local_u8_Year |= (Copy_struct_ptr_Date->Year % 10);
    3cfa:	ed 81       	ldd	r30, Y+5	; 0x05
    3cfc:	fe 81       	ldd	r31, Y+6	; 0x06
    3cfe:	83 81       	ldd	r24, Z+3	; 0x03
    3d00:	9a e0       	ldi	r25, 0x0A	; 10
    3d02:	69 2f       	mov	r22, r25
    3d04:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <__udivmodqi4>
    3d08:	89 2f       	mov	r24, r25
    3d0a:	98 2f       	mov	r25, r24
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	89 2b       	or	r24, r25
    3d10:	89 83       	std	Y+1, r24	; 0x01

	Local_enumErrorState = I2C_MASTER_enumSendStart();
    3d12:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <I2C_MASTER_enumSendStart>
    3d16:	8c 83       	std	Y+4, r24	; 0x04
	if(Local_enumErrorState == OK)
    3d18:	8c 81       	ldd	r24, Y+4	; 0x04
    3d1a:	81 30       	cpi	r24, 0x01	; 1
    3d1c:	71 f5       	brne	.+92     	; 0x3d7a <RTC_enumUpdateCalendar+0x100>
	{
		Local_enumErrorState = I2C_MASTER_enumSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
    3d1e:	88 e6       	ldi	r24, 0x68	; 104
    3d20:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <I2C_MASTER_enumSendSlaveAddressWithWrite>
    3d24:	8c 83       	std	Y+4, r24	; 0x04
		if(Local_enumErrorState == OK)
    3d26:	8c 81       	ldd	r24, Y+4	; 0x04
    3d28:	81 30       	cpi	r24, 0x01	; 1
    3d2a:	39 f5       	brne	.+78     	; 0x3d7a <RTC_enumUpdateCalendar+0x100>
		{
			Local_enumErrorState = I2C_MASTER_enumSendByte(RTC_BASE_CALENDER_ADDRESS);
    3d2c:	83 e0       	ldi	r24, 0x03	; 3
    3d2e:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    3d32:	8c 83       	std	Y+4, r24	; 0x04
			if( Local_enumErrorState == OK )
    3d34:	8c 81       	ldd	r24, Y+4	; 0x04
    3d36:	81 30       	cpi	r24, 0x01	; 1
    3d38:	01 f5       	brne	.+64     	; 0x3d7a <RTC_enumUpdateCalendar+0x100>
			{
				Local_enumErrorState = I2C_MASTER_enumSendByte(Copy_struct_ptr_Date->Day);
    3d3a:	ed 81       	ldd	r30, Y+5	; 0x05
    3d3c:	fe 81       	ldd	r31, Y+6	; 0x06
    3d3e:	80 81       	ld	r24, Z
    3d40:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    3d44:	8c 83       	std	Y+4, r24	; 0x04
				if( Local_enumErrorState == OK )
    3d46:	8c 81       	ldd	r24, Y+4	; 0x04
    3d48:	81 30       	cpi	r24, 0x01	; 1
    3d4a:	b9 f4       	brne	.+46     	; 0x3d7a <RTC_enumUpdateCalendar+0x100>
				{
					Local_enumErrorState = I2C_MASTER_enumSendByte(Local_u8Date);
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    3d52:	8c 83       	std	Y+4, r24	; 0x04
					if( Local_enumErrorState == OK )
    3d54:	8c 81       	ldd	r24, Y+4	; 0x04
    3d56:	81 30       	cpi	r24, 0x01	; 1
    3d58:	81 f4       	brne	.+32     	; 0x3d7a <RTC_enumUpdateCalendar+0x100>
					{
						Local_enumErrorState = I2C_MASTER_enumSendByte(Local_u8_Month);
    3d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5c:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    3d60:	8c 83       	std	Y+4, r24	; 0x04
						if(Local_enumErrorState == OK)
    3d62:	8c 81       	ldd	r24, Y+4	; 0x04
    3d64:	81 30       	cpi	r24, 0x01	; 1
    3d66:	49 f4       	brne	.+18     	; 0x3d7a <RTC_enumUpdateCalendar+0x100>
						{
							Local_enumErrorState = I2C_MASTER_enumSendByte(Local_u8_Year);
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    3d6e:	8c 83       	std	Y+4, r24	; 0x04
							if(Local_enumErrorState == OK)
    3d70:	8c 81       	ldd	r24, Y+4	; 0x04
    3d72:	81 30       	cpi	r24, 0x01	; 1
    3d74:	11 f4       	brne	.+4      	; 0x3d7a <RTC_enumUpdateCalendar+0x100>
							{
								I2C_MASTER_voidSendSTOP();
    3d76:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <I2C_MASTER_voidSendSTOP>
					}
				}
			}
		}
	}
	return Local_enumErrorState;
    3d7a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3d7c:	26 96       	adiw	r28, 0x06	; 6
    3d7e:	0f b6       	in	r0, 0x3f	; 63
    3d80:	f8 94       	cli
    3d82:	de bf       	out	0x3e, r29	; 62
    3d84:	0f be       	out	0x3f, r0	; 63
    3d86:	cd bf       	out	0x3d, r28	; 61
    3d88:	cf 91       	pop	r28
    3d8a:	df 91       	pop	r29
    3d8c:	08 95       	ret

00003d8e <RTC_enumReadTime>:

ERROR_STATE RTC_enumReadTime(RTC_Time * Copy_struct_ptr_Time)
{
    3d8e:	df 93       	push	r29
    3d90:	cf 93       	push	r28
    3d92:	00 d0       	rcall	.+0      	; 0x3d94 <RTC_enumReadTime+0x6>
    3d94:	00 d0       	rcall	.+0      	; 0x3d96 <RTC_enumReadTime+0x8>
    3d96:	00 d0       	rcall	.+0      	; 0x3d98 <RTC_enumReadTime+0xa>
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	9e 83       	std	Y+6, r25	; 0x06
    3d9e:	8d 83       	std	Y+5, r24	; 0x05
	ERROR_STATE Local_enumErrorState = NOK;
    3da0:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Array[3] = {0};
    3da2:	83 e0       	ldi	r24, 0x03	; 3
    3da4:	fe 01       	movw	r30, r28
    3da6:	32 96       	adiw	r30, 0x02	; 2
    3da8:	df 01       	movw	r26, r30
    3daa:	98 2f       	mov	r25, r24
    3dac:	1d 92       	st	X+, r1
    3dae:	9a 95       	dec	r25
    3db0:	e9 f7       	brne	.-6      	; 0x3dac <RTC_enumReadTime+0x1e>
	Local_enumErrorState = I2C_MASTER_enumSendStart();
    3db2:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <I2C_MASTER_enumSendStart>
    3db6:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState == OK)
    3db8:	89 81       	ldd	r24, Y+1	; 0x01
    3dba:	81 30       	cpi	r24, 0x01	; 1
    3dbc:	b9 f5       	brne	.+110    	; 0x3e2c <RTC_enumReadTime+0x9e>
	{
		Local_enumErrorState = I2C_MASTER_enumSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
    3dbe:	88 e6       	ldi	r24, 0x68	; 104
    3dc0:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <I2C_MASTER_enumSendSlaveAddressWithWrite>
    3dc4:	89 83       	std	Y+1, r24	; 0x01
		if( Local_enumErrorState== OK )
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	81 30       	cpi	r24, 0x01	; 1
    3dca:	81 f5       	brne	.+96     	; 0x3e2c <RTC_enumReadTime+0x9e>
		{
			Local_enumErrorState = I2C_MASTER_enumSendByte(RTC_BASE_TIME_ADDRESS);
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    3dd2:	89 83       	std	Y+1, r24	; 0x01
			if( Local_enumErrorState == OK )
    3dd4:	89 81       	ldd	r24, Y+1	; 0x01
    3dd6:	81 30       	cpi	r24, 0x01	; 1
    3dd8:	49 f5       	brne	.+82     	; 0x3e2c <RTC_enumReadTime+0x9e>
			{
				Local_enumErrorState = I2C_MASTER_enumSendRepeatedStart();
    3dda:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <I2C_MASTER_enumSendRepeatedStart>
    3dde:	89 83       	std	Y+1, r24	; 0x01

				if( Local_enumErrorState == OK )
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	81 30       	cpi	r24, 0x01	; 1
    3de4:	19 f5       	brne	.+70     	; 0x3e2c <RTC_enumReadTime+0x9e>
				{
					Local_enumErrorState = I2C_MASTER_enumSendSlaveAddressWithRead(RTC_SLAVE_ADDRESS);
    3de6:	88 e6       	ldi	r24, 0x68	; 104
    3de8:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <I2C_MASTER_enumSendSlaveAddressWithRead>
    3dec:	89 83       	std	Y+1, r24	; 0x01
					if(Local_enumErrorState == OK)
    3dee:	89 81       	ldd	r24, Y+1	; 0x01
    3df0:	81 30       	cpi	r24, 0x01	; 1
    3df2:	e1 f4       	brne	.+56     	; 0x3e2c <RTC_enumReadTime+0x9e>
					{
						Local_enumErrorState = I2C_MASTER_enumReadByte_With_ACK(&Local_u8Array[0]);
    3df4:	ce 01       	movw	r24, r28
    3df6:	02 96       	adiw	r24, 0x02	; 2
    3df8:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <I2C_MASTER_enumReadByte_With_ACK>
    3dfc:	89 83       	std	Y+1, r24	; 0x01
						if( Local_enumErrorState == OK )
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	81 30       	cpi	r24, 0x01	; 1
    3e02:	a1 f4       	brne	.+40     	; 0x3e2c <RTC_enumReadTime+0x9e>
						{
							Local_enumErrorState = I2C_MASTER_enumReadByte_With_ACK(&Local_u8Array[1]);
    3e04:	ce 01       	movw	r24, r28
    3e06:	02 96       	adiw	r24, 0x02	; 2
    3e08:	01 96       	adiw	r24, 0x01	; 1
    3e0a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <I2C_MASTER_enumReadByte_With_ACK>
    3e0e:	89 83       	std	Y+1, r24	; 0x01
							if(Local_enumErrorState == OK)
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	81 30       	cpi	r24, 0x01	; 1
    3e14:	59 f4       	brne	.+22     	; 0x3e2c <RTC_enumReadTime+0x9e>
							{
								Local_enumErrorState = I2C_MASTER_enumReadByte_With_NACK(&Local_u8Array[2]);
    3e16:	ce 01       	movw	r24, r28
    3e18:	02 96       	adiw	r24, 0x02	; 2
    3e1a:	02 96       	adiw	r24, 0x02	; 2
    3e1c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <I2C_MASTER_enumReadByte_With_NACK>
    3e20:	89 83       	std	Y+1, r24	; 0x01
								if(Local_enumErrorState == OK)
    3e22:	89 81       	ldd	r24, Y+1	; 0x01
    3e24:	81 30       	cpi	r24, 0x01	; 1
    3e26:	11 f4       	brne	.+4      	; 0x3e2c <RTC_enumReadTime+0x9e>
								{
									I2C_MASTER_voidSendSTOP();
    3e28:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <I2C_MASTER_voidSendSTOP>
				}
			}
		}
	}

	RTC_ProcessTime( Copy_struct_ptr_Time , Local_u8Array );
    3e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e30:	9e 01       	movw	r18, r28
    3e32:	2e 5f       	subi	r18, 0xFE	; 254
    3e34:	3f 4f       	sbci	r19, 0xFF	; 255
    3e36:	b9 01       	movw	r22, r18
    3e38:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <RTC_ProcessTime>
	return Local_enumErrorState;
    3e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e3e:	26 96       	adiw	r28, 0x06	; 6
    3e40:	0f b6       	in	r0, 0x3f	; 63
    3e42:	f8 94       	cli
    3e44:	de bf       	out	0x3e, r29	; 62
    3e46:	0f be       	out	0x3f, r0	; 63
    3e48:	cd bf       	out	0x3d, r28	; 61
    3e4a:	cf 91       	pop	r28
    3e4c:	df 91       	pop	r29
    3e4e:	08 95       	ret

00003e50 <RTC_enumReadCalendar>:
ERROR_STATE RTC_enumReadCalendar(RTC_Date * Copy_struct_ptr_Date)
{
    3e50:	df 93       	push	r29
    3e52:	cf 93       	push	r28
    3e54:	00 d0       	rcall	.+0      	; 0x3e56 <RTC_enumReadCalendar+0x6>
    3e56:	0f 92       	push	r0
    3e58:	cd b7       	in	r28, 0x3d	; 61
    3e5a:	de b7       	in	r29, 0x3e	; 62
    3e5c:	9b 83       	std	Y+3, r25	; 0x03
    3e5e:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE Local_enumErrorState = NOK;
    3e60:	19 82       	std	Y+1, r1	; 0x01
	//< To be Implemented later
	return Local_enumErrorState;
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	cf 91       	pop	r28
    3e6c:	df 91       	pop	r29
    3e6e:	08 95       	ret

00003e70 <RTC_ProcessTime>:

static void RTC_ProcessTime(RTC_Time * Copy_struct_ptr_retTime , u8* Copy_ptr_arr_ReadData)
{
    3e70:	df 93       	push	r29
    3e72:	cf 93       	push	r28
    3e74:	00 d0       	rcall	.+0      	; 0x3e76 <RTC_ProcessTime+0x6>
    3e76:	00 d0       	rcall	.+0      	; 0x3e78 <RTC_ProcessTime+0x8>
    3e78:	cd b7       	in	r28, 0x3d	; 61
    3e7a:	de b7       	in	r29, 0x3e	; 62
    3e7c:	9a 83       	std	Y+2, r25	; 0x02
    3e7e:	89 83       	std	Y+1, r24	; 0x01
    3e80:	7c 83       	std	Y+4, r23	; 0x04
    3e82:	6b 83       	std	Y+3, r22	; 0x03
	Copy_struct_ptr_retTime->Seconds =(Copy_ptr_arr_ReadData[0] >> 4)* 10 ;
    3e84:	eb 81       	ldd	r30, Y+3	; 0x03
    3e86:	fc 81       	ldd	r31, Y+4	; 0x04
    3e88:	80 81       	ld	r24, Z
    3e8a:	82 95       	swap	r24
    3e8c:	8f 70       	andi	r24, 0x0F	; 15
    3e8e:	88 2f       	mov	r24, r24
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	9c 01       	movw	r18, r24
    3e94:	22 0f       	add	r18, r18
    3e96:	33 1f       	adc	r19, r19
    3e98:	c9 01       	movw	r24, r18
    3e9a:	88 0f       	add	r24, r24
    3e9c:	99 1f       	adc	r25, r25
    3e9e:	88 0f       	add	r24, r24
    3ea0:	99 1f       	adc	r25, r25
    3ea2:	82 0f       	add	r24, r18
    3ea4:	93 1f       	adc	r25, r19
    3ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    3eaa:	80 83       	st	Z, r24
	Copy_struct_ptr_retTime->Seconds +=(Copy_ptr_arr_ReadData[0] & 0x0F);
    3eac:	e9 81       	ldd	r30, Y+1	; 0x01
    3eae:	fa 81       	ldd	r31, Y+2	; 0x02
    3eb0:	90 81       	ld	r25, Z
    3eb2:	eb 81       	ldd	r30, Y+3	; 0x03
    3eb4:	fc 81       	ldd	r31, Y+4	; 0x04
    3eb6:	80 81       	ld	r24, Z
    3eb8:	8f 70       	andi	r24, 0x0F	; 15
    3eba:	89 0f       	add	r24, r25
    3ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    3ec0:	80 83       	st	Z, r24
	Copy_struct_ptr_retTime->Minutes =(Copy_ptr_arr_ReadData[1] >> 4)*10;
    3ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec6:	fc 01       	movw	r30, r24
    3ec8:	31 96       	adiw	r30, 0x01	; 1
    3eca:	80 81       	ld	r24, Z
    3ecc:	82 95       	swap	r24
    3ece:	8f 70       	andi	r24, 0x0F	; 15
    3ed0:	88 2f       	mov	r24, r24
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	9c 01       	movw	r18, r24
    3ed6:	22 0f       	add	r18, r18
    3ed8:	33 1f       	adc	r19, r19
    3eda:	c9 01       	movw	r24, r18
    3edc:	88 0f       	add	r24, r24
    3ede:	99 1f       	adc	r25, r25
    3ee0:	88 0f       	add	r24, r24
    3ee2:	99 1f       	adc	r25, r25
    3ee4:	82 0f       	add	r24, r18
    3ee6:	93 1f       	adc	r25, r19
    3ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    3eea:	fa 81       	ldd	r31, Y+2	; 0x02
    3eec:	81 83       	std	Z+1, r24	; 0x01
	Copy_struct_ptr_retTime->Minutes +=(Copy_ptr_arr_ReadData[1] & 0x0F);
    3eee:	e9 81       	ldd	r30, Y+1	; 0x01
    3ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ef2:	21 81       	ldd	r18, Z+1	; 0x01
    3ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ef8:	fc 01       	movw	r30, r24
    3efa:	31 96       	adiw	r30, 0x01	; 1
    3efc:	80 81       	ld	r24, Z
    3efe:	8f 70       	andi	r24, 0x0F	; 15
    3f00:	82 0f       	add	r24, r18
    3f02:	e9 81       	ldd	r30, Y+1	; 0x01
    3f04:	fa 81       	ldd	r31, Y+2	; 0x02
    3f06:	81 83       	std	Z+1, r24	; 0x01
	Copy_struct_ptr_retTime->HoursMode = Copy_ptr_arr_ReadData[2] & Hours_24;
    3f08:	e9 81       	ldd	r30, Y+1	; 0x01
    3f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    3f0c:	14 82       	std	Z+4, r1	; 0x04
	if( Copy_struct_ptr_retTime->HoursMode == Hours_12 )
    3f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f10:	fa 81       	ldd	r31, Y+2	; 0x02
    3f12:	84 81       	ldd	r24, Z+4	; 0x04
    3f14:	80 34       	cpi	r24, 0x40	; 64
    3f16:	49 f5       	brne	.+82     	; 0x3f6a <RTC_ProcessTime+0xfa>
	{
		Copy_struct_ptr_retTime->AM_PM = Copy_ptr_arr_ReadData[2] & AM ;
    3f18:	e9 81       	ldd	r30, Y+1	; 0x01
    3f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3f1c:	13 82       	std	Z+3, r1	; 0x03
		Copy_struct_ptr_retTime->Hours = (Copy_ptr_arr_ReadData[2] >> 4 & 0x01) * 10 ;
    3f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f20:	9c 81       	ldd	r25, Y+4	; 0x04
    3f22:	fc 01       	movw	r30, r24
    3f24:	32 96       	adiw	r30, 0x02	; 2
    3f26:	80 81       	ld	r24, Z
    3f28:	82 95       	swap	r24
    3f2a:	8f 70       	andi	r24, 0x0F	; 15
    3f2c:	88 2f       	mov	r24, r24
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	81 70       	andi	r24, 0x01	; 1
    3f32:	90 70       	andi	r25, 0x00	; 0
    3f34:	9c 01       	movw	r18, r24
    3f36:	22 0f       	add	r18, r18
    3f38:	33 1f       	adc	r19, r19
    3f3a:	c9 01       	movw	r24, r18
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	82 0f       	add	r24, r18
    3f46:	93 1f       	adc	r25, r19
    3f48:	e9 81       	ldd	r30, Y+1	; 0x01
    3f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3f4c:	82 83       	std	Z+2, r24	; 0x02
		Copy_struct_ptr_retTime->Hours += (Copy_ptr_arr_ReadData[2] & 0x0F);
    3f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f50:	fa 81       	ldd	r31, Y+2	; 0x02
    3f52:	22 81       	ldd	r18, Z+2	; 0x02
    3f54:	8b 81       	ldd	r24, Y+3	; 0x03
    3f56:	9c 81       	ldd	r25, Y+4	; 0x04
    3f58:	fc 01       	movw	r30, r24
    3f5a:	32 96       	adiw	r30, 0x02	; 2
    3f5c:	80 81       	ld	r24, Z
    3f5e:	8f 70       	andi	r24, 0x0F	; 15
    3f60:	82 0f       	add	r24, r18
    3f62:	e9 81       	ldd	r30, Y+1	; 0x01
    3f64:	fa 81       	ldd	r31, Y+2	; 0x02
    3f66:	82 83       	std	Z+2, r24	; 0x02
    3f68:	25 c0       	rjmp	.+74     	; 0x3fb4 <RTC_ProcessTime+0x144>
	}
	else
	{
		Copy_struct_ptr_retTime->Hours = (Copy_ptr_arr_ReadData[2] >> 4 & 0x03) * 10 ;
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f6e:	fc 01       	movw	r30, r24
    3f70:	32 96       	adiw	r30, 0x02	; 2
    3f72:	80 81       	ld	r24, Z
    3f74:	82 95       	swap	r24
    3f76:	8f 70       	andi	r24, 0x0F	; 15
    3f78:	88 2f       	mov	r24, r24
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	83 70       	andi	r24, 0x03	; 3
    3f7e:	90 70       	andi	r25, 0x00	; 0
    3f80:	9c 01       	movw	r18, r24
    3f82:	22 0f       	add	r18, r18
    3f84:	33 1f       	adc	r19, r19
    3f86:	c9 01       	movw	r24, r18
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	88 0f       	add	r24, r24
    3f8e:	99 1f       	adc	r25, r25
    3f90:	82 0f       	add	r24, r18
    3f92:	93 1f       	adc	r25, r19
    3f94:	e9 81       	ldd	r30, Y+1	; 0x01
    3f96:	fa 81       	ldd	r31, Y+2	; 0x02
    3f98:	82 83       	std	Z+2, r24	; 0x02
		Copy_struct_ptr_retTime->Hours += (Copy_ptr_arr_ReadData[2] & 0x0F);
    3f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f9e:	22 81       	ldd	r18, Z+2	; 0x02
    3fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	32 96       	adiw	r30, 0x02	; 2
    3fa8:	80 81       	ld	r24, Z
    3faa:	8f 70       	andi	r24, 0x0F	; 15
    3fac:	82 0f       	add	r24, r18
    3fae:	e9 81       	ldd	r30, Y+1	; 0x01
    3fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    3fb2:	82 83       	std	Z+2, r24	; 0x02
	}

}
    3fb4:	0f 90       	pop	r0
    3fb6:	0f 90       	pop	r0
    3fb8:	0f 90       	pop	r0
    3fba:	0f 90       	pop	r0
    3fbc:	cf 91       	pop	r28
    3fbe:	df 91       	pop	r29
    3fc0:	08 95       	ret

00003fc2 <LDR_SENSOR_voidInit>:
#include"LDR_interface.h"
#include"LDR_private.h"
#include"LDR_config.h"

void LDR_SENSOR_voidInit(u8 Copy_u8ChannelNumber)
{
    3fc2:	df 93       	push	r29
    3fc4:	cf 93       	push	r28
    3fc6:	0f 92       	push	r0
    3fc8:	cd b7       	in	r28, 0x3d	; 61
    3fca:	de b7       	in	r29, 0x3e	; 62
    3fcc:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(PORTA, Copy_u8ChannelNumber, INPUT);
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	69 81       	ldd	r22, Y+1	; 0x01
    3fd2:	40 e0       	ldi	r20, 0x00	; 0
    3fd4:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>
}
    3fd8:	0f 90       	pop	r0
    3fda:	cf 91       	pop	r28
    3fdc:	df 91       	pop	r29
    3fde:	08 95       	ret

00003fe0 <LDR_SNESOR_u8Read>:


u8 LDR_SNESOR_u8Read(u8 Copy_u8ChannelNumber)
{
    3fe0:	af 92       	push	r10
    3fe2:	bf 92       	push	r11
    3fe4:	cf 92       	push	r12
    3fe6:	df 92       	push	r13
    3fe8:	ef 92       	push	r14
    3fea:	ff 92       	push	r15
    3fec:	0f 93       	push	r16
    3fee:	1f 93       	push	r17
    3ff0:	df 93       	push	r29
    3ff2:	cf 93       	push	r28
    3ff4:	cd b7       	in	r28, 0x3d	; 61
    3ff6:	de b7       	in	r29, 0x3e	; 62
    3ff8:	28 97       	sbiw	r28, 0x08	; 8
    3ffa:	0f b6       	in	r0, 0x3f	; 63
    3ffc:	f8 94       	cli
    3ffe:	de bf       	out	0x3e, r29	; 62
    4000:	0f be       	out	0x3f, r0	; 63
    4002:	cd bf       	out	0x3d, r28	; 61
    4004:	88 87       	std	Y+8, r24	; 0x08
	u16 Local_u16ADCValue = 0;
    4006:	1f 82       	std	Y+7, r1	; 0x07
    4008:	1e 82       	std	Y+6, r1	; 0x06
	f32 Local_f32AnalogVolt= 0;
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	a0 e0       	ldi	r26, 0x00	; 0
    4010:	b0 e0       	ldi	r27, 0x00	; 0
    4012:	8a 83       	std	Y+2, r24	; 0x02
    4014:	9b 83       	std	Y+3, r25	; 0x03
    4016:	ac 83       	std	Y+4, r26	; 0x04
    4018:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8INT =0;
    401a:	19 82       	std	Y+1, r1	; 0x01
	Local_u16ADCValue = ADC_u16Read(Copy_u8ChannelNumber);
    401c:	88 85       	ldd	r24, Y+8	; 0x08
    401e:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <ADC_u16Read>
    4022:	9f 83       	std	Y+7, r25	; 0x07
    4024:	8e 83       	std	Y+6, r24	; 0x06
	Local_f32AnalogVolt = (Local_u16ADCValue * VCC)/1024.0;
    4026:	2e 81       	ldd	r18, Y+6	; 0x06
    4028:	3f 81       	ldd	r19, Y+7	; 0x07
    402a:	c9 01       	movw	r24, r18
    402c:	88 0f       	add	r24, r24
    402e:	99 1f       	adc	r25, r25
    4030:	88 0f       	add	r24, r24
    4032:	99 1f       	adc	r25, r25
    4034:	82 0f       	add	r24, r18
    4036:	93 1f       	adc	r25, r19
    4038:	cc 01       	movw	r24, r24
    403a:	a0 e0       	ldi	r26, 0x00	; 0
    403c:	b0 e0       	ldi	r27, 0x00	; 0
    403e:	bc 01       	movw	r22, r24
    4040:	cd 01       	movw	r24, r26
    4042:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	bc 01       	movw	r22, r24
    404c:	cd 01       	movw	r24, r26
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	40 e8       	ldi	r20, 0x80	; 128
    4054:	54 e4       	ldi	r21, 0x44	; 68
    4056:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	8a 83       	std	Y+2, r24	; 0x02
    4060:	9b 83       	std	Y+3, r25	; 0x03
    4062:	ac 83       	std	Y+4, r26	; 0x04
    4064:	bd 83       	std	Y+5, r27	; 0x05
//	f64 RLDR = ((u64)Known_Res*VCC)/(VCC-Local_f32AnalogVolt);
	Local_u8INT=MAP(Local_f32AnalogVolt,0,5,100,0);
    4066:	00 d0       	rcall	.+0      	; 0x4068 <LDR_SNESOR_u8Read+0x88>
    4068:	00 d0       	rcall	.+0      	; 0x406a <LDR_SNESOR_u8Read+0x8a>
    406a:	ed b7       	in	r30, 0x3d	; 61
    406c:	fe b7       	in	r31, 0x3e	; 62
    406e:	31 96       	adiw	r30, 0x01	; 1
    4070:	2a 81       	ldd	r18, Y+2	; 0x02
    4072:	3b 81       	ldd	r19, Y+3	; 0x03
    4074:	4c 81       	ldd	r20, Y+4	; 0x04
    4076:	5d 81       	ldd	r21, Y+5	; 0x05
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	a0 e0       	ldi	r26, 0x00	; 0
    407e:	b0 e0       	ldi	r27, 0x00	; 0
    4080:	80 83       	st	Z, r24
    4082:	91 83       	std	Z+1, r25	; 0x01
    4084:	a2 83       	std	Z+2, r26	; 0x02
    4086:	b3 83       	std	Z+3, r27	; 0x03
    4088:	ca 01       	movw	r24, r20
    408a:	b9 01       	movw	r22, r18
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	40 e0       	ldi	r20, 0x00	; 0
    4092:	50 e0       	ldi	r21, 0x00	; 0
    4094:	0f 2e       	mov	r0, r31
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	ef 2e       	mov	r14, r31
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	ff 2e       	mov	r15, r31
    409e:	f0 ea       	ldi	r31, 0xA0	; 160
    40a0:	0f 2f       	mov	r16, r31
    40a2:	f0 e4       	ldi	r31, 0x40	; 64
    40a4:	1f 2f       	mov	r17, r31
    40a6:	f0 2d       	mov	r31, r0
    40a8:	0f 2e       	mov	r0, r31
    40aa:	f0 e0       	ldi	r31, 0x00	; 0
    40ac:	af 2e       	mov	r10, r31
    40ae:	f0 e0       	ldi	r31, 0x00	; 0
    40b0:	bf 2e       	mov	r11, r31
    40b2:	f8 ec       	ldi	r31, 0xC8	; 200
    40b4:	cf 2e       	mov	r12, r31
    40b6:	f2 e4       	ldi	r31, 0x42	; 66
    40b8:	df 2e       	mov	r13, r31
    40ba:	f0 2d       	mov	r31, r0
    40bc:	0e 94 7f 20 	call	0x40fe	; 0x40fe <MAP>
    40c0:	0f 90       	pop	r0
    40c2:	0f 90       	pop	r0
    40c4:	0f 90       	pop	r0
    40c6:	0f 90       	pop	r0
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	bc 01       	movw	r22, r24
    40ce:	cd 01       	movw	r24, r26
    40d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d4:	dc 01       	movw	r26, r24
    40d6:	cb 01       	movw	r24, r22
    40d8:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8INT;
    40da:	89 81       	ldd	r24, Y+1	; 0x01
}
    40dc:	28 96       	adiw	r28, 0x08	; 8
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	de bf       	out	0x3e, r29	; 62
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	cd bf       	out	0x3d, r28	; 61
    40e8:	cf 91       	pop	r28
    40ea:	df 91       	pop	r29
    40ec:	1f 91       	pop	r17
    40ee:	0f 91       	pop	r16
    40f0:	ff 90       	pop	r15
    40f2:	ef 90       	pop	r14
    40f4:	df 90       	pop	r13
    40f6:	cf 90       	pop	r12
    40f8:	bf 90       	pop	r11
    40fa:	af 90       	pop	r10
    40fc:	08 95       	ret

000040fe <MAP>:

static f32 MAP(f32 Copy_f32Value, f32 Copy_f32INStart, f32 Copy_f32INEnd, f32 Copy_f32OutStart, f32 Copy_f3OutEnd)
{
    40fe:	af 92       	push	r10
    4100:	bf 92       	push	r11
    4102:	cf 92       	push	r12
    4104:	df 92       	push	r13
    4106:	ef 92       	push	r14
    4108:	ff 92       	push	r15
    410a:	0f 93       	push	r16
    410c:	1f 93       	push	r17
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
    4116:	60 97       	sbiw	r28, 0x10	; 16
    4118:	0f b6       	in	r0, 0x3f	; 63
    411a:	f8 94       	cli
    411c:	de bf       	out	0x3e, r29	; 62
    411e:	0f be       	out	0x3f, r0	; 63
    4120:	cd bf       	out	0x3d, r28	; 61
    4122:	69 83       	std	Y+1, r22	; 0x01
    4124:	7a 83       	std	Y+2, r23	; 0x02
    4126:	8b 83       	std	Y+3, r24	; 0x03
    4128:	9c 83       	std	Y+4, r25	; 0x04
    412a:	2d 83       	std	Y+5, r18	; 0x05
    412c:	3e 83       	std	Y+6, r19	; 0x06
    412e:	4f 83       	std	Y+7, r20	; 0x07
    4130:	58 87       	std	Y+8, r21	; 0x08
    4132:	e9 86       	std	Y+9, r14	; 0x09
    4134:	fa 86       	std	Y+10, r15	; 0x0a
    4136:	0b 87       	std	Y+11, r16	; 0x0b
    4138:	1c 87       	std	Y+12, r17	; 0x0c
    413a:	ad 86       	std	Y+13, r10	; 0x0d
    413c:	be 86       	std	Y+14, r11	; 0x0e
    413e:	cf 86       	std	Y+15, r12	; 0x0f
    4140:	d8 8a       	std	Y+16, r13	; 0x10
	return ((Copy_f32Value - Copy_f32INStart ) * (Copy_f3OutEnd - Copy_f32OutStart )/(Copy_f32INEnd -Copy_f32INStart ) + Copy_f32OutStart);
    4142:	69 81       	ldd	r22, Y+1	; 0x01
    4144:	7a 81       	ldd	r23, Y+2	; 0x02
    4146:	8b 81       	ldd	r24, Y+3	; 0x03
    4148:	9c 81       	ldd	r25, Y+4	; 0x04
    414a:	2d 81       	ldd	r18, Y+5	; 0x05
    414c:	3e 81       	ldd	r19, Y+6	; 0x06
    414e:	4f 81       	ldd	r20, Y+7	; 0x07
    4150:	58 85       	ldd	r21, Y+8	; 0x08
    4152:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__subsf3>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	7c 01       	movw	r14, r24
    415c:	8d 01       	movw	r16, r26
    415e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4160:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4162:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4164:	98 a1       	ldd	r25, Y+32	; 0x20
    4166:	2d 85       	ldd	r18, Y+13	; 0x0d
    4168:	3e 85       	ldd	r19, Y+14	; 0x0e
    416a:	4f 85       	ldd	r20, Y+15	; 0x0f
    416c:	58 89       	ldd	r21, Y+16	; 0x10
    416e:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__subsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	9c 01       	movw	r18, r24
    4178:	ad 01       	movw	r20, r26
    417a:	c8 01       	movw	r24, r16
    417c:	b7 01       	movw	r22, r14
    417e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	7c 01       	movw	r14, r24
    4188:	8d 01       	movw	r16, r26
    418a:	69 85       	ldd	r22, Y+9	; 0x09
    418c:	7a 85       	ldd	r23, Y+10	; 0x0a
    418e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4190:	9c 85       	ldd	r25, Y+12	; 0x0c
    4192:	2d 81       	ldd	r18, Y+5	; 0x05
    4194:	3e 81       	ldd	r19, Y+6	; 0x06
    4196:	4f 81       	ldd	r20, Y+7	; 0x07
    4198:	58 85       	ldd	r21, Y+8	; 0x08
    419a:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__subsf3>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	9c 01       	movw	r18, r24
    41a4:	ad 01       	movw	r20, r26
    41a6:	c8 01       	movw	r24, r16
    41a8:	b7 01       	movw	r22, r14
    41aa:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	bc 01       	movw	r22, r24
    41b4:	cd 01       	movw	r24, r26
    41b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    41b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    41ba:	4f 85       	ldd	r20, Y+15	; 0x0f
    41bc:	58 89       	ldd	r21, Y+16	; 0x10
    41be:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__addsf3>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22

}
    41c6:	bc 01       	movw	r22, r24
    41c8:	cd 01       	movw	r24, r26
    41ca:	60 96       	adiw	r28, 0x10	; 16
    41cc:	0f b6       	in	r0, 0x3f	; 63
    41ce:	f8 94       	cli
    41d0:	de bf       	out	0x3e, r29	; 62
    41d2:	0f be       	out	0x3f, r0	; 63
    41d4:	cd bf       	out	0x3d, r28	; 61
    41d6:	cf 91       	pop	r28
    41d8:	df 91       	pop	r29
    41da:	1f 91       	pop	r17
    41dc:	0f 91       	pop	r16
    41de:	ff 90       	pop	r15
    41e0:	ef 90       	pop	r14
    41e2:	df 90       	pop	r13
    41e4:	cf 90       	pop	r12
    41e6:	bf 90       	pop	r11
    41e8:	af 90       	pop	r10
    41ea:	08 95       	ret

000041ec <LCD_enuInit>:
#include"LCD_private.h"
#include"LCD_config.h"
#include"util/delay.h"

DIO_ErrorStatus LCD_enuInit(void)
{
    41ec:	df 93       	push	r29
    41ee:	cf 93       	push	r28
    41f0:	cd b7       	in	r28, 0x3d	; 61
    41f2:	de b7       	in	r29, 0x3e	; 62
    41f4:	e9 97       	sbiw	r28, 0x39	; 57
    41f6:	0f b6       	in	r0, 0x3f	; 63
    41f8:	f8 94       	cli
    41fa:	de bf       	out	0x3e, r29	; 62
    41fc:	0f be       	out	0x3f, r0	; 63
    41fe:	cd bf       	out	0x3d, r28	; 61
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	89 af       	std	Y+57, r24	; 0x39

	DIO_SetPinDirection(RS_PORT	, RS_PIN , OUTPUT);
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	65 e0       	ldi	r22, 0x05	; 5
    4208:	41 e0       	ldi	r20, 0x01	; 1
    420a:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>
	DIO_SetPinDirection(RW_PORT	, RW_PIN , OUTPUT);
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	66 e0       	ldi	r22, 0x06	; 6
    4212:	41 e0       	ldi	r20, 0x01	; 1
    4214:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>
	DIO_SetPinDirection(EN_PORT	, EN_PIN , OUTPUT);
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	67 e0       	ldi	r22, 0x07	; 7
    421c:	41 e0       	ldi	r20, 0x01	; 1
    421e:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>

	DIO_SetPinDirection(D7_PORT, D7_PIN, OUTPUT);
    4222:	83 e0       	ldi	r24, 0x03	; 3
    4224:	67 e0       	ldi	r22, 0x07	; 7
    4226:	41 e0       	ldi	r20, 0x01	; 1
    4228:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>
	DIO_SetPinDirection(D6_PORT, D6_PIN, OUTPUT);
    422c:	83 e0       	ldi	r24, 0x03	; 3
    422e:	66 e0       	ldi	r22, 0x06	; 6
    4230:	41 e0       	ldi	r20, 0x01	; 1
    4232:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>
	DIO_SetPinDirection(D5_PORT, D5_PIN, OUTPUT);
    4236:	83 e0       	ldi	r24, 0x03	; 3
    4238:	65 e0       	ldi	r22, 0x05	; 5
    423a:	41 e0       	ldi	r20, 0x01	; 1
    423c:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>
	DIO_SetPinDirection(D4_PORT, D4_PIN, OUTPUT);
    4240:	83 e0       	ldi	r24, 0x03	; 3
    4242:	64 e0       	ldi	r22, 0x04	; 4
    4244:	41 e0       	ldi	r20, 0x01	; 1
    4246:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	a8 e4       	ldi	r26, 0x48	; 72
    4250:	b2 e4       	ldi	r27, 0x42	; 66
    4252:	8d ab       	std	Y+53, r24	; 0x35
    4254:	9e ab       	std	Y+54, r25	; 0x36
    4256:	af ab       	std	Y+55, r26	; 0x37
    4258:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    425a:	6d a9       	ldd	r22, Y+53	; 0x35
    425c:	7e a9       	ldd	r23, Y+54	; 0x36
    425e:	8f a9       	ldd	r24, Y+55	; 0x37
    4260:	98 ad       	ldd	r25, Y+56	; 0x38
    4262:	20 e0       	ldi	r18, 0x00	; 0
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	4a ef       	ldi	r20, 0xFA	; 250
    4268:	54 e4       	ldi	r21, 0x44	; 68
    426a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    426e:	dc 01       	movw	r26, r24
    4270:	cb 01       	movw	r24, r22
    4272:	89 ab       	std	Y+49, r24	; 0x31
    4274:	9a ab       	std	Y+50, r25	; 0x32
    4276:	ab ab       	std	Y+51, r26	; 0x33
    4278:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    427a:	69 a9       	ldd	r22, Y+49	; 0x31
    427c:	7a a9       	ldd	r23, Y+50	; 0x32
    427e:	8b a9       	ldd	r24, Y+51	; 0x33
    4280:	9c a9       	ldd	r25, Y+52	; 0x34
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	40 e8       	ldi	r20, 0x80	; 128
    4288:	5f e3       	ldi	r21, 0x3F	; 63
    428a:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    428e:	88 23       	and	r24, r24
    4290:	2c f4       	brge	.+10     	; 0x429c <LCD_enuInit+0xb0>
		__ticks = 1;
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	98 ab       	std	Y+48, r25	; 0x30
    4298:	8f a7       	std	Y+47, r24	; 0x2f
    429a:	3f c0       	rjmp	.+126    	; 0x431a <LCD_enuInit+0x12e>
	else if (__tmp > 65535)
    429c:	69 a9       	ldd	r22, Y+49	; 0x31
    429e:	7a a9       	ldd	r23, Y+50	; 0x32
    42a0:	8b a9       	ldd	r24, Y+51	; 0x33
    42a2:	9c a9       	ldd	r25, Y+52	; 0x34
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	3f ef       	ldi	r19, 0xFF	; 255
    42a8:	4f e7       	ldi	r20, 0x7F	; 127
    42aa:	57 e4       	ldi	r21, 0x47	; 71
    42ac:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    42b0:	18 16       	cp	r1, r24
    42b2:	4c f5       	brge	.+82     	; 0x4306 <LCD_enuInit+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42b4:	6d a9       	ldd	r22, Y+53	; 0x35
    42b6:	7e a9       	ldd	r23, Y+54	; 0x36
    42b8:	8f a9       	ldd	r24, Y+55	; 0x37
    42ba:	98 ad       	ldd	r25, Y+56	; 0x38
    42bc:	20 e0       	ldi	r18, 0x00	; 0
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	40 e2       	ldi	r20, 0x20	; 32
    42c2:	51 e4       	ldi	r21, 0x41	; 65
    42c4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	bc 01       	movw	r22, r24
    42ce:	cd 01       	movw	r24, r26
    42d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	98 ab       	std	Y+48, r25	; 0x30
    42da:	8f a7       	std	Y+47, r24	; 0x2f
    42dc:	0f c0       	rjmp	.+30     	; 0x42fc <LCD_enuInit+0x110>
    42de:	88 ec       	ldi	r24, 0xC8	; 200
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	9e a7       	std	Y+46, r25	; 0x2e
    42e4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    42e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    42e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    42ea:	01 97       	sbiw	r24, 0x01	; 1
    42ec:	f1 f7       	brne	.-4      	; 0x42ea <LCD_enuInit+0xfe>
    42ee:	9e a7       	std	Y+46, r25	; 0x2e
    42f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    42f4:	98 a9       	ldd	r25, Y+48	; 0x30
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	98 ab       	std	Y+48, r25	; 0x30
    42fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    42fe:	98 a9       	ldd	r25, Y+48	; 0x30
    4300:	00 97       	sbiw	r24, 0x00	; 0
    4302:	69 f7       	brne	.-38     	; 0x42de <LCD_enuInit+0xf2>
    4304:	14 c0       	rjmp	.+40     	; 0x432e <LCD_enuInit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4306:	69 a9       	ldd	r22, Y+49	; 0x31
    4308:	7a a9       	ldd	r23, Y+50	; 0x32
    430a:	8b a9       	ldd	r24, Y+51	; 0x33
    430c:	9c a9       	ldd	r25, Y+52	; 0x34
    430e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4312:	dc 01       	movw	r26, r24
    4314:	cb 01       	movw	r24, r22
    4316:	98 ab       	std	Y+48, r25	; 0x30
    4318:	8f a7       	std	Y+47, r24	; 0x2f
    431a:	8f a5       	ldd	r24, Y+47	; 0x2f
    431c:	98 a9       	ldd	r25, Y+48	; 0x30
    431e:	9c a7       	std	Y+44, r25	; 0x2c
    4320:	8b a7       	std	Y+43, r24	; 0x2b
    4322:	8b a5       	ldd	r24, Y+43	; 0x2b
    4324:	9c a5       	ldd	r25, Y+44	; 0x2c
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	f1 f7       	brne	.-4      	; 0x4326 <LCD_enuInit+0x13a>
    432a:	9c a7       	std	Y+44, r25	; 0x2c
    432c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);

#if LCD_MODE == EIGHT_BIT
	DIO_SetPinDirection(D3_PORT, D3_PIN, OUTPUT);
    432e:	83 e0       	ldi	r24, 0x03	; 3
    4330:	63 e0       	ldi	r22, 0x03	; 3
    4332:	41 e0       	ldi	r20, 0x01	; 1
    4334:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>
	DIO_SetPinDirection(D2_PORT, D2_PIN, OUTPUT);
    4338:	83 e0       	ldi	r24, 0x03	; 3
    433a:	62 e0       	ldi	r22, 0x02	; 2
    433c:	41 e0       	ldi	r20, 0x01	; 1
    433e:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>
	DIO_SetPinDirection(D1_PORT, D1_PIN, OUTPUT);
    4342:	83 e0       	ldi	r24, 0x03	; 3
    4344:	61 e0       	ldi	r22, 0x01	; 1
    4346:	41 e0       	ldi	r20, 0x01	; 1
    4348:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>
	DIO_SetPinDirection(D0_PORT, D0_PIN, OUTPUT);
    434c:	83 e0       	ldi	r24, 0x03	; 3
    434e:	60 e0       	ldi	r22, 0x00	; 0
    4350:	41 e0       	ldi	r20, 0x01	; 1
    4352:	0e 94 4f 1b 	call	0x369e	; 0x369e <DIO_SetPinDirection>

	// function set
	LCD_invidSendCommend(0x38);
    4356:	88 e3       	ldi	r24, 0x38	; 56
    4358:	0e 94 d6 26 	call	0x4dac	; 0x4dac <LCD_invidSendCommend>
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	a0 e8       	ldi	r26, 0x80	; 128
    4362:	bf e3       	ldi	r27, 0x3F	; 63
    4364:	8f a3       	std	Y+39, r24	; 0x27
    4366:	98 a7       	std	Y+40, r25	; 0x28
    4368:	a9 a7       	std	Y+41, r26	; 0x29
    436a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    436c:	6f a1       	ldd	r22, Y+39	; 0x27
    436e:	78 a5       	ldd	r23, Y+40	; 0x28
    4370:	89 a5       	ldd	r24, Y+41	; 0x29
    4372:	9a a5       	ldd	r25, Y+42	; 0x2a
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	4a ef       	ldi	r20, 0xFA	; 250
    437a:	54 e4       	ldi	r21, 0x44	; 68
    437c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	8b a3       	std	Y+35, r24	; 0x23
    4386:	9c a3       	std	Y+36, r25	; 0x24
    4388:	ad a3       	std	Y+37, r26	; 0x25
    438a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    438c:	6b a1       	ldd	r22, Y+35	; 0x23
    438e:	7c a1       	ldd	r23, Y+36	; 0x24
    4390:	8d a1       	ldd	r24, Y+37	; 0x25
    4392:	9e a1       	ldd	r25, Y+38	; 0x26
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	40 e8       	ldi	r20, 0x80	; 128
    439a:	5f e3       	ldi	r21, 0x3F	; 63
    439c:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    43a0:	88 23       	and	r24, r24
    43a2:	2c f4       	brge	.+10     	; 0x43ae <LCD_enuInit+0x1c2>
		__ticks = 1;
    43a4:	81 e0       	ldi	r24, 0x01	; 1
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	9a a3       	std	Y+34, r25	; 0x22
    43aa:	89 a3       	std	Y+33, r24	; 0x21
    43ac:	3f c0       	rjmp	.+126    	; 0x442c <LCD_enuInit+0x240>
	else if (__tmp > 65535)
    43ae:	6b a1       	ldd	r22, Y+35	; 0x23
    43b0:	7c a1       	ldd	r23, Y+36	; 0x24
    43b2:	8d a1       	ldd	r24, Y+37	; 0x25
    43b4:	9e a1       	ldd	r25, Y+38	; 0x26
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	3f ef       	ldi	r19, 0xFF	; 255
    43ba:	4f e7       	ldi	r20, 0x7F	; 127
    43bc:	57 e4       	ldi	r21, 0x47	; 71
    43be:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    43c2:	18 16       	cp	r1, r24
    43c4:	4c f5       	brge	.+82     	; 0x4418 <LCD_enuInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43c6:	6f a1       	ldd	r22, Y+39	; 0x27
    43c8:	78 a5       	ldd	r23, Y+40	; 0x28
    43ca:	89 a5       	ldd	r24, Y+41	; 0x29
    43cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	40 e2       	ldi	r20, 0x20	; 32
    43d4:	51 e4       	ldi	r21, 0x41	; 65
    43d6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    43da:	dc 01       	movw	r26, r24
    43dc:	cb 01       	movw	r24, r22
    43de:	bc 01       	movw	r22, r24
    43e0:	cd 01       	movw	r24, r26
    43e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	9a a3       	std	Y+34, r25	; 0x22
    43ec:	89 a3       	std	Y+33, r24	; 0x21
    43ee:	0f c0       	rjmp	.+30     	; 0x440e <LCD_enuInit+0x222>
    43f0:	88 ec       	ldi	r24, 0xC8	; 200
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	98 a3       	std	Y+32, r25	; 0x20
    43f6:	8f 8f       	std	Y+31, r24	; 0x1f
    43f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43fa:	98 a1       	ldd	r25, Y+32	; 0x20
    43fc:	01 97       	sbiw	r24, 0x01	; 1
    43fe:	f1 f7       	brne	.-4      	; 0x43fc <LCD_enuInit+0x210>
    4400:	98 a3       	std	Y+32, r25	; 0x20
    4402:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4404:	89 a1       	ldd	r24, Y+33	; 0x21
    4406:	9a a1       	ldd	r25, Y+34	; 0x22
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	9a a3       	std	Y+34, r25	; 0x22
    440c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    440e:	89 a1       	ldd	r24, Y+33	; 0x21
    4410:	9a a1       	ldd	r25, Y+34	; 0x22
    4412:	00 97       	sbiw	r24, 0x00	; 0
    4414:	69 f7       	brne	.-38     	; 0x43f0 <LCD_enuInit+0x204>
    4416:	14 c0       	rjmp	.+40     	; 0x4440 <LCD_enuInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4418:	6b a1       	ldd	r22, Y+35	; 0x23
    441a:	7c a1       	ldd	r23, Y+36	; 0x24
    441c:	8d a1       	ldd	r24, Y+37	; 0x25
    441e:	9e a1       	ldd	r25, Y+38	; 0x26
    4420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	9a a3       	std	Y+34, r25	; 0x22
    442a:	89 a3       	std	Y+33, r24	; 0x21
    442c:	89 a1       	ldd	r24, Y+33	; 0x21
    442e:	9a a1       	ldd	r25, Y+34	; 0x22
    4430:	9e 8f       	std	Y+30, r25	; 0x1e
    4432:	8d 8f       	std	Y+29, r24	; 0x1d
    4434:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4436:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	f1 f7       	brne	.-4      	; 0x4438 <LCD_enuInit+0x24c>
    443c:	9e 8f       	std	Y+30, r25	; 0x1e
    443e:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_invidSendCommend(0x28);
#endif

	_delay_ms(1);
	//Display on off
	LCD_invidSendCommend(0x0C);
    4440:	8c e0       	ldi	r24, 0x0C	; 12
    4442:	0e 94 d6 26 	call	0x4dac	; 0x4dac <LCD_invidSendCommend>
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	a0 e8       	ldi	r26, 0x80	; 128
    444c:	bf e3       	ldi	r27, 0x3F	; 63
    444e:	89 8f       	std	Y+25, r24	; 0x19
    4450:	9a 8f       	std	Y+26, r25	; 0x1a
    4452:	ab 8f       	std	Y+27, r26	; 0x1b
    4454:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4456:	69 8d       	ldd	r22, Y+25	; 0x19
    4458:	7a 8d       	ldd	r23, Y+26	; 0x1a
    445a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    445c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	4a ef       	ldi	r20, 0xFA	; 250
    4464:	54 e4       	ldi	r21, 0x44	; 68
    4466:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    446a:	dc 01       	movw	r26, r24
    446c:	cb 01       	movw	r24, r22
    446e:	8d 8b       	std	Y+21, r24	; 0x15
    4470:	9e 8b       	std	Y+22, r25	; 0x16
    4472:	af 8b       	std	Y+23, r26	; 0x17
    4474:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4476:	6d 89       	ldd	r22, Y+21	; 0x15
    4478:	7e 89       	ldd	r23, Y+22	; 0x16
    447a:	8f 89       	ldd	r24, Y+23	; 0x17
    447c:	98 8d       	ldd	r25, Y+24	; 0x18
    447e:	20 e0       	ldi	r18, 0x00	; 0
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	40 e8       	ldi	r20, 0x80	; 128
    4484:	5f e3       	ldi	r21, 0x3F	; 63
    4486:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    448a:	88 23       	and	r24, r24
    448c:	2c f4       	brge	.+10     	; 0x4498 <LCD_enuInit+0x2ac>
		__ticks = 1;
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	9c 8b       	std	Y+20, r25	; 0x14
    4494:	8b 8b       	std	Y+19, r24	; 0x13
    4496:	3f c0       	rjmp	.+126    	; 0x4516 <LCD_enuInit+0x32a>
	else if (__tmp > 65535)
    4498:	6d 89       	ldd	r22, Y+21	; 0x15
    449a:	7e 89       	ldd	r23, Y+22	; 0x16
    449c:	8f 89       	ldd	r24, Y+23	; 0x17
    449e:	98 8d       	ldd	r25, Y+24	; 0x18
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	3f ef       	ldi	r19, 0xFF	; 255
    44a4:	4f e7       	ldi	r20, 0x7F	; 127
    44a6:	57 e4       	ldi	r21, 0x47	; 71
    44a8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    44ac:	18 16       	cp	r1, r24
    44ae:	4c f5       	brge	.+82     	; 0x4502 <LCD_enuInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44b0:	69 8d       	ldd	r22, Y+25	; 0x19
    44b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44b8:	20 e0       	ldi	r18, 0x00	; 0
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	40 e2       	ldi	r20, 0x20	; 32
    44be:	51 e4       	ldi	r21, 0x41	; 65
    44c0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    44c4:	dc 01       	movw	r26, r24
    44c6:	cb 01       	movw	r24, r22
    44c8:	bc 01       	movw	r22, r24
    44ca:	cd 01       	movw	r24, r26
    44cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	9c 8b       	std	Y+20, r25	; 0x14
    44d6:	8b 8b       	std	Y+19, r24	; 0x13
    44d8:	0f c0       	rjmp	.+30     	; 0x44f8 <LCD_enuInit+0x30c>
    44da:	88 ec       	ldi	r24, 0xC8	; 200
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	9a 8b       	std	Y+18, r25	; 0x12
    44e0:	89 8b       	std	Y+17, r24	; 0x11
    44e2:	89 89       	ldd	r24, Y+17	; 0x11
    44e4:	9a 89       	ldd	r25, Y+18	; 0x12
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	f1 f7       	brne	.-4      	; 0x44e6 <LCD_enuInit+0x2fa>
    44ea:	9a 8b       	std	Y+18, r25	; 0x12
    44ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ee:	8b 89       	ldd	r24, Y+19	; 0x13
    44f0:	9c 89       	ldd	r25, Y+20	; 0x14
    44f2:	01 97       	sbiw	r24, 0x01	; 1
    44f4:	9c 8b       	std	Y+20, r25	; 0x14
    44f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44f8:	8b 89       	ldd	r24, Y+19	; 0x13
    44fa:	9c 89       	ldd	r25, Y+20	; 0x14
    44fc:	00 97       	sbiw	r24, 0x00	; 0
    44fe:	69 f7       	brne	.-38     	; 0x44da <LCD_enuInit+0x2ee>
    4500:	14 c0       	rjmp	.+40     	; 0x452a <LCD_enuInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4502:	6d 89       	ldd	r22, Y+21	; 0x15
    4504:	7e 89       	ldd	r23, Y+22	; 0x16
    4506:	8f 89       	ldd	r24, Y+23	; 0x17
    4508:	98 8d       	ldd	r25, Y+24	; 0x18
    450a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	9c 8b       	std	Y+20, r25	; 0x14
    4514:	8b 8b       	std	Y+19, r24	; 0x13
    4516:	8b 89       	ldd	r24, Y+19	; 0x13
    4518:	9c 89       	ldd	r25, Y+20	; 0x14
    451a:	98 8b       	std	Y+16, r25	; 0x10
    451c:	8f 87       	std	Y+15, r24	; 0x0f
    451e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4520:	98 89       	ldd	r25, Y+16	; 0x10
    4522:	01 97       	sbiw	r24, 0x01	; 1
    4524:	f1 f7       	brne	.-4      	; 0x4522 <LCD_enuInit+0x336>
    4526:	98 8b       	std	Y+16, r25	; 0x10
    4528:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	//clear display
	LCD_invidSendCommend(0x01);
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	0e 94 d6 26 	call	0x4dac	; 0x4dac <LCD_invidSendCommend>
    4530:	80 e0       	ldi	r24, 0x00	; 0
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	a0 e0       	ldi	r26, 0x00	; 0
    4536:	b0 e4       	ldi	r27, 0x40	; 64
    4538:	8b 87       	std	Y+11, r24	; 0x0b
    453a:	9c 87       	std	Y+12, r25	; 0x0c
    453c:	ad 87       	std	Y+13, r26	; 0x0d
    453e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4540:	6b 85       	ldd	r22, Y+11	; 0x0b
    4542:	7c 85       	ldd	r23, Y+12	; 0x0c
    4544:	8d 85       	ldd	r24, Y+13	; 0x0d
    4546:	9e 85       	ldd	r25, Y+14	; 0x0e
    4548:	20 e0       	ldi	r18, 0x00	; 0
    454a:	30 e0       	ldi	r19, 0x00	; 0
    454c:	4a ef       	ldi	r20, 0xFA	; 250
    454e:	54 e4       	ldi	r21, 0x44	; 68
    4550:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4554:	dc 01       	movw	r26, r24
    4556:	cb 01       	movw	r24, r22
    4558:	8f 83       	std	Y+7, r24	; 0x07
    455a:	98 87       	std	Y+8, r25	; 0x08
    455c:	a9 87       	std	Y+9, r26	; 0x09
    455e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4560:	6f 81       	ldd	r22, Y+7	; 0x07
    4562:	78 85       	ldd	r23, Y+8	; 0x08
    4564:	89 85       	ldd	r24, Y+9	; 0x09
    4566:	9a 85       	ldd	r25, Y+10	; 0x0a
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	40 e8       	ldi	r20, 0x80	; 128
    456e:	5f e3       	ldi	r21, 0x3F	; 63
    4570:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    4574:	88 23       	and	r24, r24
    4576:	2c f4       	brge	.+10     	; 0x4582 <LCD_enuInit+0x396>
		__ticks = 1;
    4578:	81 e0       	ldi	r24, 0x01	; 1
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	9e 83       	std	Y+6, r25	; 0x06
    457e:	8d 83       	std	Y+5, r24	; 0x05
    4580:	3f c0       	rjmp	.+126    	; 0x4600 <LCD_enuInit+0x414>
	else if (__tmp > 65535)
    4582:	6f 81       	ldd	r22, Y+7	; 0x07
    4584:	78 85       	ldd	r23, Y+8	; 0x08
    4586:	89 85       	ldd	r24, Y+9	; 0x09
    4588:	9a 85       	ldd	r25, Y+10	; 0x0a
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	3f ef       	ldi	r19, 0xFF	; 255
    458e:	4f e7       	ldi	r20, 0x7F	; 127
    4590:	57 e4       	ldi	r21, 0x47	; 71
    4592:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    4596:	18 16       	cp	r1, r24
    4598:	4c f5       	brge	.+82     	; 0x45ec <LCD_enuInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    459a:	6b 85       	ldd	r22, Y+11	; 0x0b
    459c:	7c 85       	ldd	r23, Y+12	; 0x0c
    459e:	8d 85       	ldd	r24, Y+13	; 0x0d
    45a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    45a2:	20 e0       	ldi	r18, 0x00	; 0
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	40 e2       	ldi	r20, 0x20	; 32
    45a8:	51 e4       	ldi	r21, 0x41	; 65
    45aa:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    45ae:	dc 01       	movw	r26, r24
    45b0:	cb 01       	movw	r24, r22
    45b2:	bc 01       	movw	r22, r24
    45b4:	cd 01       	movw	r24, r26
    45b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ba:	dc 01       	movw	r26, r24
    45bc:	cb 01       	movw	r24, r22
    45be:	9e 83       	std	Y+6, r25	; 0x06
    45c0:	8d 83       	std	Y+5, r24	; 0x05
    45c2:	0f c0       	rjmp	.+30     	; 0x45e2 <LCD_enuInit+0x3f6>
    45c4:	88 ec       	ldi	r24, 0xC8	; 200
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	9c 83       	std	Y+4, r25	; 0x04
    45ca:	8b 83       	std	Y+3, r24	; 0x03
    45cc:	8b 81       	ldd	r24, Y+3	; 0x03
    45ce:	9c 81       	ldd	r25, Y+4	; 0x04
    45d0:	01 97       	sbiw	r24, 0x01	; 1
    45d2:	f1 f7       	brne	.-4      	; 0x45d0 <LCD_enuInit+0x3e4>
    45d4:	9c 83       	std	Y+4, r25	; 0x04
    45d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45d8:	8d 81       	ldd	r24, Y+5	; 0x05
    45da:	9e 81       	ldd	r25, Y+6	; 0x06
    45dc:	01 97       	sbiw	r24, 0x01	; 1
    45de:	9e 83       	std	Y+6, r25	; 0x06
    45e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45e2:	8d 81       	ldd	r24, Y+5	; 0x05
    45e4:	9e 81       	ldd	r25, Y+6	; 0x06
    45e6:	00 97       	sbiw	r24, 0x00	; 0
    45e8:	69 f7       	brne	.-38     	; 0x45c4 <LCD_enuInit+0x3d8>
    45ea:	14 c0       	rjmp	.+40     	; 0x4614 <LCD_enuInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ec:	6f 81       	ldd	r22, Y+7	; 0x07
    45ee:	78 85       	ldd	r23, Y+8	; 0x08
    45f0:	89 85       	ldd	r24, Y+9	; 0x09
    45f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f8:	dc 01       	movw	r26, r24
    45fa:	cb 01       	movw	r24, r22
    45fc:	9e 83       	std	Y+6, r25	; 0x06
    45fe:	8d 83       	std	Y+5, r24	; 0x05
    4600:	8d 81       	ldd	r24, Y+5	; 0x05
    4602:	9e 81       	ldd	r25, Y+6	; 0x06
    4604:	9a 83       	std	Y+2, r25	; 0x02
    4606:	89 83       	std	Y+1, r24	; 0x01
    4608:	89 81       	ldd	r24, Y+1	; 0x01
    460a:	9a 81       	ldd	r25, Y+2	; 0x02
    460c:	01 97       	sbiw	r24, 0x01	; 1
    460e:	f1 f7       	brne	.-4      	; 0x460c <LCD_enuInit+0x420>
    4610:	9a 83       	std	Y+2, r25	; 0x02
    4612:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//entry mode
	LCD_invidSendCommend(0x06);
    4614:	86 e0       	ldi	r24, 0x06	; 6
    4616:	0e 94 d6 26 	call	0x4dac	; 0x4dac <LCD_invidSendCommend>

	return LOC_enumState;
    461a:	89 ad       	ldd	r24, Y+57	; 0x39
}
    461c:	e9 96       	adiw	r28, 0x39	; 57
    461e:	0f b6       	in	r0, 0x3f	; 63
    4620:	f8 94       	cli
    4622:	de bf       	out	0x3e, r29	; 62
    4624:	0f be       	out	0x3f, r0	; 63
    4626:	cd bf       	out	0x3d, r28	; 61
    4628:	cf 91       	pop	r28
    462a:	df 91       	pop	r29
    462c:	08 95       	ret

0000462e <LCD_enuDisplayChar>:


DIO_ErrorStatus LCD_enuDisplayChar(u8 Copy_u8Data)
{
    462e:	df 93       	push	r29
    4630:	cf 93       	push	r28
    4632:	00 d0       	rcall	.+0      	; 0x4634 <LCD_enuDisplayChar+0x6>
    4634:	cd b7       	in	r28, 0x3d	; 61
    4636:	de b7       	in	r29, 0x3e	; 62
    4638:	8a 83       	std	Y+2, r24	; 0x02

	DIO_ErrorStatus LOC_enumState=DIO_OK;
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	89 83       	std	Y+1, r24	; 0x01
	//set RS as Data
	DIO_SetPinValue(RS_PORT ,RS_PIN ,HIGH);
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	65 e0       	ldi	r22, 0x05	; 5
    4642:	41 e0       	ldi	r20, 0x01	; 1
    4644:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	LCD_voidLatch( Copy_u8Data);
    4648:	8a 81       	ldd	r24, Y+2	; 0x02
    464a:	0e 94 38 28 	call	0x5070	; 0x5070 <LCD_voidLatch>

	return LOC_enumState;
    464e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4650:	0f 90       	pop	r0
    4652:	0f 90       	pop	r0
    4654:	cf 91       	pop	r28
    4656:	df 91       	pop	r29
    4658:	08 95       	ret

0000465a <LCD_enuSendCommand>:


DIO_ErrorStatus LCD_enuSendCommand(u8 Copy_u8Command)
{
    465a:	df 93       	push	r29
    465c:	cf 93       	push	r28
    465e:	00 d0       	rcall	.+0      	; 0x4660 <LCD_enuSendCommand+0x6>
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState=DIO_OK;
    4666:	81 e0       	ldi	r24, 0x01	; 1
    4668:	89 83       	std	Y+1, r24	; 0x01
	//set RS as command
	DIO_SetPinValue(RS_PORT ,RS_PIN ,LOW);
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	65 e0       	ldi	r22, 0x05	; 5
    466e:	40 e0       	ldi	r20, 0x00	; 0
    4670:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	LCD_voidLatch( Copy_u8Command);
    4674:	8a 81       	ldd	r24, Y+2	; 0x02
    4676:	0e 94 38 28 	call	0x5070	; 0x5070 <LCD_voidLatch>

	return LOC_enumState;
    467a:	89 81       	ldd	r24, Y+1	; 0x01
}
    467c:	0f 90       	pop	r0
    467e:	0f 90       	pop	r0
    4680:	cf 91       	pop	r28
    4682:	df 91       	pop	r29
    4684:	08 95       	ret

00004686 <LCD_voidSendString>:

void LCD_voidSendString  ( u8 * Copy_u8ptrString )
{
    4686:	df 93       	push	r29
    4688:	cf 93       	push	r28
    468a:	00 d0       	rcall	.+0      	; 0x468c <LCD_voidSendString+0x6>
    468c:	0f 92       	push	r0
    468e:	cd b7       	in	r28, 0x3d	; 61
    4690:	de b7       	in	r29, 0x3e	; 62
    4692:	9b 83       	std	Y+3, r25	; 0x03
    4694:	8a 83       	std	Y+2, r24	; 0x02

	u8 LOC_u8Iterator=0;
    4696:	19 82       	std	Y+1, r1	; 0x01
    4698:	0e c0       	rjmp	.+28     	; 0x46b6 <LCD_voidSendString+0x30>

	while(Copy_u8ptrString[LOC_u8Iterator]!= '\0')
	{
		LCD_enuDisplayChar(Copy_u8ptrString[LOC_u8Iterator]);
    469a:	89 81       	ldd	r24, Y+1	; 0x01
    469c:	28 2f       	mov	r18, r24
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	8a 81       	ldd	r24, Y+2	; 0x02
    46a2:	9b 81       	ldd	r25, Y+3	; 0x03
    46a4:	fc 01       	movw	r30, r24
    46a6:	e2 0f       	add	r30, r18
    46a8:	f3 1f       	adc	r31, r19
    46aa:	80 81       	ld	r24, Z
    46ac:	0e 94 17 23 	call	0x462e	; 0x462e <LCD_enuDisplayChar>
		LOC_u8Iterator++;
    46b0:	89 81       	ldd	r24, Y+1	; 0x01
    46b2:	8f 5f       	subi	r24, 0xFF	; 255
    46b4:	89 83       	std	Y+1, r24	; 0x01
void LCD_voidSendString  ( u8 * Copy_u8ptrString )
{

	u8 LOC_u8Iterator=0;

	while(Copy_u8ptrString[LOC_u8Iterator]!= '\0')
    46b6:	89 81       	ldd	r24, Y+1	; 0x01
    46b8:	28 2f       	mov	r18, r24
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	8a 81       	ldd	r24, Y+2	; 0x02
    46be:	9b 81       	ldd	r25, Y+3	; 0x03
    46c0:	fc 01       	movw	r30, r24
    46c2:	e2 0f       	add	r30, r18
    46c4:	f3 1f       	adc	r31, r19
    46c6:	80 81       	ld	r24, Z
    46c8:	88 23       	and	r24, r24
    46ca:	39 f7       	brne	.-50     	; 0x469a <LCD_voidSendString+0x14>
		LCD_enuDisplayChar(Copy_u8ptrString[LOC_u8Iterator]);
		LOC_u8Iterator++;

	}

}
    46cc:	0f 90       	pop	r0
    46ce:	0f 90       	pop	r0
    46d0:	0f 90       	pop	r0
    46d2:	cf 91       	pop	r28
    46d4:	df 91       	pop	r29
    46d6:	08 95       	ret

000046d8 <LCD_voidSetPosition>:


void LCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col )
{
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	00 d0       	rcall	.+0      	; 0x46de <LCD_voidSetPosition+0x6>
    46de:	cd b7       	in	r28, 0x3d	; 61
    46e0:	de b7       	in	r29, 0x3e	; 62
    46e2:	89 83       	std	Y+1, r24	; 0x01
    46e4:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row==LCD_ROW_1)
    46e6:	89 81       	ldd	r24, Y+1	; 0x01
    46e8:	8f 36       	cpi	r24, 0x6F	; 111
    46ea:	29 f4       	brne	.+10     	; 0x46f6 <LCD_voidSetPosition+0x1e>
	{
		LCD_invidSendCommend((0x80) + ( Copy_u8Col - 1 ));
    46ec:	8a 81       	ldd	r24, Y+2	; 0x02
    46ee:	81 58       	subi	r24, 0x81	; 129
    46f0:	0e 94 d6 26 	call	0x4dac	; 0x4dac <LCD_invidSendCommend>
    46f4:	07 c0       	rjmp	.+14     	; 0x4704 <LCD_voidSetPosition+0x2c>
	}

	else if(Copy_u8Row==LCD_ROW_2)
    46f6:	89 81       	ldd	r24, Y+1	; 0x01
    46f8:	8e 3d       	cpi	r24, 0xDE	; 222
    46fa:	21 f4       	brne	.+8      	; 0x4704 <LCD_voidSetPosition+0x2c>
	{
		LCD_invidSendCommend((0x80)+64 + ( Copy_u8Col - 1 ));
    46fc:	8a 81       	ldd	r24, Y+2	; 0x02
    46fe:	81 54       	subi	r24, 0x41	; 65
    4700:	0e 94 d6 26 	call	0x4dac	; 0x4dac <LCD_invidSendCommend>

	}

}
    4704:	0f 90       	pop	r0
    4706:	0f 90       	pop	r0
    4708:	cf 91       	pop	r28
    470a:	df 91       	pop	r29
    470c:	08 95       	ret

0000470e <LCD_voidSendINTNum>:


void LCD_voidSendINTNum(u32 copy_u32Num)
{
    470e:	ef 92       	push	r14
    4710:	ff 92       	push	r15
    4712:	0f 93       	push	r16
    4714:	1f 93       	push	r17
    4716:	df 93       	push	r29
    4718:	cf 93       	push	r28
    471a:	cd b7       	in	r28, 0x3d	; 61
    471c:	de b7       	in	r29, 0x3e	; 62
    471e:	28 97       	sbiw	r28, 0x08	; 8
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	de bf       	out	0x3e, r29	; 62
    4726:	0f be       	out	0x3f, r0	; 63
    4728:	cd bf       	out	0x3d, r28	; 61
    472a:	6d 83       	std	Y+5, r22	; 0x05
    472c:	7e 83       	std	Y+6, r23	; 0x06
    472e:	8f 83       	std	Y+7, r24	; 0x07
    4730:	98 87       	std	Y+8, r25	; 0x08


	u32 LOC_u32Reversed = 1 ;
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	a0 e0       	ldi	r26, 0x00	; 0
    4738:	b0 e0       	ldi	r27, 0x00	; 0
    473a:	89 83       	std	Y+1, r24	; 0x01
    473c:	9a 83       	std	Y+2, r25	; 0x02
    473e:	ab 83       	std	Y+3, r26	; 0x03
    4740:	bc 83       	std	Y+4, r27	; 0x04

	if( copy_u32Num == 0 ){ LCD_enuDisplayChar('0'); }
    4742:	8d 81       	ldd	r24, Y+5	; 0x05
    4744:	9e 81       	ldd	r25, Y+6	; 0x06
    4746:	af 81       	ldd	r26, Y+7	; 0x07
    4748:	b8 85       	ldd	r27, Y+8	; 0x08
    474a:	00 97       	sbiw	r24, 0x00	; 0
    474c:	a1 05       	cpc	r26, r1
    474e:	b1 05       	cpc	r27, r1
    4750:	d1 f5       	brne	.+116    	; 0x47c6 <LCD_voidSendINTNum+0xb8>
    4752:	80 e3       	ldi	r24, 0x30	; 48
    4754:	0e 94 17 23 	call	0x462e	; 0x462e <LCD_enuDisplayChar>
    4758:	70 c0       	rjmp	.+224    	; 0x483a <LCD_voidSendINTNum+0x12c>

	else{

		while ( copy_u32Num != 0 ){

			LOC_u32Reversed = ( LOC_u32Reversed * 10 ) + ( copy_u32Num % 10 );
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	9a 81       	ldd	r25, Y+2	; 0x02
    475e:	ab 81       	ldd	r26, Y+3	; 0x03
    4760:	bc 81       	ldd	r27, Y+4	; 0x04
    4762:	2a e0       	ldi	r18, 0x0A	; 10
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	40 e0       	ldi	r20, 0x00	; 0
    4768:	50 e0       	ldi	r21, 0x00	; 0
    476a:	bc 01       	movw	r22, r24
    476c:	cd 01       	movw	r24, r26
    476e:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <__mulsi3>
    4772:	7b 01       	movw	r14, r22
    4774:	8c 01       	movw	r16, r24
    4776:	8d 81       	ldd	r24, Y+5	; 0x05
    4778:	9e 81       	ldd	r25, Y+6	; 0x06
    477a:	af 81       	ldd	r26, Y+7	; 0x07
    477c:	b8 85       	ldd	r27, Y+8	; 0x08
    477e:	2a e0       	ldi	r18, 0x0A	; 10
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	40 e0       	ldi	r20, 0x00	; 0
    4784:	50 e0       	ldi	r21, 0x00	; 0
    4786:	bc 01       	movw	r22, r24
    4788:	cd 01       	movw	r24, r26
    478a:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	8e 0d       	add	r24, r14
    4794:	9f 1d       	adc	r25, r15
    4796:	a0 1f       	adc	r26, r16
    4798:	b1 1f       	adc	r27, r17
    479a:	89 83       	std	Y+1, r24	; 0x01
    479c:	9a 83       	std	Y+2, r25	; 0x02
    479e:	ab 83       	std	Y+3, r26	; 0x03
    47a0:	bc 83       	std	Y+4, r27	; 0x04
			copy_u32Num /= 10 ;
    47a2:	8d 81       	ldd	r24, Y+5	; 0x05
    47a4:	9e 81       	ldd	r25, Y+6	; 0x06
    47a6:	af 81       	ldd	r26, Y+7	; 0x07
    47a8:	b8 85       	ldd	r27, Y+8	; 0x08
    47aa:	2a e0       	ldi	r18, 0x0A	; 10
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	40 e0       	ldi	r20, 0x00	; 0
    47b0:	50 e0       	ldi	r21, 0x00	; 0
    47b2:	bc 01       	movw	r22, r24
    47b4:	cd 01       	movw	r24, r26
    47b6:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    47ba:	da 01       	movw	r26, r20
    47bc:	c9 01       	movw	r24, r18
    47be:	8d 83       	std	Y+5, r24	; 0x05
    47c0:	9e 83       	std	Y+6, r25	; 0x06
    47c2:	af 83       	std	Y+7, r26	; 0x07
    47c4:	b8 87       	std	Y+8, r27	; 0x08

	if( copy_u32Num == 0 ){ LCD_enuDisplayChar('0'); }

	else{

		while ( copy_u32Num != 0 ){
    47c6:	8d 81       	ldd	r24, Y+5	; 0x05
    47c8:	9e 81       	ldd	r25, Y+6	; 0x06
    47ca:	af 81       	ldd	r26, Y+7	; 0x07
    47cc:	b8 85       	ldd	r27, Y+8	; 0x08
    47ce:	00 97       	sbiw	r24, 0x00	; 0
    47d0:	a1 05       	cpc	r26, r1
    47d2:	b1 05       	cpc	r27, r1
    47d4:	11 f6       	brne	.-124    	; 0x475a <LCD_voidSendINTNum+0x4c>
    47d6:	28 c0       	rjmp	.+80     	; 0x4828 <LCD_voidSendINTNum+0x11a>
			copy_u32Num /= 10 ;

		}

		while ( LOC_u32Reversed != 1 ){
			DIO_SetPinValue(RS_PORT,RS_PIN,HIGH);
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	65 e0       	ldi	r22, 0x05	; 5
    47dc:	41 e0       	ldi	r20, 0x01	; 1
    47de:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
			LCD_voidLatch( ( LOC_u32Reversed % 10 ) + 48 );
    47e2:	89 81       	ldd	r24, Y+1	; 0x01
    47e4:	9a 81       	ldd	r25, Y+2	; 0x02
    47e6:	ab 81       	ldd	r26, Y+3	; 0x03
    47e8:	bc 81       	ldd	r27, Y+4	; 0x04
    47ea:	2a e0       	ldi	r18, 0x0A	; 10
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	40 e0       	ldi	r20, 0x00	; 0
    47f0:	50 e0       	ldi	r21, 0x00	; 0
    47f2:	bc 01       	movw	r22, r24
    47f4:	cd 01       	movw	r24, r26
    47f6:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	80 5d       	subi	r24, 0xD0	; 208
    4800:	0e 94 38 28 	call	0x5070	; 0x5070 <LCD_voidLatch>
			LOC_u32Reversed /= 10 ;
    4804:	89 81       	ldd	r24, Y+1	; 0x01
    4806:	9a 81       	ldd	r25, Y+2	; 0x02
    4808:	ab 81       	ldd	r26, Y+3	; 0x03
    480a:	bc 81       	ldd	r27, Y+4	; 0x04
    480c:	2a e0       	ldi	r18, 0x0A	; 10
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	40 e0       	ldi	r20, 0x00	; 0
    4812:	50 e0       	ldi	r21, 0x00	; 0
    4814:	bc 01       	movw	r22, r24
    4816:	cd 01       	movw	r24, r26
    4818:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <__udivmodsi4>
    481c:	da 01       	movw	r26, r20
    481e:	c9 01       	movw	r24, r18
    4820:	89 83       	std	Y+1, r24	; 0x01
    4822:	9a 83       	std	Y+2, r25	; 0x02
    4824:	ab 83       	std	Y+3, r26	; 0x03
    4826:	bc 83       	std	Y+4, r27	; 0x04
			LOC_u32Reversed = ( LOC_u32Reversed * 10 ) + ( copy_u32Num % 10 );
			copy_u32Num /= 10 ;

		}

		while ( LOC_u32Reversed != 1 ){
    4828:	89 81       	ldd	r24, Y+1	; 0x01
    482a:	9a 81       	ldd	r25, Y+2	; 0x02
    482c:	ab 81       	ldd	r26, Y+3	; 0x03
    482e:	bc 81       	ldd	r27, Y+4	; 0x04
    4830:	81 30       	cpi	r24, 0x01	; 1
    4832:	91 05       	cpc	r25, r1
    4834:	a1 05       	cpc	r26, r1
    4836:	b1 05       	cpc	r27, r1
    4838:	79 f6       	brne	.-98     	; 0x47d8 <LCD_voidSendINTNum+0xca>
	}




}
    483a:	28 96       	adiw	r28, 0x08	; 8
    483c:	0f b6       	in	r0, 0x3f	; 63
    483e:	f8 94       	cli
    4840:	de bf       	out	0x3e, r29	; 62
    4842:	0f be       	out	0x3f, r0	; 63
    4844:	cd bf       	out	0x3d, r28	; 61
    4846:	cf 91       	pop	r28
    4848:	df 91       	pop	r29
    484a:	1f 91       	pop	r17
    484c:	0f 91       	pop	r16
    484e:	ff 90       	pop	r15
    4850:	ef 90       	pop	r14
    4852:	08 95       	ret

00004854 <LCD_voidSendExtraChar>:


void LCD_voidSendExtraChar(u8 *copy_u8Parr,u8 copy_u8CharNum,u8 copy_u8position,u8 copy_u8EntryMode)
{
    4854:	df 93       	push	r29
    4856:	cf 93       	push	r28
    4858:	00 d0       	rcall	.+0      	; 0x485a <LCD_voidSendExtraChar+0x6>
    485a:	00 d0       	rcall	.+0      	; 0x485c <LCD_voidSendExtraChar+0x8>
    485c:	00 d0       	rcall	.+0      	; 0x485e <LCD_voidSendExtraChar+0xa>
    485e:	cd b7       	in	r28, 0x3d	; 61
    4860:	de b7       	in	r29, 0x3e	; 62
    4862:	9b 83       	std	Y+3, r25	; 0x03
    4864:	8a 83       	std	Y+2, r24	; 0x02
    4866:	6c 83       	std	Y+4, r22	; 0x04
    4868:	4d 83       	std	Y+5, r20	; 0x05
    486a:	2e 83       	std	Y+6, r18	; 0x06
	u8 LOC_u8Iterator = 0 ;
    486c:	19 82       	std	Y+1, r1	; 0x01
	//Go To CGRAM
	LCD_invidSendCommend(0b01000000);
    486e:	80 e4       	ldi	r24, 0x40	; 64
    4870:	0e 94 d6 26 	call	0x4dac	; 0x4dac <LCD_invidSendCommend>
	// set RS as data
	DIO_SetPinValue(RS_PORT, RS_PIN,HIGH);
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	65 e0       	ldi	r22, 0x05	; 5
    4878:	41 e0       	ldi	r20, 0x01	; 1
    487a:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	//Draw Character
	for(LOC_u8Iterator=0;LOC_u8Iterator<(copy_u8CharNum*8);LOC_u8Iterator++)
    487e:	19 82       	std	Y+1, r1	; 0x01
    4880:	0e c0       	rjmp	.+28     	; 0x489e <LCD_voidSendExtraChar+0x4a>
	{
		LCD_voidLatch(copy_u8Parr[LOC_u8Iterator]);
    4882:	89 81       	ldd	r24, Y+1	; 0x01
    4884:	28 2f       	mov	r18, r24
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	8a 81       	ldd	r24, Y+2	; 0x02
    488a:	9b 81       	ldd	r25, Y+3	; 0x03
    488c:	fc 01       	movw	r30, r24
    488e:	e2 0f       	add	r30, r18
    4890:	f3 1f       	adc	r31, r19
    4892:	80 81       	ld	r24, Z
    4894:	0e 94 38 28 	call	0x5070	; 0x5070 <LCD_voidLatch>
	//Go To CGRAM
	LCD_invidSendCommend(0b01000000);
	// set RS as data
	DIO_SetPinValue(RS_PORT, RS_PIN,HIGH);
	//Draw Character
	for(LOC_u8Iterator=0;LOC_u8Iterator<(copy_u8CharNum*8);LOC_u8Iterator++)
    4898:	89 81       	ldd	r24, Y+1	; 0x01
    489a:	8f 5f       	subi	r24, 0xFF	; 255
    489c:	89 83       	std	Y+1, r24	; 0x01
    489e:	89 81       	ldd	r24, Y+1	; 0x01
    48a0:	28 2f       	mov	r18, r24
    48a2:	30 e0       	ldi	r19, 0x00	; 0
    48a4:	8c 81       	ldd	r24, Y+4	; 0x04
    48a6:	88 2f       	mov	r24, r24
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	88 0f       	add	r24, r24
    48ac:	99 1f       	adc	r25, r25
    48ae:	88 0f       	add	r24, r24
    48b0:	99 1f       	adc	r25, r25
    48b2:	88 0f       	add	r24, r24
    48b4:	99 1f       	adc	r25, r25
    48b6:	28 17       	cp	r18, r24
    48b8:	39 07       	cpc	r19, r25
    48ba:	1c f3       	brlt	.-58     	; 0x4882 <LCD_voidSendExtraChar+0x2e>
	{
		LCD_voidLatch(copy_u8Parr[LOC_u8Iterator]);
	}
	if(copy_u8EntryMode==0x04)
    48bc:	8e 81       	ldd	r24, Y+6	; 0x06
    48be:	84 30       	cpi	r24, 0x04	; 4
    48c0:	31 f4       	brne	.+12     	; 0x48ce <LCD_voidSendExtraChar+0x7a>
	{
		//return to DDRAM
		LCD_invidSendCommend(copy_u8position);
    48c2:	8d 81       	ldd	r24, Y+5	; 0x05
    48c4:	0e 94 d6 26 	call	0x4dac	; 0x4dac <LCD_invidSendCommend>
		LCD_invidSendCommend(copy_u8EntryMode);
    48c8:	8e 81       	ldd	r24, Y+6	; 0x06
    48ca:	0e 94 d6 26 	call	0x4dac	; 0x4dac <LCD_invidSendCommend>


	}
	//send address
	for(LOC_u8Iterator=0;LOC_u8Iterator<copy_u8CharNum;LOC_u8Iterator++)
    48ce:	19 82       	std	Y+1, r1	; 0x01
    48d0:	0b c0       	rjmp	.+22     	; 0x48e8 <LCD_voidSendExtraChar+0x94>
	{
		DIO_SetPinValue(RS_PORT, RS_PIN,HIGH);
    48d2:	80 e0       	ldi	r24, 0x00	; 0
    48d4:	65 e0       	ldi	r22, 0x05	; 5
    48d6:	41 e0       	ldi	r20, 0x01	; 1
    48d8:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
		LCD_voidLatch(LOC_u8Iterator);
    48dc:	89 81       	ldd	r24, Y+1	; 0x01
    48de:	0e 94 38 28 	call	0x5070	; 0x5070 <LCD_voidLatch>
		LCD_invidSendCommend(copy_u8EntryMode);


	}
	//send address
	for(LOC_u8Iterator=0;LOC_u8Iterator<copy_u8CharNum;LOC_u8Iterator++)
    48e2:	89 81       	ldd	r24, Y+1	; 0x01
    48e4:	8f 5f       	subi	r24, 0xFF	; 255
    48e6:	89 83       	std	Y+1, r24	; 0x01
    48e8:	99 81       	ldd	r25, Y+1	; 0x01
    48ea:	8c 81       	ldd	r24, Y+4	; 0x04
    48ec:	98 17       	cp	r25, r24
    48ee:	88 f3       	brcs	.-30     	; 0x48d2 <LCD_voidSendExtraChar+0x7e>
		LCD_voidLatch(LOC_u8Iterator);


	}

}
    48f0:	26 96       	adiw	r28, 0x06	; 6
    48f2:	0f b6       	in	r0, 0x3f	; 63
    48f4:	f8 94       	cli
    48f6:	de bf       	out	0x3e, r29	; 62
    48f8:	0f be       	out	0x3f, r0	; 63
    48fa:	cd bf       	out	0x3d, r28	; 61
    48fc:	cf 91       	pop	r28
    48fe:	df 91       	pop	r29
    4900:	08 95       	ret

00004902 <LCD_voidSendFloatNumber>:


void LCD_voidSendFloatNumber(f64 Copy_f64Number)
{
    4902:	2f 92       	push	r2
    4904:	3f 92       	push	r3
    4906:	4f 92       	push	r4
    4908:	5f 92       	push	r5
    490a:	6f 92       	push	r6
    490c:	7f 92       	push	r7
    490e:	8f 92       	push	r8
    4910:	9f 92       	push	r9
    4912:	af 92       	push	r10
    4914:	bf 92       	push	r11
    4916:	cf 92       	push	r12
    4918:	df 92       	push	r13
    491a:	ef 92       	push	r14
    491c:	ff 92       	push	r15
    491e:	0f 93       	push	r16
    4920:	1f 93       	push	r17
    4922:	df 93       	push	r29
    4924:	cf 93       	push	r28
    4926:	cd b7       	in	r28, 0x3d	; 61
    4928:	de b7       	in	r29, 0x3e	; 62
    492a:	ef 97       	sbiw	r28, 0x3f	; 63
    492c:	0f b6       	in	r0, 0x3f	; 63
    492e:	f8 94       	cli
    4930:	de bf       	out	0x3e, r29	; 62
    4932:	0f be       	out	0x3f, r0	; 63
    4934:	cd bf       	out	0x3d, r28	; 61
    4936:	69 87       	std	Y+9, r22	; 0x09
    4938:	7a 87       	std	Y+10, r23	; 0x0a
    493a:	8b 87       	std	Y+11, r24	; 0x0b
    493c:	9c 87       	std	Y+12, r25	; 0x0c


	// send int num
	LCD_voidSendINTNum((u64)Copy_f64Number );
    493e:	69 85       	ldd	r22, Y+9	; 0x09
    4940:	7a 85       	ldd	r23, Y+10	; 0x0a
    4942:	8b 85       	ldd	r24, Y+11	; 0x0b
    4944:	9c 85       	ldd	r25, Y+12	; 0x0c
    4946:	0e 94 75 00 	call	0xea	; 0xea <__fixunssfdi>
    494a:	a2 2e       	mov	r10, r18
    494c:	b3 2e       	mov	r11, r19
    494e:	c4 2e       	mov	r12, r20
    4950:	d5 2e       	mov	r13, r21
    4952:	e6 2e       	mov	r14, r22
    4954:	f7 2e       	mov	r15, r23
    4956:	08 2f       	mov	r16, r24
    4958:	19 2f       	mov	r17, r25
    495a:	d6 01       	movw	r26, r12
    495c:	c5 01       	movw	r24, r10
    495e:	bc 01       	movw	r22, r24
    4960:	cd 01       	movw	r24, r26
    4962:	0e 94 87 23 	call	0x470e	; 0x470e <LCD_voidSendINTNum>
	// Send decimal point
	LCD_enuDisplayChar('.');
    4966:	8e e2       	ldi	r24, 0x2E	; 46
    4968:	0e 94 17 23 	call	0x462e	; 0x462e <LCD_enuDisplayChar>

	// Multiply the Float Number by 10^6 so the decimal number becomes part number
	u64 Local_u64tempNumber = Copy_f64Number*1000000;
    496c:	69 85       	ldd	r22, Y+9	; 0x09
    496e:	7a 85       	ldd	r23, Y+10	; 0x0a
    4970:	8b 85       	ldd	r24, Y+11	; 0x0b
    4972:	9c 85       	ldd	r25, Y+12	; 0x0c
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	34 e2       	ldi	r19, 0x24	; 36
    4978:	44 e7       	ldi	r20, 0x74	; 116
    497a:	59 e4       	ldi	r21, 0x49	; 73
    497c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4980:	dc 01       	movw	r26, r24
    4982:	cb 01       	movw	r24, r22
    4984:	bc 01       	movw	r22, r24
    4986:	cd 01       	movw	r24, r26
    4988:	0e 94 75 00 	call	0xea	; 0xea <__fixunssfdi>
    498c:	a2 2e       	mov	r10, r18
    498e:	b3 2e       	mov	r11, r19
    4990:	c4 2e       	mov	r12, r20
    4992:	d5 2e       	mov	r13, r21
    4994:	e6 2e       	mov	r14, r22
    4996:	f7 2e       	mov	r15, r23
    4998:	08 2f       	mov	r16, r24
    499a:	19 2f       	mov	r17, r25
    499c:	a9 82       	std	Y+1, r10	; 0x01
    499e:	ba 82       	std	Y+2, r11	; 0x02
    49a0:	cb 82       	std	Y+3, r12	; 0x03
    49a2:	dc 82       	std	Y+4, r13	; 0x04
    49a4:	ed 82       	std	Y+5, r14	; 0x05
    49a6:	fe 82       	std	Y+6, r15	; 0x06
    49a8:	0f 83       	std	Y+7, r16	; 0x07
    49aa:	18 87       	std	Y+8, r17	; 0x08

	if( Local_u64tempNumber%10 >=5 )
    49ac:	a9 80       	ldd	r10, Y+1	; 0x01
    49ae:	ba 80       	ldd	r11, Y+2	; 0x02
    49b0:	cb 80       	ldd	r12, Y+3	; 0x03
    49b2:	dc 80       	ldd	r13, Y+4	; 0x04
    49b4:	ed 80       	ldd	r14, Y+5	; 0x05
    49b6:	fe 80       	ldd	r15, Y+6	; 0x06
    49b8:	0f 81       	ldd	r16, Y+7	; 0x07
    49ba:	18 85       	ldd	r17, Y+8	; 0x08
    49bc:	2a 2d       	mov	r18, r10
    49be:	3b 2d       	mov	r19, r11
    49c0:	4c 2d       	mov	r20, r12
    49c2:	5d 2d       	mov	r21, r13
    49c4:	6e 2d       	mov	r22, r14
    49c6:	7f 2d       	mov	r23, r15
    49c8:	80 2f       	mov	r24, r16
    49ca:	91 2f       	mov	r25, r17
    49cc:	0f 2e       	mov	r0, r31
    49ce:	fa e0       	ldi	r31, 0x0A	; 10
    49d0:	af 2e       	mov	r10, r31
    49d2:	f0 2d       	mov	r31, r0
    49d4:	bb 24       	eor	r11, r11
    49d6:	cc 24       	eor	r12, r12
    49d8:	dd 24       	eor	r13, r13
    49da:	ee 24       	eor	r14, r14
    49dc:	ff 24       	eor	r15, r15
    49de:	00 e0       	ldi	r16, 0x00	; 0
    49e0:	10 e0       	ldi	r17, 0x00	; 0
    49e2:	0e 94 92 07 	call	0xf24	; 0xf24 <__umoddi3>
    49e6:	a2 2e       	mov	r10, r18
    49e8:	b3 2e       	mov	r11, r19
    49ea:	c4 2e       	mov	r12, r20
    49ec:	d5 2e       	mov	r13, r21
    49ee:	e6 2e       	mov	r14, r22
    49f0:	f7 2e       	mov	r15, r23
    49f2:	08 2f       	mov	r16, r24
    49f4:	19 2f       	mov	r17, r25
    49f6:	ad 8a       	std	Y+21, r10	; 0x15
    49f8:	be 8a       	std	Y+22, r11	; 0x16
    49fa:	cf 8a       	std	Y+23, r12	; 0x17
    49fc:	d8 8e       	std	Y+24, r13	; 0x18
    49fe:	e9 8e       	std	Y+25, r14	; 0x19
    4a00:	fa 8e       	std	Y+26, r15	; 0x1a
    4a02:	0b 8f       	std	Y+27, r16	; 0x1b
    4a04:	1c 8f       	std	Y+28, r17	; 0x1c
    4a06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4a08:	88 23       	and	r24, r24
    4a0a:	91 f5       	brne	.+100    	; 0x4a70 <LCD_voidSendFloatNumber+0x16e>
    4a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a0e:	99 23       	and	r25, r25
    4a10:	09 f0       	breq	.+2      	; 0x4a14 <LCD_voidSendFloatNumber+0x112>
    4a12:	57 c1       	rjmp	.+686    	; 0x4cc2 <LCD_voidSendFloatNumber+0x3c0>
    4a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a16:	88 23       	and	r24, r24
    4a18:	59 f5       	brne	.+86     	; 0x4a70 <LCD_voidSendFloatNumber+0x16e>
    4a1a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4a1c:	99 23       	and	r25, r25
    4a1e:	09 f0       	breq	.+2      	; 0x4a22 <LCD_voidSendFloatNumber+0x120>
    4a20:	50 c1       	rjmp	.+672    	; 0x4cc2 <LCD_voidSendFloatNumber+0x3c0>
    4a22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4a24:	88 23       	and	r24, r24
    4a26:	21 f5       	brne	.+72     	; 0x4a70 <LCD_voidSendFloatNumber+0x16e>
    4a28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4a2a:	99 23       	and	r25, r25
    4a2c:	09 f0       	breq	.+2      	; 0x4a30 <LCD_voidSendFloatNumber+0x12e>
    4a2e:	49 c1       	rjmp	.+658    	; 0x4cc2 <LCD_voidSendFloatNumber+0x3c0>
    4a30:	89 8d       	ldd	r24, Y+25	; 0x19
    4a32:	88 23       	and	r24, r24
    4a34:	e9 f4       	brne	.+58     	; 0x4a70 <LCD_voidSendFloatNumber+0x16e>
    4a36:	99 8d       	ldd	r25, Y+25	; 0x19
    4a38:	99 23       	and	r25, r25
    4a3a:	09 f0       	breq	.+2      	; 0x4a3e <LCD_voidSendFloatNumber+0x13c>
    4a3c:	42 c1       	rjmp	.+644    	; 0x4cc2 <LCD_voidSendFloatNumber+0x3c0>
    4a3e:	88 8d       	ldd	r24, Y+24	; 0x18
    4a40:	88 23       	and	r24, r24
    4a42:	b1 f4       	brne	.+44     	; 0x4a70 <LCD_voidSendFloatNumber+0x16e>
    4a44:	98 8d       	ldd	r25, Y+24	; 0x18
    4a46:	99 23       	and	r25, r25
    4a48:	09 f0       	breq	.+2      	; 0x4a4c <LCD_voidSendFloatNumber+0x14a>
    4a4a:	3b c1       	rjmp	.+630    	; 0x4cc2 <LCD_voidSendFloatNumber+0x3c0>
    4a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a4e:	88 23       	and	r24, r24
    4a50:	79 f4       	brne	.+30     	; 0x4a70 <LCD_voidSendFloatNumber+0x16e>
    4a52:	9f 89       	ldd	r25, Y+23	; 0x17
    4a54:	99 23       	and	r25, r25
    4a56:	09 f0       	breq	.+2      	; 0x4a5a <LCD_voidSendFloatNumber+0x158>
    4a58:	34 c1       	rjmp	.+616    	; 0x4cc2 <LCD_voidSendFloatNumber+0x3c0>
    4a5a:	8e 89       	ldd	r24, Y+22	; 0x16
    4a5c:	88 23       	and	r24, r24
    4a5e:	41 f4       	brne	.+16     	; 0x4a70 <LCD_voidSendFloatNumber+0x16e>
    4a60:	9e 89       	ldd	r25, Y+22	; 0x16
    4a62:	99 23       	and	r25, r25
    4a64:	09 f0       	breq	.+2      	; 0x4a68 <LCD_voidSendFloatNumber+0x166>
    4a66:	2d c1       	rjmp	.+602    	; 0x4cc2 <LCD_voidSendFloatNumber+0x3c0>
    4a68:	8d 89       	ldd	r24, Y+21	; 0x15
    4a6a:	85 30       	cpi	r24, 0x05	; 5
    4a6c:	08 f4       	brcc	.+2      	; 0x4a70 <LCD_voidSendFloatNumber+0x16e>
    4a6e:	29 c1       	rjmp	.+594    	; 0x4cc2 <LCD_voidSendFloatNumber+0x3c0>
	{

		LCD_voidSendINTNum((u64)((( Local_u64tempNumber/10)+1) % 100000));
    4a70:	a9 80       	ldd	r10, Y+1	; 0x01
    4a72:	ba 80       	ldd	r11, Y+2	; 0x02
    4a74:	cb 80       	ldd	r12, Y+3	; 0x03
    4a76:	dc 80       	ldd	r13, Y+4	; 0x04
    4a78:	ed 80       	ldd	r14, Y+5	; 0x05
    4a7a:	fe 80       	ldd	r15, Y+6	; 0x06
    4a7c:	0f 81       	ldd	r16, Y+7	; 0x07
    4a7e:	18 85       	ldd	r17, Y+8	; 0x08
    4a80:	2a 2d       	mov	r18, r10
    4a82:	3b 2d       	mov	r19, r11
    4a84:	4c 2d       	mov	r20, r12
    4a86:	5d 2d       	mov	r21, r13
    4a88:	6e 2d       	mov	r22, r14
    4a8a:	7f 2d       	mov	r23, r15
    4a8c:	80 2f       	mov	r24, r16
    4a8e:	91 2f       	mov	r25, r17
    4a90:	0f 2e       	mov	r0, r31
    4a92:	fa e0       	ldi	r31, 0x0A	; 10
    4a94:	af 2e       	mov	r10, r31
    4a96:	f0 2d       	mov	r31, r0
    4a98:	bb 24       	eor	r11, r11
    4a9a:	cc 24       	eor	r12, r12
    4a9c:	dd 24       	eor	r13, r13
    4a9e:	ee 24       	eor	r14, r14
    4aa0:	ff 24       	eor	r15, r15
    4aa2:	00 e0       	ldi	r16, 0x00	; 0
    4aa4:	10 e0       	ldi	r17, 0x00	; 0
    4aa6:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivdi3>
    4aaa:	a2 2e       	mov	r10, r18
    4aac:	b3 2e       	mov	r11, r19
    4aae:	c4 2e       	mov	r12, r20
    4ab0:	d5 2e       	mov	r13, r21
    4ab2:	e6 2e       	mov	r14, r22
    4ab4:	f7 2e       	mov	r15, r23
    4ab6:	08 2f       	mov	r16, r24
    4ab8:	19 2f       	mov	r17, r25
    4aba:	ad 86       	std	Y+13, r10	; 0x0d
    4abc:	be 86       	std	Y+14, r11	; 0x0e
    4abe:	cf 86       	std	Y+15, r12	; 0x0f
    4ac0:	d8 8a       	std	Y+16, r13	; 0x10
    4ac2:	e9 8a       	std	Y+17, r14	; 0x11
    4ac4:	fa 8a       	std	Y+18, r15	; 0x12
    4ac6:	0b 8b       	std	Y+19, r16	; 0x13
    4ac8:	1c 8b       	std	Y+20, r17	; 0x14
    4aca:	91 e0       	ldi	r25, 0x01	; 1
    4acc:	9d 8f       	std	Y+29, r25	; 0x1d
    4ace:	1e 8e       	std	Y+30, r1	; 0x1e
    4ad0:	1f 8e       	std	Y+31, r1	; 0x1f
    4ad2:	18 a2       	std	Y+32, r1	; 0x20
    4ad4:	19 a2       	std	Y+33, r1	; 0x21
    4ad6:	1a a2       	std	Y+34, r1	; 0x22
    4ad8:	1b a2       	std	Y+35, r1	; 0x23
    4ada:	1c a2       	std	Y+36, r1	; 0x24
    4adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ade:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4ae0:	89 0f       	add	r24, r25
    4ae2:	8d a3       	std	Y+37, r24	; 0x25
    4ae4:	81 e0       	ldi	r24, 0x01	; 1
    4ae6:	8d a7       	std	Y+45, r24	; 0x2d
    4ae8:	9d a1       	ldd	r25, Y+37	; 0x25
    4aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aec:	98 17       	cp	r25, r24
    4aee:	08 f0       	brcs	.+2      	; 0x4af2 <LCD_voidSendFloatNumber+0x1f0>
    4af0:	1d a6       	std	Y+45, r1	; 0x2d
    4af2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4af4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4af6:	98 0f       	add	r25, r24
    4af8:	9e a3       	std	Y+38, r25	; 0x26
    4afa:	91 e0       	ldi	r25, 0x01	; 1
    4afc:	9e a7       	std	Y+46, r25	; 0x2e
    4afe:	8e a1       	ldd	r24, Y+38	; 0x26
    4b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b02:	89 17       	cp	r24, r25
    4b04:	08 f0       	brcs	.+2      	; 0x4b08 <LCD_voidSendFloatNumber+0x206>
    4b06:	1e a6       	std	Y+46, r1	; 0x2e
    4b08:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b0a:	9e a1       	ldd	r25, Y+38	; 0x26
    4b0c:	89 0f       	add	r24, r25
    4b0e:	8f a7       	std	Y+47, r24	; 0x2f
    4b10:	81 e0       	ldi	r24, 0x01	; 1
    4b12:	88 ab       	std	Y+48, r24	; 0x30
    4b14:	9f a5       	ldd	r25, Y+47	; 0x2f
    4b16:	8e a1       	ldd	r24, Y+38	; 0x26
    4b18:	98 17       	cp	r25, r24
    4b1a:	08 f0       	brcs	.+2      	; 0x4b1e <LCD_voidSendFloatNumber+0x21c>
    4b1c:	18 aa       	std	Y+48, r1	; 0x30
    4b1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b20:	88 a9       	ldd	r24, Y+48	; 0x30
    4b22:	98 2b       	or	r25, r24
    4b24:	9e a7       	std	Y+46, r25	; 0x2e
    4b26:	9f a5       	ldd	r25, Y+47	; 0x2f
    4b28:	9e a3       	std	Y+38, r25	; 0x26
    4b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b2e:	89 0f       	add	r24, r25
    4b30:	8f a3       	std	Y+39, r24	; 0x27
    4b32:	81 e0       	ldi	r24, 0x01	; 1
    4b34:	89 ab       	std	Y+49, r24	; 0x31
    4b36:	9f a1       	ldd	r25, Y+39	; 0x27
    4b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b3a:	98 17       	cp	r25, r24
    4b3c:	08 f0       	brcs	.+2      	; 0x4b40 <LCD_voidSendFloatNumber+0x23e>
    4b3e:	19 aa       	std	Y+49, r1	; 0x31
    4b40:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b42:	8f a1       	ldd	r24, Y+39	; 0x27
    4b44:	98 0f       	add	r25, r24
    4b46:	9a ab       	std	Y+50, r25	; 0x32
    4b48:	91 e0       	ldi	r25, 0x01	; 1
    4b4a:	9b ab       	std	Y+51, r25	; 0x33
    4b4c:	8a a9       	ldd	r24, Y+50	; 0x32
    4b4e:	9f a1       	ldd	r25, Y+39	; 0x27
    4b50:	89 17       	cp	r24, r25
    4b52:	08 f0       	brcs	.+2      	; 0x4b56 <LCD_voidSendFloatNumber+0x254>
    4b54:	1b aa       	std	Y+51, r1	; 0x33
    4b56:	89 a9       	ldd	r24, Y+49	; 0x31
    4b58:	9b a9       	ldd	r25, Y+51	; 0x33
    4b5a:	89 2b       	or	r24, r25
    4b5c:	89 ab       	std	Y+49, r24	; 0x31
    4b5e:	8a a9       	ldd	r24, Y+50	; 0x32
    4b60:	8f a3       	std	Y+39, r24	; 0x27
    4b62:	98 89       	ldd	r25, Y+16	; 0x10
    4b64:	88 a1       	ldd	r24, Y+32	; 0x20
    4b66:	98 0f       	add	r25, r24
    4b68:	98 a7       	std	Y+40, r25	; 0x28
    4b6a:	91 e0       	ldi	r25, 0x01	; 1
    4b6c:	9c ab       	std	Y+52, r25	; 0x34
    4b6e:	88 a5       	ldd	r24, Y+40	; 0x28
    4b70:	98 89       	ldd	r25, Y+16	; 0x10
    4b72:	89 17       	cp	r24, r25
    4b74:	08 f0       	brcs	.+2      	; 0x4b78 <LCD_voidSendFloatNumber+0x276>
    4b76:	1c aa       	std	Y+52, r1	; 0x34
    4b78:	89 a9       	ldd	r24, Y+49	; 0x31
    4b7a:	98 a5       	ldd	r25, Y+40	; 0x28
    4b7c:	89 0f       	add	r24, r25
    4b7e:	8d ab       	std	Y+53, r24	; 0x35
    4b80:	81 e0       	ldi	r24, 0x01	; 1
    4b82:	8e ab       	std	Y+54, r24	; 0x36
    4b84:	9d a9       	ldd	r25, Y+53	; 0x35
    4b86:	88 a5       	ldd	r24, Y+40	; 0x28
    4b88:	98 17       	cp	r25, r24
    4b8a:	08 f0       	brcs	.+2      	; 0x4b8e <LCD_voidSendFloatNumber+0x28c>
    4b8c:	1e aa       	std	Y+54, r1	; 0x36
    4b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    4b90:	8e a9       	ldd	r24, Y+54	; 0x36
    4b92:	98 2b       	or	r25, r24
    4b94:	9c ab       	std	Y+52, r25	; 0x34
    4b96:	9d a9       	ldd	r25, Y+53	; 0x35
    4b98:	98 a7       	std	Y+40, r25	; 0x28
    4b9a:	89 89       	ldd	r24, Y+17	; 0x11
    4b9c:	99 a1       	ldd	r25, Y+33	; 0x21
    4b9e:	89 0f       	add	r24, r25
    4ba0:	89 a7       	std	Y+41, r24	; 0x29
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	8f ab       	std	Y+55, r24	; 0x37
    4ba6:	99 a5       	ldd	r25, Y+41	; 0x29
    4ba8:	89 89       	ldd	r24, Y+17	; 0x11
    4baa:	98 17       	cp	r25, r24
    4bac:	08 f0       	brcs	.+2      	; 0x4bb0 <LCD_voidSendFloatNumber+0x2ae>
    4bae:	1f aa       	std	Y+55, r1	; 0x37
    4bb0:	9c a9       	ldd	r25, Y+52	; 0x34
    4bb2:	89 a5       	ldd	r24, Y+41	; 0x29
    4bb4:	98 0f       	add	r25, r24
    4bb6:	98 af       	std	Y+56, r25	; 0x38
    4bb8:	91 e0       	ldi	r25, 0x01	; 1
    4bba:	99 af       	std	Y+57, r25	; 0x39
    4bbc:	88 ad       	ldd	r24, Y+56	; 0x38
    4bbe:	99 a5       	ldd	r25, Y+41	; 0x29
    4bc0:	89 17       	cp	r24, r25
    4bc2:	08 f0       	brcs	.+2      	; 0x4bc6 <LCD_voidSendFloatNumber+0x2c4>
    4bc4:	19 ae       	std	Y+57, r1	; 0x39
    4bc6:	8f a9       	ldd	r24, Y+55	; 0x37
    4bc8:	99 ad       	ldd	r25, Y+57	; 0x39
    4bca:	89 2b       	or	r24, r25
    4bcc:	8f ab       	std	Y+55, r24	; 0x37
    4bce:	88 ad       	ldd	r24, Y+56	; 0x38
    4bd0:	89 a7       	std	Y+41, r24	; 0x29
    4bd2:	9a 89       	ldd	r25, Y+18	; 0x12
    4bd4:	8a a1       	ldd	r24, Y+34	; 0x22
    4bd6:	98 0f       	add	r25, r24
    4bd8:	9a a7       	std	Y+42, r25	; 0x2a
    4bda:	91 e0       	ldi	r25, 0x01	; 1
    4bdc:	9a af       	std	Y+58, r25	; 0x3a
    4bde:	8a a5       	ldd	r24, Y+42	; 0x2a
    4be0:	9a 89       	ldd	r25, Y+18	; 0x12
    4be2:	89 17       	cp	r24, r25
    4be4:	08 f0       	brcs	.+2      	; 0x4be8 <LCD_voidSendFloatNumber+0x2e6>
    4be6:	1a ae       	std	Y+58, r1	; 0x3a
    4be8:	8f a9       	ldd	r24, Y+55	; 0x37
    4bea:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bec:	89 0f       	add	r24, r25
    4bee:	8b af       	std	Y+59, r24	; 0x3b
    4bf0:	81 e0       	ldi	r24, 0x01	; 1
    4bf2:	8c af       	std	Y+60, r24	; 0x3c
    4bf4:	9b ad       	ldd	r25, Y+59	; 0x3b
    4bf6:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bf8:	98 17       	cp	r25, r24
    4bfa:	08 f0       	brcs	.+2      	; 0x4bfe <LCD_voidSendFloatNumber+0x2fc>
    4bfc:	1c ae       	std	Y+60, r1	; 0x3c
    4bfe:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c00:	8c ad       	ldd	r24, Y+60	; 0x3c
    4c02:	98 2b       	or	r25, r24
    4c04:	9a af       	std	Y+58, r25	; 0x3a
    4c06:	9b ad       	ldd	r25, Y+59	; 0x3b
    4c08:	9a a7       	std	Y+42, r25	; 0x2a
    4c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    4c0c:	9b a1       	ldd	r25, Y+35	; 0x23
    4c0e:	89 0f       	add	r24, r25
    4c10:	8b a7       	std	Y+43, r24	; 0x2b
    4c12:	81 e0       	ldi	r24, 0x01	; 1
    4c14:	8d af       	std	Y+61, r24	; 0x3d
    4c16:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c18:	8b 89       	ldd	r24, Y+19	; 0x13
    4c1a:	98 17       	cp	r25, r24
    4c1c:	08 f0       	brcs	.+2      	; 0x4c20 <LCD_voidSendFloatNumber+0x31e>
    4c1e:	1d ae       	std	Y+61, r1	; 0x3d
    4c20:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c22:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c24:	98 0f       	add	r25, r24
    4c26:	9e af       	std	Y+62, r25	; 0x3e
    4c28:	91 e0       	ldi	r25, 0x01	; 1
    4c2a:	9f af       	std	Y+63, r25	; 0x3f
    4c2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c2e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c30:	89 17       	cp	r24, r25
    4c32:	08 f0       	brcs	.+2      	; 0x4c36 <LCD_voidSendFloatNumber+0x334>
    4c34:	1f ae       	std	Y+63, r1	; 0x3f
    4c36:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c38:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c3a:	89 2b       	or	r24, r25
    4c3c:	8d af       	std	Y+61, r24	; 0x3d
    4c3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c40:	8b a7       	std	Y+43, r24	; 0x2b
    4c42:	9c 89       	ldd	r25, Y+20	; 0x14
    4c44:	8c a1       	ldd	r24, Y+36	; 0x24
    4c46:	98 0f       	add	r25, r24
    4c48:	9c a7       	std	Y+44, r25	; 0x2c
    4c4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4c4e:	89 0f       	add	r24, r25
    4c50:	8c a7       	std	Y+44, r24	; 0x2c
    4c52:	ad a0       	ldd	r10, Y+37	; 0x25
    4c54:	be a0       	ldd	r11, Y+38	; 0x26
    4c56:	cf a0       	ldd	r12, Y+39	; 0x27
    4c58:	d8 a4       	ldd	r13, Y+40	; 0x28
    4c5a:	e9 a4       	ldd	r14, Y+41	; 0x29
    4c5c:	fa a4       	ldd	r15, Y+42	; 0x2a
    4c5e:	0b a5       	ldd	r16, Y+43	; 0x2b
    4c60:	1c a5       	ldd	r17, Y+44	; 0x2c
    4c62:	2a 2d       	mov	r18, r10
    4c64:	3b 2d       	mov	r19, r11
    4c66:	4c 2d       	mov	r20, r12
    4c68:	5d 2d       	mov	r21, r13
    4c6a:	6e 2d       	mov	r22, r14
    4c6c:	7f 2d       	mov	r23, r15
    4c6e:	80 2f       	mov	r24, r16
    4c70:	91 2f       	mov	r25, r17
    4c72:	0f 2e       	mov	r0, r31
    4c74:	f0 ea       	ldi	r31, 0xA0	; 160
    4c76:	af 2e       	mov	r10, r31
    4c78:	f0 2d       	mov	r31, r0
    4c7a:	0f 2e       	mov	r0, r31
    4c7c:	f6 e8       	ldi	r31, 0x86	; 134
    4c7e:	bf 2e       	mov	r11, r31
    4c80:	f0 2d       	mov	r31, r0
    4c82:	cc 24       	eor	r12, r12
    4c84:	c3 94       	inc	r12
    4c86:	dd 24       	eor	r13, r13
    4c88:	ee 24       	eor	r14, r14
    4c8a:	ff 24       	eor	r15, r15
    4c8c:	00 e0       	ldi	r16, 0x00	; 0
    4c8e:	10 e0       	ldi	r17, 0x00	; 0
    4c90:	0e 94 92 07 	call	0xf24	; 0xf24 <__umoddi3>
    4c94:	a2 2e       	mov	r10, r18
    4c96:	b3 2e       	mov	r11, r19
    4c98:	c4 2e       	mov	r12, r20
    4c9a:	d5 2e       	mov	r13, r21
    4c9c:	e6 2e       	mov	r14, r22
    4c9e:	f7 2e       	mov	r15, r23
    4ca0:	08 2f       	mov	r16, r24
    4ca2:	19 2f       	mov	r17, r25
    4ca4:	2a 2d       	mov	r18, r10
    4ca6:	3b 2d       	mov	r19, r11
    4ca8:	4c 2d       	mov	r20, r12
    4caa:	5d 2d       	mov	r21, r13
    4cac:	6e 2d       	mov	r22, r14
    4cae:	7f 2d       	mov	r23, r15
    4cb0:	80 2f       	mov	r24, r16
    4cb2:	91 2f       	mov	r25, r17
    4cb4:	da 01       	movw	r26, r20
    4cb6:	c9 01       	movw	r24, r18
    4cb8:	bc 01       	movw	r22, r24
    4cba:	cd 01       	movw	r24, r26
    4cbc:	0e 94 87 23 	call	0x470e	; 0x470e <LCD_voidSendINTNum>
    4cc0:	5c c0       	rjmp	.+184    	; 0x4d7a <LCD_voidSendFloatNumber+0x478>
	}
	else
	{

		// Display the number
		LCD_voidSendINTNum((u64)(( Local_u64tempNumber/10) % 100000));
    4cc2:	a9 80       	ldd	r10, Y+1	; 0x01
    4cc4:	ba 80       	ldd	r11, Y+2	; 0x02
    4cc6:	cb 80       	ldd	r12, Y+3	; 0x03
    4cc8:	dc 80       	ldd	r13, Y+4	; 0x04
    4cca:	ed 80       	ldd	r14, Y+5	; 0x05
    4ccc:	fe 80       	ldd	r15, Y+6	; 0x06
    4cce:	0f 81       	ldd	r16, Y+7	; 0x07
    4cd0:	18 85       	ldd	r17, Y+8	; 0x08
    4cd2:	2a 2d       	mov	r18, r10
    4cd4:	3b 2d       	mov	r19, r11
    4cd6:	4c 2d       	mov	r20, r12
    4cd8:	5d 2d       	mov	r21, r13
    4cda:	6e 2d       	mov	r22, r14
    4cdc:	7f 2d       	mov	r23, r15
    4cde:	80 2f       	mov	r24, r16
    4ce0:	91 2f       	mov	r25, r17
    4ce2:	0f 2e       	mov	r0, r31
    4ce4:	fa e0       	ldi	r31, 0x0A	; 10
    4ce6:	af 2e       	mov	r10, r31
    4ce8:	f0 2d       	mov	r31, r0
    4cea:	bb 24       	eor	r11, r11
    4cec:	cc 24       	eor	r12, r12
    4cee:	dd 24       	eor	r13, r13
    4cf0:	ee 24       	eor	r14, r14
    4cf2:	ff 24       	eor	r15, r15
    4cf4:	00 e0       	ldi	r16, 0x00	; 0
    4cf6:	10 e0       	ldi	r17, 0x00	; 0
    4cf8:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivdi3>
    4cfc:	22 2e       	mov	r2, r18
    4cfe:	33 2e       	mov	r3, r19
    4d00:	44 2e       	mov	r4, r20
    4d02:	55 2e       	mov	r5, r21
    4d04:	66 2e       	mov	r6, r22
    4d06:	77 2e       	mov	r7, r23
    4d08:	88 2e       	mov	r8, r24
    4d0a:	99 2e       	mov	r9, r25
    4d0c:	a2 2c       	mov	r10, r2
    4d0e:	b3 2c       	mov	r11, r3
    4d10:	c4 2c       	mov	r12, r4
    4d12:	d5 2c       	mov	r13, r5
    4d14:	e6 2c       	mov	r14, r6
    4d16:	f7 2c       	mov	r15, r7
    4d18:	08 2d       	mov	r16, r8
    4d1a:	19 2d       	mov	r17, r9
    4d1c:	2a 2d       	mov	r18, r10
    4d1e:	3b 2d       	mov	r19, r11
    4d20:	4c 2d       	mov	r20, r12
    4d22:	5d 2d       	mov	r21, r13
    4d24:	6e 2d       	mov	r22, r14
    4d26:	7f 2d       	mov	r23, r15
    4d28:	80 2f       	mov	r24, r16
    4d2a:	91 2f       	mov	r25, r17
    4d2c:	0f 2e       	mov	r0, r31
    4d2e:	f0 ea       	ldi	r31, 0xA0	; 160
    4d30:	af 2e       	mov	r10, r31
    4d32:	f0 2d       	mov	r31, r0
    4d34:	0f 2e       	mov	r0, r31
    4d36:	f6 e8       	ldi	r31, 0x86	; 134
    4d38:	bf 2e       	mov	r11, r31
    4d3a:	f0 2d       	mov	r31, r0
    4d3c:	cc 24       	eor	r12, r12
    4d3e:	c3 94       	inc	r12
    4d40:	dd 24       	eor	r13, r13
    4d42:	ee 24       	eor	r14, r14
    4d44:	ff 24       	eor	r15, r15
    4d46:	00 e0       	ldi	r16, 0x00	; 0
    4d48:	10 e0       	ldi	r17, 0x00	; 0
    4d4a:	0e 94 92 07 	call	0xf24	; 0xf24 <__umoddi3>
    4d4e:	a2 2e       	mov	r10, r18
    4d50:	b3 2e       	mov	r11, r19
    4d52:	c4 2e       	mov	r12, r20
    4d54:	d5 2e       	mov	r13, r21
    4d56:	e6 2e       	mov	r14, r22
    4d58:	f7 2e       	mov	r15, r23
    4d5a:	08 2f       	mov	r16, r24
    4d5c:	19 2f       	mov	r17, r25
    4d5e:	2a 2d       	mov	r18, r10
    4d60:	3b 2d       	mov	r19, r11
    4d62:	4c 2d       	mov	r20, r12
    4d64:	5d 2d       	mov	r21, r13
    4d66:	6e 2d       	mov	r22, r14
    4d68:	7f 2d       	mov	r23, r15
    4d6a:	80 2f       	mov	r24, r16
    4d6c:	91 2f       	mov	r25, r17
    4d6e:	da 01       	movw	r26, r20
    4d70:	c9 01       	movw	r24, r18
    4d72:	bc 01       	movw	r22, r24
    4d74:	cd 01       	movw	r24, r26
    4d76:	0e 94 87 23 	call	0x470e	; 0x470e <LCD_voidSendINTNum>

	}


}
    4d7a:	ef 96       	adiw	r28, 0x3f	; 63
    4d7c:	0f b6       	in	r0, 0x3f	; 63
    4d7e:	f8 94       	cli
    4d80:	de bf       	out	0x3e, r29	; 62
    4d82:	0f be       	out	0x3f, r0	; 63
    4d84:	cd bf       	out	0x3d, r28	; 61
    4d86:	cf 91       	pop	r28
    4d88:	df 91       	pop	r29
    4d8a:	1f 91       	pop	r17
    4d8c:	0f 91       	pop	r16
    4d8e:	ff 90       	pop	r15
    4d90:	ef 90       	pop	r14
    4d92:	df 90       	pop	r13
    4d94:	cf 90       	pop	r12
    4d96:	bf 90       	pop	r11
    4d98:	af 90       	pop	r10
    4d9a:	9f 90       	pop	r9
    4d9c:	8f 90       	pop	r8
    4d9e:	7f 90       	pop	r7
    4da0:	6f 90       	pop	r6
    4da2:	5f 90       	pop	r5
    4da4:	4f 90       	pop	r4
    4da6:	3f 90       	pop	r3
    4da8:	2f 90       	pop	r2
    4daa:	08 95       	ret

00004dac <LCD_invidSendCommend>:

static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    4dac:	df 93       	push	r29
    4dae:	cf 93       	push	r28
    4db0:	cd b7       	in	r28, 0x3d	; 61
    4db2:	de b7       	in	r29, 0x3e	; 62
    4db4:	6d 97       	sbiw	r28, 0x1d	; 29
    4db6:	0f b6       	in	r0, 0x3f	; 63
    4db8:	f8 94       	cli
    4dba:	de bf       	out	0x3e, r29	; 62
    4dbc:	0f be       	out	0x3f, r0	; 63
    4dbe:	cd bf       	out	0x3d, r28	; 61
    4dc0:	8d 8f       	std	Y+29, r24	; 0x1d
	//set RS as command
	DIO_SetPinValue(RS_PORT ,RS_PIN ,LOW);
    4dc2:	80 e0       	ldi	r24, 0x00	; 0
    4dc4:	65 e0       	ldi	r22, 0x05	; 5
    4dc6:	40 e0       	ldi	r20, 0x00	; 0
    4dc8:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>

	// set RW as  write operation,EN LOW
	DIO_SetPinValue(RW_PORT, RW_PIN,LOW);
    4dcc:	80 e0       	ldi	r24, 0x00	; 0
    4dce:	66 e0       	ldi	r22, 0x06	; 6
    4dd0:	40 e0       	ldi	r20, 0x00	; 0
    4dd2:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(EN_PORT, EN_PIN,LOW);
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	67 e0       	ldi	r22, 0x07	; 7
    4dda:	40 e0       	ldi	r20, 0x00	; 0
    4ddc:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>

	//write data
	DIO_SetPinValue(D7_PORT, D7_PIN,GET_BIT(Copy_u8Command,7) );
    4de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4de2:	98 2f       	mov	r25, r24
    4de4:	99 1f       	adc	r25, r25
    4de6:	99 27       	eor	r25, r25
    4de8:	99 1f       	adc	r25, r25
    4dea:	83 e0       	ldi	r24, 0x03	; 3
    4dec:	67 e0       	ldi	r22, 0x07	; 7
    4dee:	49 2f       	mov	r20, r25
    4df0:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D6_PORT, D6_PIN, GET_BIT(Copy_u8Command,6) );
    4df4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4df6:	82 95       	swap	r24
    4df8:	86 95       	lsr	r24
    4dfa:	86 95       	lsr	r24
    4dfc:	83 70       	andi	r24, 0x03	; 3
    4dfe:	98 2f       	mov	r25, r24
    4e00:	91 70       	andi	r25, 0x01	; 1
    4e02:	83 e0       	ldi	r24, 0x03	; 3
    4e04:	66 e0       	ldi	r22, 0x06	; 6
    4e06:	49 2f       	mov	r20, r25
    4e08:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D5_PORT, D5_PIN, GET_BIT(Copy_u8Command,5)  );
    4e0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e0e:	82 95       	swap	r24
    4e10:	86 95       	lsr	r24
    4e12:	87 70       	andi	r24, 0x07	; 7
    4e14:	98 2f       	mov	r25, r24
    4e16:	91 70       	andi	r25, 0x01	; 1
    4e18:	83 e0       	ldi	r24, 0x03	; 3
    4e1a:	65 e0       	ldi	r22, 0x05	; 5
    4e1c:	49 2f       	mov	r20, r25
    4e1e:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D4_PORT, D4_PIN, GET_BIT(Copy_u8Command,4)  );
    4e22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e24:	82 95       	swap	r24
    4e26:	8f 70       	andi	r24, 0x0F	; 15
    4e28:	98 2f       	mov	r25, r24
    4e2a:	91 70       	andi	r25, 0x01	; 1
    4e2c:	83 e0       	ldi	r24, 0x03	; 3
    4e2e:	64 e0       	ldi	r22, 0x04	; 4
    4e30:	49 2f       	mov	r20, r25
    4e32:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>

#if LCD_MODE==EIGHT_BIT

	DIO_SetPinValue(D3_PORT, D3_PIN,GET_BIT(Copy_u8Command,3) );
    4e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e38:	86 95       	lsr	r24
    4e3a:	86 95       	lsr	r24
    4e3c:	86 95       	lsr	r24
    4e3e:	98 2f       	mov	r25, r24
    4e40:	91 70       	andi	r25, 0x01	; 1
    4e42:	83 e0       	ldi	r24, 0x03	; 3
    4e44:	63 e0       	ldi	r22, 0x03	; 3
    4e46:	49 2f       	mov	r20, r25
    4e48:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D2_PORT, D2_PIN, GET_BIT(Copy_u8Command,2) );
    4e4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e4e:	86 95       	lsr	r24
    4e50:	86 95       	lsr	r24
    4e52:	98 2f       	mov	r25, r24
    4e54:	91 70       	andi	r25, 0x01	; 1
    4e56:	83 e0       	ldi	r24, 0x03	; 3
    4e58:	62 e0       	ldi	r22, 0x02	; 2
    4e5a:	49 2f       	mov	r20, r25
    4e5c:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D1_PORT, D1_PIN, GET_BIT(Copy_u8Command,1) );
    4e60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e62:	86 95       	lsr	r24
    4e64:	98 2f       	mov	r25, r24
    4e66:	91 70       	andi	r25, 0x01	; 1
    4e68:	83 e0       	ldi	r24, 0x03	; 3
    4e6a:	61 e0       	ldi	r22, 0x01	; 1
    4e6c:	49 2f       	mov	r20, r25
    4e6e:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D0_PORT, D0_PIN, GET_BIT(Copy_u8Command,0) );
    4e72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e74:	98 2f       	mov	r25, r24
    4e76:	91 70       	andi	r25, 0x01	; 1
    4e78:	83 e0       	ldi	r24, 0x03	; 3
    4e7a:	60 e0       	ldi	r22, 0x00	; 0
    4e7c:	49 2f       	mov	r20, r25
    4e7e:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>


#endif

	// falling edge
	DIO_SetPinValue(EN_PORT, EN_PIN,HIGH);
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	67 e0       	ldi	r22, 0x07	; 7
    4e86:	41 e0       	ldi	r20, 0x01	; 1
    4e88:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
    4e8c:	80 e0       	ldi	r24, 0x00	; 0
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	a0 e2       	ldi	r26, 0x20	; 32
    4e92:	b1 e4       	ldi	r27, 0x41	; 65
    4e94:	89 8f       	std	Y+25, r24	; 0x19
    4e96:	9a 8f       	std	Y+26, r25	; 0x1a
    4e98:	ab 8f       	std	Y+27, r26	; 0x1b
    4e9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e9c:	69 8d       	ldd	r22, Y+25	; 0x19
    4e9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ea0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ea2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ea4:	20 e0       	ldi	r18, 0x00	; 0
    4ea6:	30 e0       	ldi	r19, 0x00	; 0
    4ea8:	4a ef       	ldi	r20, 0xFA	; 250
    4eaa:	54 e4       	ldi	r21, 0x44	; 68
    4eac:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4eb0:	dc 01       	movw	r26, r24
    4eb2:	cb 01       	movw	r24, r22
    4eb4:	8d 8b       	std	Y+21, r24	; 0x15
    4eb6:	9e 8b       	std	Y+22, r25	; 0x16
    4eb8:	af 8b       	std	Y+23, r26	; 0x17
    4eba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ebc:	6d 89       	ldd	r22, Y+21	; 0x15
    4ebe:	7e 89       	ldd	r23, Y+22	; 0x16
    4ec0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ec2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ec4:	20 e0       	ldi	r18, 0x00	; 0
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	40 e8       	ldi	r20, 0x80	; 128
    4eca:	5f e3       	ldi	r21, 0x3F	; 63
    4ecc:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    4ed0:	88 23       	and	r24, r24
    4ed2:	2c f4       	brge	.+10     	; 0x4ede <LCD_invidSendCommend+0x132>
		__ticks = 1;
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	9c 8b       	std	Y+20, r25	; 0x14
    4eda:	8b 8b       	std	Y+19, r24	; 0x13
    4edc:	3f c0       	rjmp	.+126    	; 0x4f5c <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    4ede:	6d 89       	ldd	r22, Y+21	; 0x15
    4ee0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	3f ef       	ldi	r19, 0xFF	; 255
    4eea:	4f e7       	ldi	r20, 0x7F	; 127
    4eec:	57 e4       	ldi	r21, 0x47	; 71
    4eee:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    4ef2:	18 16       	cp	r1, r24
    4ef4:	4c f5       	brge	.+82     	; 0x4f48 <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef6:	69 8d       	ldd	r22, Y+25	; 0x19
    4ef8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4efa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4efc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4efe:	20 e0       	ldi	r18, 0x00	; 0
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	40 e2       	ldi	r20, 0x20	; 32
    4f04:	51 e4       	ldi	r21, 0x41	; 65
    4f06:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	cb 01       	movw	r24, r22
    4f0e:	bc 01       	movw	r22, r24
    4f10:	cd 01       	movw	r24, r26
    4f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f16:	dc 01       	movw	r26, r24
    4f18:	cb 01       	movw	r24, r22
    4f1a:	9c 8b       	std	Y+20, r25	; 0x14
    4f1c:	8b 8b       	std	Y+19, r24	; 0x13
    4f1e:	0f c0       	rjmp	.+30     	; 0x4f3e <LCD_invidSendCommend+0x192>
    4f20:	88 ec       	ldi	r24, 0xC8	; 200
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	9a 8b       	std	Y+18, r25	; 0x12
    4f26:	89 8b       	std	Y+17, r24	; 0x11
    4f28:	89 89       	ldd	r24, Y+17	; 0x11
    4f2a:	9a 89       	ldd	r25, Y+18	; 0x12
    4f2c:	01 97       	sbiw	r24, 0x01	; 1
    4f2e:	f1 f7       	brne	.-4      	; 0x4f2c <LCD_invidSendCommend+0x180>
    4f30:	9a 8b       	std	Y+18, r25	; 0x12
    4f32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f34:	8b 89       	ldd	r24, Y+19	; 0x13
    4f36:	9c 89       	ldd	r25, Y+20	; 0x14
    4f38:	01 97       	sbiw	r24, 0x01	; 1
    4f3a:	9c 8b       	std	Y+20, r25	; 0x14
    4f3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f3e:	8b 89       	ldd	r24, Y+19	; 0x13
    4f40:	9c 89       	ldd	r25, Y+20	; 0x14
    4f42:	00 97       	sbiw	r24, 0x00	; 0
    4f44:	69 f7       	brne	.-38     	; 0x4f20 <LCD_invidSendCommend+0x174>
    4f46:	14 c0       	rjmp	.+40     	; 0x4f70 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f48:	6d 89       	ldd	r22, Y+21	; 0x15
    4f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    4f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f54:	dc 01       	movw	r26, r24
    4f56:	cb 01       	movw	r24, r22
    4f58:	9c 8b       	std	Y+20, r25	; 0x14
    4f5a:	8b 8b       	std	Y+19, r24	; 0x13
    4f5c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f5e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f60:	98 8b       	std	Y+16, r25	; 0x10
    4f62:	8f 87       	std	Y+15, r24	; 0x0f
    4f64:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f66:	98 89       	ldd	r25, Y+16	; 0x10
    4f68:	01 97       	sbiw	r24, 0x01	; 1
    4f6a:	f1 f7       	brne	.-4      	; 0x4f68 <LCD_invidSendCommend+0x1bc>
    4f6c:	98 8b       	std	Y+16, r25	; 0x10
    4f6e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_SetPinValue(EN_PORT, EN_PIN,LOW);
    4f70:	80 e0       	ldi	r24, 0x00	; 0
    4f72:	67 e0       	ldi	r22, 0x07	; 7
    4f74:	40 e0       	ldi	r20, 0x00	; 0
    4f76:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
    4f7a:	80 e0       	ldi	r24, 0x00	; 0
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	a0 e2       	ldi	r26, 0x20	; 32
    4f80:	b1 e4       	ldi	r27, 0x41	; 65
    4f82:	8b 87       	std	Y+11, r24	; 0x0b
    4f84:	9c 87       	std	Y+12, r25	; 0x0c
    4f86:	ad 87       	std	Y+13, r26	; 0x0d
    4f88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f92:	20 e0       	ldi	r18, 0x00	; 0
    4f94:	30 e0       	ldi	r19, 0x00	; 0
    4f96:	4a ef       	ldi	r20, 0xFA	; 250
    4f98:	54 e4       	ldi	r21, 0x44	; 68
    4f9a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4f9e:	dc 01       	movw	r26, r24
    4fa0:	cb 01       	movw	r24, r22
    4fa2:	8f 83       	std	Y+7, r24	; 0x07
    4fa4:	98 87       	std	Y+8, r25	; 0x08
    4fa6:	a9 87       	std	Y+9, r26	; 0x09
    4fa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4faa:	6f 81       	ldd	r22, Y+7	; 0x07
    4fac:	78 85       	ldd	r23, Y+8	; 0x08
    4fae:	89 85       	ldd	r24, Y+9	; 0x09
    4fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fb2:	20 e0       	ldi	r18, 0x00	; 0
    4fb4:	30 e0       	ldi	r19, 0x00	; 0
    4fb6:	40 e8       	ldi	r20, 0x80	; 128
    4fb8:	5f e3       	ldi	r21, 0x3F	; 63
    4fba:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    4fbe:	88 23       	and	r24, r24
    4fc0:	2c f4       	brge	.+10     	; 0x4fcc <LCD_invidSendCommend+0x220>
		__ticks = 1;
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	9e 83       	std	Y+6, r25	; 0x06
    4fc8:	8d 83       	std	Y+5, r24	; 0x05
    4fca:	3f c0       	rjmp	.+126    	; 0x504a <LCD_invidSendCommend+0x29e>
	else if (__tmp > 65535)
    4fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    4fce:	78 85       	ldd	r23, Y+8	; 0x08
    4fd0:	89 85       	ldd	r24, Y+9	; 0x09
    4fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fd4:	20 e0       	ldi	r18, 0x00	; 0
    4fd6:	3f ef       	ldi	r19, 0xFF	; 255
    4fd8:	4f e7       	ldi	r20, 0x7F	; 127
    4fda:	57 e4       	ldi	r21, 0x47	; 71
    4fdc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    4fe0:	18 16       	cp	r1, r24
    4fe2:	4c f5       	brge	.+82     	; 0x5036 <LCD_invidSendCommend+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fec:	20 e0       	ldi	r18, 0x00	; 0
    4fee:	30 e0       	ldi	r19, 0x00	; 0
    4ff0:	40 e2       	ldi	r20, 0x20	; 32
    4ff2:	51 e4       	ldi	r21, 0x41	; 65
    4ff4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4ff8:	dc 01       	movw	r26, r24
    4ffa:	cb 01       	movw	r24, r22
    4ffc:	bc 01       	movw	r22, r24
    4ffe:	cd 01       	movw	r24, r26
    5000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5004:	dc 01       	movw	r26, r24
    5006:	cb 01       	movw	r24, r22
    5008:	9e 83       	std	Y+6, r25	; 0x06
    500a:	8d 83       	std	Y+5, r24	; 0x05
    500c:	0f c0       	rjmp	.+30     	; 0x502c <LCD_invidSendCommend+0x280>
    500e:	88 ec       	ldi	r24, 0xC8	; 200
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	9c 83       	std	Y+4, r25	; 0x04
    5014:	8b 83       	std	Y+3, r24	; 0x03
    5016:	8b 81       	ldd	r24, Y+3	; 0x03
    5018:	9c 81       	ldd	r25, Y+4	; 0x04
    501a:	01 97       	sbiw	r24, 0x01	; 1
    501c:	f1 f7       	brne	.-4      	; 0x501a <LCD_invidSendCommend+0x26e>
    501e:	9c 83       	std	Y+4, r25	; 0x04
    5020:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5022:	8d 81       	ldd	r24, Y+5	; 0x05
    5024:	9e 81       	ldd	r25, Y+6	; 0x06
    5026:	01 97       	sbiw	r24, 0x01	; 1
    5028:	9e 83       	std	Y+6, r25	; 0x06
    502a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    502c:	8d 81       	ldd	r24, Y+5	; 0x05
    502e:	9e 81       	ldd	r25, Y+6	; 0x06
    5030:	00 97       	sbiw	r24, 0x00	; 0
    5032:	69 f7       	brne	.-38     	; 0x500e <LCD_invidSendCommend+0x262>
    5034:	14 c0       	rjmp	.+40     	; 0x505e <LCD_invidSendCommend+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5036:	6f 81       	ldd	r22, Y+7	; 0x07
    5038:	78 85       	ldd	r23, Y+8	; 0x08
    503a:	89 85       	ldd	r24, Y+9	; 0x09
    503c:	9a 85       	ldd	r25, Y+10	; 0x0a
    503e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5042:	dc 01       	movw	r26, r24
    5044:	cb 01       	movw	r24, r22
    5046:	9e 83       	std	Y+6, r25	; 0x06
    5048:	8d 83       	std	Y+5, r24	; 0x05
    504a:	8d 81       	ldd	r24, Y+5	; 0x05
    504c:	9e 81       	ldd	r25, Y+6	; 0x06
    504e:	9a 83       	std	Y+2, r25	; 0x02
    5050:	89 83       	std	Y+1, r24	; 0x01
    5052:	89 81       	ldd	r24, Y+1	; 0x01
    5054:	9a 81       	ldd	r25, Y+2	; 0x02
    5056:	01 97       	sbiw	r24, 0x01	; 1
    5058:	f1 f7       	brne	.-4      	; 0x5056 <LCD_invidSendCommend+0x2aa>
    505a:	9a 83       	std	Y+2, r25	; 0x02
    505c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    505e:	6d 96       	adiw	r28, 0x1d	; 29
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	f8 94       	cli
    5064:	de bf       	out	0x3e, r29	; 62
    5066:	0f be       	out	0x3f, r0	; 63
    5068:	cd bf       	out	0x3d, r28	; 61
    506a:	cf 91       	pop	r28
    506c:	df 91       	pop	r29
    506e:	08 95       	ret

00005070 <LCD_voidLatch>:




static void LCD_voidLatch(u8 copy_u8Data)
{
    5070:	df 93       	push	r29
    5072:	cf 93       	push	r28
    5074:	cd b7       	in	r28, 0x3d	; 61
    5076:	de b7       	in	r29, 0x3e	; 62
    5078:	6d 97       	sbiw	r28, 0x1d	; 29
    507a:	0f b6       	in	r0, 0x3f	; 63
    507c:	f8 94       	cli
    507e:	de bf       	out	0x3e, r29	; 62
    5080:	0f be       	out	0x3f, r0	; 63
    5082:	cd bf       	out	0x3d, r28	; 61
    5084:	8d 8f       	std	Y+29, r24	; 0x1d

	// set RW as  write operation,EN LOW
	DIO_SetPinValue(RW_PORT, RW_PIN,LOW);
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	66 e0       	ldi	r22, 0x06	; 6
    508a:	40 e0       	ldi	r20, 0x00	; 0
    508c:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(EN_PORT, EN_PIN,LOW);
    5090:	80 e0       	ldi	r24, 0x00	; 0
    5092:	67 e0       	ldi	r22, 0x07	; 7
    5094:	40 e0       	ldi	r20, 0x00	; 0
    5096:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>

	//write data
	DIO_SetPinValue(D7_PORT, D7_PIN,GET_BIT (copy_u8Data,7) );
    509a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    509c:	98 2f       	mov	r25, r24
    509e:	99 1f       	adc	r25, r25
    50a0:	99 27       	eor	r25, r25
    50a2:	99 1f       	adc	r25, r25
    50a4:	83 e0       	ldi	r24, 0x03	; 3
    50a6:	67 e0       	ldi	r22, 0x07	; 7
    50a8:	49 2f       	mov	r20, r25
    50aa:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D6_PORT, D6_PIN, GET_BIT(copy_u8Data,6) );
    50ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50b0:	82 95       	swap	r24
    50b2:	86 95       	lsr	r24
    50b4:	86 95       	lsr	r24
    50b6:	83 70       	andi	r24, 0x03	; 3
    50b8:	98 2f       	mov	r25, r24
    50ba:	91 70       	andi	r25, 0x01	; 1
    50bc:	83 e0       	ldi	r24, 0x03	; 3
    50be:	66 e0       	ldi	r22, 0x06	; 6
    50c0:	49 2f       	mov	r20, r25
    50c2:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D5_PORT, D5_PIN, GET_BIT(copy_u8Data,5)  );
    50c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50c8:	82 95       	swap	r24
    50ca:	86 95       	lsr	r24
    50cc:	87 70       	andi	r24, 0x07	; 7
    50ce:	98 2f       	mov	r25, r24
    50d0:	91 70       	andi	r25, 0x01	; 1
    50d2:	83 e0       	ldi	r24, 0x03	; 3
    50d4:	65 e0       	ldi	r22, 0x05	; 5
    50d6:	49 2f       	mov	r20, r25
    50d8:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D4_PORT, D4_PIN, GET_BIT(copy_u8Data,4)  );
    50dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50de:	82 95       	swap	r24
    50e0:	8f 70       	andi	r24, 0x0F	; 15
    50e2:	98 2f       	mov	r25, r24
    50e4:	91 70       	andi	r25, 0x01	; 1
    50e6:	83 e0       	ldi	r24, 0x03	; 3
    50e8:	64 e0       	ldi	r22, 0x04	; 4
    50ea:	49 2f       	mov	r20, r25
    50ec:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>

#if LCD_MODE==EIGHT_BIT

	DIO_SetPinValue(D3_PORT, D3_PIN,GET_BIT (copy_u8Data,3) );
    50f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50f2:	86 95       	lsr	r24
    50f4:	86 95       	lsr	r24
    50f6:	86 95       	lsr	r24
    50f8:	98 2f       	mov	r25, r24
    50fa:	91 70       	andi	r25, 0x01	; 1
    50fc:	83 e0       	ldi	r24, 0x03	; 3
    50fe:	63 e0       	ldi	r22, 0x03	; 3
    5100:	49 2f       	mov	r20, r25
    5102:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D2_PORT, D2_PIN, GET_BIT(copy_u8Data,2) );
    5106:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5108:	86 95       	lsr	r24
    510a:	86 95       	lsr	r24
    510c:	98 2f       	mov	r25, r24
    510e:	91 70       	andi	r25, 0x01	; 1
    5110:	83 e0       	ldi	r24, 0x03	; 3
    5112:	62 e0       	ldi	r22, 0x02	; 2
    5114:	49 2f       	mov	r20, r25
    5116:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D1_PORT, D1_PIN, GET_BIT(copy_u8Data,1) );
    511a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    511c:	86 95       	lsr	r24
    511e:	98 2f       	mov	r25, r24
    5120:	91 70       	andi	r25, 0x01	; 1
    5122:	83 e0       	ldi	r24, 0x03	; 3
    5124:	61 e0       	ldi	r22, 0x01	; 1
    5126:	49 2f       	mov	r20, r25
    5128:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
	DIO_SetPinValue(D0_PORT, D0_PIN, GET_BIT(copy_u8Data,0) );
    512c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    512e:	98 2f       	mov	r25, r24
    5130:	91 70       	andi	r25, 0x01	; 1
    5132:	83 e0       	ldi	r24, 0x03	; 3
    5134:	60 e0       	ldi	r22, 0x00	; 0
    5136:	49 2f       	mov	r20, r25
    5138:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>


#endif

	// falling edge
	DIO_SetPinValue(EN_PORT, EN_PIN,HIGH);
    513c:	80 e0       	ldi	r24, 0x00	; 0
    513e:	67 e0       	ldi	r22, 0x07	; 7
    5140:	41 e0       	ldi	r20, 0x01	; 1
    5142:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	a0 e2       	ldi	r26, 0x20	; 32
    514c:	b1 e4       	ldi	r27, 0x41	; 65
    514e:	89 8f       	std	Y+25, r24	; 0x19
    5150:	9a 8f       	std	Y+26, r25	; 0x1a
    5152:	ab 8f       	std	Y+27, r26	; 0x1b
    5154:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5156:	69 8d       	ldd	r22, Y+25	; 0x19
    5158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    515a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    515c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    515e:	20 e0       	ldi	r18, 0x00	; 0
    5160:	30 e0       	ldi	r19, 0x00	; 0
    5162:	4a ef       	ldi	r20, 0xFA	; 250
    5164:	54 e4       	ldi	r21, 0x44	; 68
    5166:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    516a:	dc 01       	movw	r26, r24
    516c:	cb 01       	movw	r24, r22
    516e:	8d 8b       	std	Y+21, r24	; 0x15
    5170:	9e 8b       	std	Y+22, r25	; 0x16
    5172:	af 8b       	std	Y+23, r26	; 0x17
    5174:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5176:	6d 89       	ldd	r22, Y+21	; 0x15
    5178:	7e 89       	ldd	r23, Y+22	; 0x16
    517a:	8f 89       	ldd	r24, Y+23	; 0x17
    517c:	98 8d       	ldd	r25, Y+24	; 0x18
    517e:	20 e0       	ldi	r18, 0x00	; 0
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	40 e8       	ldi	r20, 0x80	; 128
    5184:	5f e3       	ldi	r21, 0x3F	; 63
    5186:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    518a:	88 23       	and	r24, r24
    518c:	2c f4       	brge	.+10     	; 0x5198 <LCD_voidLatch+0x128>
		__ticks = 1;
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	9c 8b       	std	Y+20, r25	; 0x14
    5194:	8b 8b       	std	Y+19, r24	; 0x13
    5196:	3f c0       	rjmp	.+126    	; 0x5216 <LCD_voidLatch+0x1a6>
	else if (__tmp > 65535)
    5198:	6d 89       	ldd	r22, Y+21	; 0x15
    519a:	7e 89       	ldd	r23, Y+22	; 0x16
    519c:	8f 89       	ldd	r24, Y+23	; 0x17
    519e:	98 8d       	ldd	r25, Y+24	; 0x18
    51a0:	20 e0       	ldi	r18, 0x00	; 0
    51a2:	3f ef       	ldi	r19, 0xFF	; 255
    51a4:	4f e7       	ldi	r20, 0x7F	; 127
    51a6:	57 e4       	ldi	r21, 0x47	; 71
    51a8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    51ac:	18 16       	cp	r1, r24
    51ae:	4c f5       	brge	.+82     	; 0x5202 <LCD_voidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51b0:	69 8d       	ldd	r22, Y+25	; 0x19
    51b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51b8:	20 e0       	ldi	r18, 0x00	; 0
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	40 e2       	ldi	r20, 0x20	; 32
    51be:	51 e4       	ldi	r21, 0x41	; 65
    51c0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    51c4:	dc 01       	movw	r26, r24
    51c6:	cb 01       	movw	r24, r22
    51c8:	bc 01       	movw	r22, r24
    51ca:	cd 01       	movw	r24, r26
    51cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51d0:	dc 01       	movw	r26, r24
    51d2:	cb 01       	movw	r24, r22
    51d4:	9c 8b       	std	Y+20, r25	; 0x14
    51d6:	8b 8b       	std	Y+19, r24	; 0x13
    51d8:	0f c0       	rjmp	.+30     	; 0x51f8 <LCD_voidLatch+0x188>
    51da:	88 ec       	ldi	r24, 0xC8	; 200
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	9a 8b       	std	Y+18, r25	; 0x12
    51e0:	89 8b       	std	Y+17, r24	; 0x11
    51e2:	89 89       	ldd	r24, Y+17	; 0x11
    51e4:	9a 89       	ldd	r25, Y+18	; 0x12
    51e6:	01 97       	sbiw	r24, 0x01	; 1
    51e8:	f1 f7       	brne	.-4      	; 0x51e6 <LCD_voidLatch+0x176>
    51ea:	9a 8b       	std	Y+18, r25	; 0x12
    51ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51ee:	8b 89       	ldd	r24, Y+19	; 0x13
    51f0:	9c 89       	ldd	r25, Y+20	; 0x14
    51f2:	01 97       	sbiw	r24, 0x01	; 1
    51f4:	9c 8b       	std	Y+20, r25	; 0x14
    51f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51f8:	8b 89       	ldd	r24, Y+19	; 0x13
    51fa:	9c 89       	ldd	r25, Y+20	; 0x14
    51fc:	00 97       	sbiw	r24, 0x00	; 0
    51fe:	69 f7       	brne	.-38     	; 0x51da <LCD_voidLatch+0x16a>
    5200:	14 c0       	rjmp	.+40     	; 0x522a <LCD_voidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5202:	6d 89       	ldd	r22, Y+21	; 0x15
    5204:	7e 89       	ldd	r23, Y+22	; 0x16
    5206:	8f 89       	ldd	r24, Y+23	; 0x17
    5208:	98 8d       	ldd	r25, Y+24	; 0x18
    520a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    520e:	dc 01       	movw	r26, r24
    5210:	cb 01       	movw	r24, r22
    5212:	9c 8b       	std	Y+20, r25	; 0x14
    5214:	8b 8b       	std	Y+19, r24	; 0x13
    5216:	8b 89       	ldd	r24, Y+19	; 0x13
    5218:	9c 89       	ldd	r25, Y+20	; 0x14
    521a:	98 8b       	std	Y+16, r25	; 0x10
    521c:	8f 87       	std	Y+15, r24	; 0x0f
    521e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5220:	98 89       	ldd	r25, Y+16	; 0x10
    5222:	01 97       	sbiw	r24, 0x01	; 1
    5224:	f1 f7       	brne	.-4      	; 0x5222 <LCD_voidLatch+0x1b2>
    5226:	98 8b       	std	Y+16, r25	; 0x10
    5228:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_SetPinValue(EN_PORT, EN_PIN,LOW);
    522a:	80 e0       	ldi	r24, 0x00	; 0
    522c:	67 e0       	ldi	r22, 0x07	; 7
    522e:	40 e0       	ldi	r20, 0x00	; 0
    5230:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_SetPinValue>
    5234:	80 e0       	ldi	r24, 0x00	; 0
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	a0 e2       	ldi	r26, 0x20	; 32
    523a:	b1 e4       	ldi	r27, 0x41	; 65
    523c:	8b 87       	std	Y+11, r24	; 0x0b
    523e:	9c 87       	std	Y+12, r25	; 0x0c
    5240:	ad 87       	std	Y+13, r26	; 0x0d
    5242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5244:	6b 85       	ldd	r22, Y+11	; 0x0b
    5246:	7c 85       	ldd	r23, Y+12	; 0x0c
    5248:	8d 85       	ldd	r24, Y+13	; 0x0d
    524a:	9e 85       	ldd	r25, Y+14	; 0x0e
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	4a ef       	ldi	r20, 0xFA	; 250
    5252:	54 e4       	ldi	r21, 0x44	; 68
    5254:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    5258:	dc 01       	movw	r26, r24
    525a:	cb 01       	movw	r24, r22
    525c:	8f 83       	std	Y+7, r24	; 0x07
    525e:	98 87       	std	Y+8, r25	; 0x08
    5260:	a9 87       	std	Y+9, r26	; 0x09
    5262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5264:	6f 81       	ldd	r22, Y+7	; 0x07
    5266:	78 85       	ldd	r23, Y+8	; 0x08
    5268:	89 85       	ldd	r24, Y+9	; 0x09
    526a:	9a 85       	ldd	r25, Y+10	; 0x0a
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	40 e8       	ldi	r20, 0x80	; 128
    5272:	5f e3       	ldi	r21, 0x3F	; 63
    5274:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    5278:	88 23       	and	r24, r24
    527a:	2c f4       	brge	.+10     	; 0x5286 <LCD_voidLatch+0x216>
		__ticks = 1;
    527c:	81 e0       	ldi	r24, 0x01	; 1
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	9e 83       	std	Y+6, r25	; 0x06
    5282:	8d 83       	std	Y+5, r24	; 0x05
    5284:	3f c0       	rjmp	.+126    	; 0x5304 <LCD_voidLatch+0x294>
	else if (__tmp > 65535)
    5286:	6f 81       	ldd	r22, Y+7	; 0x07
    5288:	78 85       	ldd	r23, Y+8	; 0x08
    528a:	89 85       	ldd	r24, Y+9	; 0x09
    528c:	9a 85       	ldd	r25, Y+10	; 0x0a
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	3f ef       	ldi	r19, 0xFF	; 255
    5292:	4f e7       	ldi	r20, 0x7F	; 127
    5294:	57 e4       	ldi	r21, 0x47	; 71
    5296:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    529a:	18 16       	cp	r1, r24
    529c:	4c f5       	brge	.+82     	; 0x52f0 <LCD_voidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    529e:	6b 85       	ldd	r22, Y+11	; 0x0b
    52a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    52a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    52a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    52a6:	20 e0       	ldi	r18, 0x00	; 0
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	40 e2       	ldi	r20, 0x20	; 32
    52ac:	51 e4       	ldi	r21, 0x41	; 65
    52ae:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    52b2:	dc 01       	movw	r26, r24
    52b4:	cb 01       	movw	r24, r22
    52b6:	bc 01       	movw	r22, r24
    52b8:	cd 01       	movw	r24, r26
    52ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52be:	dc 01       	movw	r26, r24
    52c0:	cb 01       	movw	r24, r22
    52c2:	9e 83       	std	Y+6, r25	; 0x06
    52c4:	8d 83       	std	Y+5, r24	; 0x05
    52c6:	0f c0       	rjmp	.+30     	; 0x52e6 <LCD_voidLatch+0x276>
    52c8:	88 ec       	ldi	r24, 0xC8	; 200
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	9c 83       	std	Y+4, r25	; 0x04
    52ce:	8b 83       	std	Y+3, r24	; 0x03
    52d0:	8b 81       	ldd	r24, Y+3	; 0x03
    52d2:	9c 81       	ldd	r25, Y+4	; 0x04
    52d4:	01 97       	sbiw	r24, 0x01	; 1
    52d6:	f1 f7       	brne	.-4      	; 0x52d4 <LCD_voidLatch+0x264>
    52d8:	9c 83       	std	Y+4, r25	; 0x04
    52da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52dc:	8d 81       	ldd	r24, Y+5	; 0x05
    52de:	9e 81       	ldd	r25, Y+6	; 0x06
    52e0:	01 97       	sbiw	r24, 0x01	; 1
    52e2:	9e 83       	std	Y+6, r25	; 0x06
    52e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52e6:	8d 81       	ldd	r24, Y+5	; 0x05
    52e8:	9e 81       	ldd	r25, Y+6	; 0x06
    52ea:	00 97       	sbiw	r24, 0x00	; 0
    52ec:	69 f7       	brne	.-38     	; 0x52c8 <LCD_voidLatch+0x258>
    52ee:	14 c0       	rjmp	.+40     	; 0x5318 <LCD_voidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52f0:	6f 81       	ldd	r22, Y+7	; 0x07
    52f2:	78 85       	ldd	r23, Y+8	; 0x08
    52f4:	89 85       	ldd	r24, Y+9	; 0x09
    52f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    52f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52fc:	dc 01       	movw	r26, r24
    52fe:	cb 01       	movw	r24, r22
    5300:	9e 83       	std	Y+6, r25	; 0x06
    5302:	8d 83       	std	Y+5, r24	; 0x05
    5304:	8d 81       	ldd	r24, Y+5	; 0x05
    5306:	9e 81       	ldd	r25, Y+6	; 0x06
    5308:	9a 83       	std	Y+2, r25	; 0x02
    530a:	89 83       	std	Y+1, r24	; 0x01
    530c:	89 81       	ldd	r24, Y+1	; 0x01
    530e:	9a 81       	ldd	r25, Y+2	; 0x02
    5310:	01 97       	sbiw	r24, 0x01	; 1
    5312:	f1 f7       	brne	.-4      	; 0x5310 <LCD_voidLatch+0x2a0>
    5314:	9a 83       	std	Y+2, r25	; 0x02
    5316:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);



}
    5318:	6d 96       	adiw	r28, 0x1d	; 29
    531a:	0f b6       	in	r0, 0x3f	; 63
    531c:	f8 94       	cli
    531e:	de bf       	out	0x3e, r29	; 62
    5320:	0f be       	out	0x3f, r0	; 63
    5322:	cd bf       	out	0x3d, r28	; 61
    5324:	cf 91       	pop	r28
    5326:	df 91       	pop	r29
    5328:	08 95       	ret

0000532a <EEPROM_void_Init>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_void_Init(void)
{
    532a:	df 93       	push	r29
    532c:	cf 93       	push	r28
    532e:	cd b7       	in	r28, 0x3d	; 61
    5330:	de b7       	in	r29, 0x3e	; 62
	I2C_voidInit();
    5332:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <I2C_voidInit>
}
    5336:	cf 91       	pop	r28
    5338:	df 91       	pop	r29
    533a:	08 95       	ret

0000533c <EEPROM_enumWriteByte>:
ERROR_STATE EEPROM_enumWriteByte(u16 Copy_u16LocationAddress , u8 Copy_u8Data)
{
    533c:	df 93       	push	r29
    533e:	cf 93       	push	r28
    5340:	00 d0       	rcall	.+0      	; 0x5342 <EEPROM_enumWriteByte+0x6>
    5342:	00 d0       	rcall	.+0      	; 0x5344 <EEPROM_enumWriteByte+0x8>
    5344:	cd b7       	in	r28, 0x3d	; 61
    5346:	de b7       	in	r29, 0x3e	; 62
    5348:	9b 83       	std	Y+3, r25	; 0x03
    534a:	8a 83       	std	Y+2, r24	; 0x02
    534c:	6c 83       	std	Y+4, r22	; 0x04
	ERROR_STATE Local_enum_errorState = NOK;
    534e:	19 82       	std	Y+1, r1	; 0x01
	Local_enum_errorState = I2C_MASTER_enumSendStart();
    5350:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <I2C_MASTER_enumSendStart>
    5354:	89 83       	std	Y+1, r24	; 0x01
	if( Local_enum_errorState == OK )
    5356:	89 81       	ldd	r24, Y+1	; 0x01
    5358:	81 30       	cpi	r24, 0x01	; 1
    535a:	f1 f4       	brne	.+60     	; 0x5398 <EEPROM_enumWriteByte+0x5c>
	{
		Local_enum_errorState = I2C_MASTER_enumSendSlaveAddressWithWrite( 0x50|((Copy_u16LocationAddress >> 8)&0x03));
    535c:	8a 81       	ldd	r24, Y+2	; 0x02
    535e:	9b 81       	ldd	r25, Y+3	; 0x03
    5360:	89 2f       	mov	r24, r25
    5362:	99 27       	eor	r25, r25
    5364:	83 70       	andi	r24, 0x03	; 3
    5366:	80 65       	ori	r24, 0x50	; 80
    5368:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <I2C_MASTER_enumSendSlaveAddressWithWrite>
    536c:	89 83       	std	Y+1, r24	; 0x01
		if( Local_enum_errorState == OK)
    536e:	89 81       	ldd	r24, Y+1	; 0x01
    5370:	81 30       	cpi	r24, 0x01	; 1
    5372:	91 f4       	brne	.+36     	; 0x5398 <EEPROM_enumWriteByte+0x5c>
		{
			Local_enum_errorState = I2C_MASTER_enumSendByte((u8)Copy_u16LocationAddress);
    5374:	8a 81       	ldd	r24, Y+2	; 0x02
    5376:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    537a:	89 83       	std	Y+1, r24	; 0x01
			if(Local_enum_errorState == OK)
    537c:	89 81       	ldd	r24, Y+1	; 0x01
    537e:	81 30       	cpi	r24, 0x01	; 1
    5380:	59 f4       	brne	.+22     	; 0x5398 <EEPROM_enumWriteByte+0x5c>
			{
				Local_enum_errorState = I2C_MASTER_enumSendByte(Copy_u8Data);
    5382:	8c 81       	ldd	r24, Y+4	; 0x04
    5384:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    5388:	89 83       	std	Y+1, r24	; 0x01
				if(Local_enum_errorState == OK)
    538a:	89 81       	ldd	r24, Y+1	; 0x01
    538c:	81 30       	cpi	r24, 0x01	; 1
    538e:	21 f4       	brne	.+8      	; 0x5398 <EEPROM_enumWriteByte+0x5c>
				{
					I2C_MASTER_voidSendSTOP();
    5390:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <I2C_MASTER_voidSendSTOP>
					Local_enum_errorState = OK;
    5394:	81 e0       	ldi	r24, 0x01	; 1
    5396:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return Local_enum_errorState;
    5398:	89 81       	ldd	r24, Y+1	; 0x01
}
    539a:	0f 90       	pop	r0
    539c:	0f 90       	pop	r0
    539e:	0f 90       	pop	r0
    53a0:	0f 90       	pop	r0
    53a2:	cf 91       	pop	r28
    53a4:	df 91       	pop	r29
    53a6:	08 95       	ret

000053a8 <EEPROM_enumReadByte>:

ERROR_STATE EEPROM_enumReadByte(u16 Copy_u16LocationAddress , u8*Copy_u8Data)
{
    53a8:	df 93       	push	r29
    53aa:	cf 93       	push	r28
    53ac:	00 d0       	rcall	.+0      	; 0x53ae <EEPROM_enumReadByte+0x6>
    53ae:	00 d0       	rcall	.+0      	; 0x53b0 <EEPROM_enumReadByte+0x8>
    53b0:	0f 92       	push	r0
    53b2:	cd b7       	in	r28, 0x3d	; 61
    53b4:	de b7       	in	r29, 0x3e	; 62
    53b6:	9b 83       	std	Y+3, r25	; 0x03
    53b8:	8a 83       	std	Y+2, r24	; 0x02
    53ba:	7d 83       	std	Y+5, r23	; 0x05
    53bc:	6c 83       	std	Y+4, r22	; 0x04
	ERROR_STATE Local_enum_errorState = NOK;
    53be:	19 82       	std	Y+1, r1	; 0x01
	Local_enum_errorState = I2C_MASTER_enumSendStart();
    53c0:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <I2C_MASTER_enumSendStart>
    53c4:	89 83       	std	Y+1, r24	; 0x01
	if( Local_enum_errorState == OK )
    53c6:	89 81       	ldd	r24, Y+1	; 0x01
    53c8:	81 30       	cpi	r24, 0x01	; 1
    53ca:	79 f5       	brne	.+94     	; 0x542a <EEPROM_enumReadByte+0x82>
	{
		Local_enum_errorState = I2C_MASTER_enumSendSlaveAddressWithWrite( 0x50|((Copy_u16LocationAddress >> 8)&0x03));
    53cc:	8a 81       	ldd	r24, Y+2	; 0x02
    53ce:	9b 81       	ldd	r25, Y+3	; 0x03
    53d0:	89 2f       	mov	r24, r25
    53d2:	99 27       	eor	r25, r25
    53d4:	83 70       	andi	r24, 0x03	; 3
    53d6:	80 65       	ori	r24, 0x50	; 80
    53d8:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <I2C_MASTER_enumSendSlaveAddressWithWrite>
    53dc:	89 83       	std	Y+1, r24	; 0x01
		if( Local_enum_errorState == OK)
    53de:	89 81       	ldd	r24, Y+1	; 0x01
    53e0:	81 30       	cpi	r24, 0x01	; 1
    53e2:	19 f5       	brne	.+70     	; 0x542a <EEPROM_enumReadByte+0x82>
		{
			Local_enum_errorState = I2C_MASTER_enumSendByte((u8)Copy_u16LocationAddress);
    53e4:	8a 81       	ldd	r24, Y+2	; 0x02
    53e6:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <I2C_MASTER_enumSendByte>
    53ea:	89 83       	std	Y+1, r24	; 0x01
			if(Local_enum_errorState == OK)
    53ec:	89 81       	ldd	r24, Y+1	; 0x01
    53ee:	81 30       	cpi	r24, 0x01	; 1
    53f0:	e1 f4       	brne	.+56     	; 0x542a <EEPROM_enumReadByte+0x82>
			{
				Local_enum_errorState = I2C_MASTER_enumSendRepeatedStart();
    53f2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <I2C_MASTER_enumSendRepeatedStart>
    53f6:	89 83       	std	Y+1, r24	; 0x01
				if(Local_enum_errorState == OK)
    53f8:	89 81       	ldd	r24, Y+1	; 0x01
    53fa:	81 30       	cpi	r24, 0x01	; 1
    53fc:	b1 f4       	brne	.+44     	; 0x542a <EEPROM_enumReadByte+0x82>
				{
					Local_enum_errorState = I2C_MASTER_enumSendSlaveAddressWithRead(0x50|((Copy_u16LocationAddress >> 8)&0x03));
    53fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5400:	9b 81       	ldd	r25, Y+3	; 0x03
    5402:	89 2f       	mov	r24, r25
    5404:	99 27       	eor	r25, r25
    5406:	83 70       	andi	r24, 0x03	; 3
    5408:	80 65       	ori	r24, 0x50	; 80
    540a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <I2C_MASTER_enumSendSlaveAddressWithRead>
    540e:	89 83       	std	Y+1, r24	; 0x01
					if( Local_enum_errorState == OK )
    5410:	89 81       	ldd	r24, Y+1	; 0x01
    5412:	81 30       	cpi	r24, 0x01	; 1
    5414:	51 f4       	brne	.+20     	; 0x542a <EEPROM_enumReadByte+0x82>
					{
						Local_enum_errorState = I2C_MASTER_enumReadByte_With_NACK(Copy_u8Data);
    5416:	8c 81       	ldd	r24, Y+4	; 0x04
    5418:	9d 81       	ldd	r25, Y+5	; 0x05
    541a:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <I2C_MASTER_enumReadByte_With_NACK>
    541e:	89 83       	std	Y+1, r24	; 0x01
						if(Local_enum_errorState == OK)
    5420:	89 81       	ldd	r24, Y+1	; 0x01
    5422:	81 30       	cpi	r24, 0x01	; 1
    5424:	11 f4       	brne	.+4      	; 0x542a <EEPROM_enumReadByte+0x82>
						{
							I2C_MASTER_voidSendSTOP();
    5426:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <I2C_MASTER_voidSendSTOP>
					}
				}
			}
		}
	}
	return Local_enum_errorState;
    542a:	89 81       	ldd	r24, Y+1	; 0x01
}
    542c:	0f 90       	pop	r0
    542e:	0f 90       	pop	r0
    5430:	0f 90       	pop	r0
    5432:	0f 90       	pop	r0
    5434:	0f 90       	pop	r0
    5436:	cf 91       	pop	r28
    5438:	df 91       	pop	r29
    543a:	08 95       	ret

0000543c <EEPROM_voidWriteTime>:
u8 Local_u8EEpromSET_MIN=0;
u8 Local_u8EEpromRIS_Hours = 0;
u8 Local_u8EEpromRIS_Min = 0;

void EEPROM_voidWriteTime(void) // this Will change later
{
    543c:	df 93       	push	r29
    543e:	cf 93       	push	r28
    5440:	cd b7       	in	r28, 0x3d	; 61
    5442:	de b7       	in	r29, 0x3e	; 62
    5444:	e8 97       	sbiw	r28, 0x38	; 56
    5446:	0f b6       	in	r0, 0x3f	; 63
    5448:	f8 94       	cli
    544a:	de bf       	out	0x3e, r29	; 62
    544c:	0f be       	out	0x3f, r0	; 63
    544e:	cd bf       	out	0x3d, r28	; 61
	EEPROM_enumWriteByte(HOUR_SUNRISE,6);
    5450:	80 e0       	ldi	r24, 0x00	; 0
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	66 e0       	ldi	r22, 0x06	; 6
    5456:	0e 94 9e 29 	call	0x533c	; 0x533c <EEPROM_enumWriteByte>
    545a:	80 e0       	ldi	r24, 0x00	; 0
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	a8 ec       	ldi	r26, 0xC8	; 200
    5460:	b2 e4       	ldi	r27, 0x42	; 66
    5462:	8d ab       	std	Y+53, r24	; 0x35
    5464:	9e ab       	std	Y+54, r25	; 0x36
    5466:	af ab       	std	Y+55, r26	; 0x37
    5468:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    546a:	6d a9       	ldd	r22, Y+53	; 0x35
    546c:	7e a9       	ldd	r23, Y+54	; 0x36
    546e:	8f a9       	ldd	r24, Y+55	; 0x37
    5470:	98 ad       	ldd	r25, Y+56	; 0x38
    5472:	20 e0       	ldi	r18, 0x00	; 0
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	4a ef       	ldi	r20, 0xFA	; 250
    5478:	54 e4       	ldi	r21, 0x44	; 68
    547a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    547e:	dc 01       	movw	r26, r24
    5480:	cb 01       	movw	r24, r22
    5482:	89 ab       	std	Y+49, r24	; 0x31
    5484:	9a ab       	std	Y+50, r25	; 0x32
    5486:	ab ab       	std	Y+51, r26	; 0x33
    5488:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    548a:	69 a9       	ldd	r22, Y+49	; 0x31
    548c:	7a a9       	ldd	r23, Y+50	; 0x32
    548e:	8b a9       	ldd	r24, Y+51	; 0x33
    5490:	9c a9       	ldd	r25, Y+52	; 0x34
    5492:	20 e0       	ldi	r18, 0x00	; 0
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	40 e8       	ldi	r20, 0x80	; 128
    5498:	5f e3       	ldi	r21, 0x3F	; 63
    549a:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    549e:	88 23       	and	r24, r24
    54a0:	2c f4       	brge	.+10     	; 0x54ac <EEPROM_voidWriteTime+0x70>
		__ticks = 1;
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	98 ab       	std	Y+48, r25	; 0x30
    54a8:	8f a7       	std	Y+47, r24	; 0x2f
    54aa:	3f c0       	rjmp	.+126    	; 0x552a <EEPROM_voidWriteTime+0xee>
	else if (__tmp > 65535)
    54ac:	69 a9       	ldd	r22, Y+49	; 0x31
    54ae:	7a a9       	ldd	r23, Y+50	; 0x32
    54b0:	8b a9       	ldd	r24, Y+51	; 0x33
    54b2:	9c a9       	ldd	r25, Y+52	; 0x34
    54b4:	20 e0       	ldi	r18, 0x00	; 0
    54b6:	3f ef       	ldi	r19, 0xFF	; 255
    54b8:	4f e7       	ldi	r20, 0x7F	; 127
    54ba:	57 e4       	ldi	r21, 0x47	; 71
    54bc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    54c0:	18 16       	cp	r1, r24
    54c2:	4c f5       	brge	.+82     	; 0x5516 <EEPROM_voidWriteTime+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54c4:	6d a9       	ldd	r22, Y+53	; 0x35
    54c6:	7e a9       	ldd	r23, Y+54	; 0x36
    54c8:	8f a9       	ldd	r24, Y+55	; 0x37
    54ca:	98 ad       	ldd	r25, Y+56	; 0x38
    54cc:	20 e0       	ldi	r18, 0x00	; 0
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	40 e2       	ldi	r20, 0x20	; 32
    54d2:	51 e4       	ldi	r21, 0x41	; 65
    54d4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    54d8:	dc 01       	movw	r26, r24
    54da:	cb 01       	movw	r24, r22
    54dc:	bc 01       	movw	r22, r24
    54de:	cd 01       	movw	r24, r26
    54e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	98 ab       	std	Y+48, r25	; 0x30
    54ea:	8f a7       	std	Y+47, r24	; 0x2f
    54ec:	0f c0       	rjmp	.+30     	; 0x550c <EEPROM_voidWriteTime+0xd0>
    54ee:	88 ec       	ldi	r24, 0xC8	; 200
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	9e a7       	std	Y+46, r25	; 0x2e
    54f4:	8d a7       	std	Y+45, r24	; 0x2d
    54f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    54f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    54fa:	01 97       	sbiw	r24, 0x01	; 1
    54fc:	f1 f7       	brne	.-4      	; 0x54fa <EEPROM_voidWriteTime+0xbe>
    54fe:	9e a7       	std	Y+46, r25	; 0x2e
    5500:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5502:	8f a5       	ldd	r24, Y+47	; 0x2f
    5504:	98 a9       	ldd	r25, Y+48	; 0x30
    5506:	01 97       	sbiw	r24, 0x01	; 1
    5508:	98 ab       	std	Y+48, r25	; 0x30
    550a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    550c:	8f a5       	ldd	r24, Y+47	; 0x2f
    550e:	98 a9       	ldd	r25, Y+48	; 0x30
    5510:	00 97       	sbiw	r24, 0x00	; 0
    5512:	69 f7       	brne	.-38     	; 0x54ee <EEPROM_voidWriteTime+0xb2>
    5514:	14 c0       	rjmp	.+40     	; 0x553e <EEPROM_voidWriteTime+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5516:	69 a9       	ldd	r22, Y+49	; 0x31
    5518:	7a a9       	ldd	r23, Y+50	; 0x32
    551a:	8b a9       	ldd	r24, Y+51	; 0x33
    551c:	9c a9       	ldd	r25, Y+52	; 0x34
    551e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5522:	dc 01       	movw	r26, r24
    5524:	cb 01       	movw	r24, r22
    5526:	98 ab       	std	Y+48, r25	; 0x30
    5528:	8f a7       	std	Y+47, r24	; 0x2f
    552a:	8f a5       	ldd	r24, Y+47	; 0x2f
    552c:	98 a9       	ldd	r25, Y+48	; 0x30
    552e:	9c a7       	std	Y+44, r25	; 0x2c
    5530:	8b a7       	std	Y+43, r24	; 0x2b
    5532:	8b a5       	ldd	r24, Y+43	; 0x2b
    5534:	9c a5       	ldd	r25, Y+44	; 0x2c
    5536:	01 97       	sbiw	r24, 0x01	; 1
    5538:	f1 f7       	brne	.-4      	; 0x5536 <EEPROM_voidWriteTime+0xfa>
    553a:	9c a7       	std	Y+44, r25	; 0x2c
    553c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	EEPROM_enumWriteByte(MINUTE_SUNRISE,15);
    553e:	81 e0       	ldi	r24, 0x01	; 1
    5540:	90 e0       	ldi	r25, 0x00	; 0
    5542:	6f e0       	ldi	r22, 0x0F	; 15
    5544:	0e 94 9e 29 	call	0x533c	; 0x533c <EEPROM_enumWriteByte>
    5548:	80 e0       	ldi	r24, 0x00	; 0
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	a8 ec       	ldi	r26, 0xC8	; 200
    554e:	b2 e4       	ldi	r27, 0x42	; 66
    5550:	8f a3       	std	Y+39, r24	; 0x27
    5552:	98 a7       	std	Y+40, r25	; 0x28
    5554:	a9 a7       	std	Y+41, r26	; 0x29
    5556:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5558:	6f a1       	ldd	r22, Y+39	; 0x27
    555a:	78 a5       	ldd	r23, Y+40	; 0x28
    555c:	89 a5       	ldd	r24, Y+41	; 0x29
    555e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5560:	20 e0       	ldi	r18, 0x00	; 0
    5562:	30 e0       	ldi	r19, 0x00	; 0
    5564:	4a ef       	ldi	r20, 0xFA	; 250
    5566:	54 e4       	ldi	r21, 0x44	; 68
    5568:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    556c:	dc 01       	movw	r26, r24
    556e:	cb 01       	movw	r24, r22
    5570:	8b a3       	std	Y+35, r24	; 0x23
    5572:	9c a3       	std	Y+36, r25	; 0x24
    5574:	ad a3       	std	Y+37, r26	; 0x25
    5576:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5578:	6b a1       	ldd	r22, Y+35	; 0x23
    557a:	7c a1       	ldd	r23, Y+36	; 0x24
    557c:	8d a1       	ldd	r24, Y+37	; 0x25
    557e:	9e a1       	ldd	r25, Y+38	; 0x26
    5580:	20 e0       	ldi	r18, 0x00	; 0
    5582:	30 e0       	ldi	r19, 0x00	; 0
    5584:	40 e8       	ldi	r20, 0x80	; 128
    5586:	5f e3       	ldi	r21, 0x3F	; 63
    5588:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    558c:	88 23       	and	r24, r24
    558e:	2c f4       	brge	.+10     	; 0x559a <EEPROM_voidWriteTime+0x15e>
		__ticks = 1;
    5590:	81 e0       	ldi	r24, 0x01	; 1
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	9a a3       	std	Y+34, r25	; 0x22
    5596:	89 a3       	std	Y+33, r24	; 0x21
    5598:	3f c0       	rjmp	.+126    	; 0x5618 <EEPROM_voidWriteTime+0x1dc>
	else if (__tmp > 65535)
    559a:	6b a1       	ldd	r22, Y+35	; 0x23
    559c:	7c a1       	ldd	r23, Y+36	; 0x24
    559e:	8d a1       	ldd	r24, Y+37	; 0x25
    55a0:	9e a1       	ldd	r25, Y+38	; 0x26
    55a2:	20 e0       	ldi	r18, 0x00	; 0
    55a4:	3f ef       	ldi	r19, 0xFF	; 255
    55a6:	4f e7       	ldi	r20, 0x7F	; 127
    55a8:	57 e4       	ldi	r21, 0x47	; 71
    55aa:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    55ae:	18 16       	cp	r1, r24
    55b0:	4c f5       	brge	.+82     	; 0x5604 <EEPROM_voidWriteTime+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55b2:	6f a1       	ldd	r22, Y+39	; 0x27
    55b4:	78 a5       	ldd	r23, Y+40	; 0x28
    55b6:	89 a5       	ldd	r24, Y+41	; 0x29
    55b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    55ba:	20 e0       	ldi	r18, 0x00	; 0
    55bc:	30 e0       	ldi	r19, 0x00	; 0
    55be:	40 e2       	ldi	r20, 0x20	; 32
    55c0:	51 e4       	ldi	r21, 0x41	; 65
    55c2:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    55c6:	dc 01       	movw	r26, r24
    55c8:	cb 01       	movw	r24, r22
    55ca:	bc 01       	movw	r22, r24
    55cc:	cd 01       	movw	r24, r26
    55ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d2:	dc 01       	movw	r26, r24
    55d4:	cb 01       	movw	r24, r22
    55d6:	9a a3       	std	Y+34, r25	; 0x22
    55d8:	89 a3       	std	Y+33, r24	; 0x21
    55da:	0f c0       	rjmp	.+30     	; 0x55fa <EEPROM_voidWriteTime+0x1be>
    55dc:	88 ec       	ldi	r24, 0xC8	; 200
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	98 a3       	std	Y+32, r25	; 0x20
    55e2:	8f 8f       	std	Y+31, r24	; 0x1f
    55e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55e6:	98 a1       	ldd	r25, Y+32	; 0x20
    55e8:	01 97       	sbiw	r24, 0x01	; 1
    55ea:	f1 f7       	brne	.-4      	; 0x55e8 <EEPROM_voidWriteTime+0x1ac>
    55ec:	98 a3       	std	Y+32, r25	; 0x20
    55ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55f0:	89 a1       	ldd	r24, Y+33	; 0x21
    55f2:	9a a1       	ldd	r25, Y+34	; 0x22
    55f4:	01 97       	sbiw	r24, 0x01	; 1
    55f6:	9a a3       	std	Y+34, r25	; 0x22
    55f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55fa:	89 a1       	ldd	r24, Y+33	; 0x21
    55fc:	9a a1       	ldd	r25, Y+34	; 0x22
    55fe:	00 97       	sbiw	r24, 0x00	; 0
    5600:	69 f7       	brne	.-38     	; 0x55dc <EEPROM_voidWriteTime+0x1a0>
    5602:	14 c0       	rjmp	.+40     	; 0x562c <EEPROM_voidWriteTime+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5604:	6b a1       	ldd	r22, Y+35	; 0x23
    5606:	7c a1       	ldd	r23, Y+36	; 0x24
    5608:	8d a1       	ldd	r24, Y+37	; 0x25
    560a:	9e a1       	ldd	r25, Y+38	; 0x26
    560c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5610:	dc 01       	movw	r26, r24
    5612:	cb 01       	movw	r24, r22
    5614:	9a a3       	std	Y+34, r25	; 0x22
    5616:	89 a3       	std	Y+33, r24	; 0x21
    5618:	89 a1       	ldd	r24, Y+33	; 0x21
    561a:	9a a1       	ldd	r25, Y+34	; 0x22
    561c:	9e 8f       	std	Y+30, r25	; 0x1e
    561e:	8d 8f       	std	Y+29, r24	; 0x1d
    5620:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5622:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5624:	01 97       	sbiw	r24, 0x01	; 1
    5626:	f1 f7       	brne	.-4      	; 0x5624 <EEPROM_voidWriteTime+0x1e8>
    5628:	9e 8f       	std	Y+30, r25	; 0x1e
    562a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	EEPROM_enumWriteByte(HOUR_SUNSET,17);
    562c:	82 e0       	ldi	r24, 0x02	; 2
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	61 e1       	ldi	r22, 0x11	; 17
    5632:	0e 94 9e 29 	call	0x533c	; 0x533c <EEPROM_enumWriteByte>
    5636:	80 e0       	ldi	r24, 0x00	; 0
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	a8 ec       	ldi	r26, 0xC8	; 200
    563c:	b2 e4       	ldi	r27, 0x42	; 66
    563e:	89 8f       	std	Y+25, r24	; 0x19
    5640:	9a 8f       	std	Y+26, r25	; 0x1a
    5642:	ab 8f       	std	Y+27, r26	; 0x1b
    5644:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5646:	69 8d       	ldd	r22, Y+25	; 0x19
    5648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    564a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    564c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    564e:	20 e0       	ldi	r18, 0x00	; 0
    5650:	30 e0       	ldi	r19, 0x00	; 0
    5652:	4a ef       	ldi	r20, 0xFA	; 250
    5654:	54 e4       	ldi	r21, 0x44	; 68
    5656:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    565a:	dc 01       	movw	r26, r24
    565c:	cb 01       	movw	r24, r22
    565e:	8d 8b       	std	Y+21, r24	; 0x15
    5660:	9e 8b       	std	Y+22, r25	; 0x16
    5662:	af 8b       	std	Y+23, r26	; 0x17
    5664:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5666:	6d 89       	ldd	r22, Y+21	; 0x15
    5668:	7e 89       	ldd	r23, Y+22	; 0x16
    566a:	8f 89       	ldd	r24, Y+23	; 0x17
    566c:	98 8d       	ldd	r25, Y+24	; 0x18
    566e:	20 e0       	ldi	r18, 0x00	; 0
    5670:	30 e0       	ldi	r19, 0x00	; 0
    5672:	40 e8       	ldi	r20, 0x80	; 128
    5674:	5f e3       	ldi	r21, 0x3F	; 63
    5676:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    567a:	88 23       	and	r24, r24
    567c:	2c f4       	brge	.+10     	; 0x5688 <EEPROM_voidWriteTime+0x24c>
		__ticks = 1;
    567e:	81 e0       	ldi	r24, 0x01	; 1
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	9c 8b       	std	Y+20, r25	; 0x14
    5684:	8b 8b       	std	Y+19, r24	; 0x13
    5686:	3f c0       	rjmp	.+126    	; 0x5706 <EEPROM_voidWriteTime+0x2ca>
	else if (__tmp > 65535)
    5688:	6d 89       	ldd	r22, Y+21	; 0x15
    568a:	7e 89       	ldd	r23, Y+22	; 0x16
    568c:	8f 89       	ldd	r24, Y+23	; 0x17
    568e:	98 8d       	ldd	r25, Y+24	; 0x18
    5690:	20 e0       	ldi	r18, 0x00	; 0
    5692:	3f ef       	ldi	r19, 0xFF	; 255
    5694:	4f e7       	ldi	r20, 0x7F	; 127
    5696:	57 e4       	ldi	r21, 0x47	; 71
    5698:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    569c:	18 16       	cp	r1, r24
    569e:	4c f5       	brge	.+82     	; 0x56f2 <EEPROM_voidWriteTime+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56a0:	69 8d       	ldd	r22, Y+25	; 0x19
    56a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56a8:	20 e0       	ldi	r18, 0x00	; 0
    56aa:	30 e0       	ldi	r19, 0x00	; 0
    56ac:	40 e2       	ldi	r20, 0x20	; 32
    56ae:	51 e4       	ldi	r21, 0x41	; 65
    56b0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    56b4:	dc 01       	movw	r26, r24
    56b6:	cb 01       	movw	r24, r22
    56b8:	bc 01       	movw	r22, r24
    56ba:	cd 01       	movw	r24, r26
    56bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56c0:	dc 01       	movw	r26, r24
    56c2:	cb 01       	movw	r24, r22
    56c4:	9c 8b       	std	Y+20, r25	; 0x14
    56c6:	8b 8b       	std	Y+19, r24	; 0x13
    56c8:	0f c0       	rjmp	.+30     	; 0x56e8 <EEPROM_voidWriteTime+0x2ac>
    56ca:	88 ec       	ldi	r24, 0xC8	; 200
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	9a 8b       	std	Y+18, r25	; 0x12
    56d0:	89 8b       	std	Y+17, r24	; 0x11
    56d2:	89 89       	ldd	r24, Y+17	; 0x11
    56d4:	9a 89       	ldd	r25, Y+18	; 0x12
    56d6:	01 97       	sbiw	r24, 0x01	; 1
    56d8:	f1 f7       	brne	.-4      	; 0x56d6 <EEPROM_voidWriteTime+0x29a>
    56da:	9a 8b       	std	Y+18, r25	; 0x12
    56dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56de:	8b 89       	ldd	r24, Y+19	; 0x13
    56e0:	9c 89       	ldd	r25, Y+20	; 0x14
    56e2:	01 97       	sbiw	r24, 0x01	; 1
    56e4:	9c 8b       	std	Y+20, r25	; 0x14
    56e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56e8:	8b 89       	ldd	r24, Y+19	; 0x13
    56ea:	9c 89       	ldd	r25, Y+20	; 0x14
    56ec:	00 97       	sbiw	r24, 0x00	; 0
    56ee:	69 f7       	brne	.-38     	; 0x56ca <EEPROM_voidWriteTime+0x28e>
    56f0:	14 c0       	rjmp	.+40     	; 0x571a <EEPROM_voidWriteTime+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56f2:	6d 89       	ldd	r22, Y+21	; 0x15
    56f4:	7e 89       	ldd	r23, Y+22	; 0x16
    56f6:	8f 89       	ldd	r24, Y+23	; 0x17
    56f8:	98 8d       	ldd	r25, Y+24	; 0x18
    56fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56fe:	dc 01       	movw	r26, r24
    5700:	cb 01       	movw	r24, r22
    5702:	9c 8b       	std	Y+20, r25	; 0x14
    5704:	8b 8b       	std	Y+19, r24	; 0x13
    5706:	8b 89       	ldd	r24, Y+19	; 0x13
    5708:	9c 89       	ldd	r25, Y+20	; 0x14
    570a:	98 8b       	std	Y+16, r25	; 0x10
    570c:	8f 87       	std	Y+15, r24	; 0x0f
    570e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5710:	98 89       	ldd	r25, Y+16	; 0x10
    5712:	01 97       	sbiw	r24, 0x01	; 1
    5714:	f1 f7       	brne	.-4      	; 0x5712 <EEPROM_voidWriteTime+0x2d6>
    5716:	98 8b       	std	Y+16, r25	; 0x10
    5718:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	EEPROM_enumWriteByte(MINUTE_SUNSET,20);
    571a:	83 e0       	ldi	r24, 0x03	; 3
    571c:	90 e0       	ldi	r25, 0x00	; 0
    571e:	64 e1       	ldi	r22, 0x14	; 20
    5720:	0e 94 9e 29 	call	0x533c	; 0x533c <EEPROM_enumWriteByte>
    5724:	80 e0       	ldi	r24, 0x00	; 0
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	a8 ec       	ldi	r26, 0xC8	; 200
    572a:	b2 e4       	ldi	r27, 0x42	; 66
    572c:	8b 87       	std	Y+11, r24	; 0x0b
    572e:	9c 87       	std	Y+12, r25	; 0x0c
    5730:	ad 87       	std	Y+13, r26	; 0x0d
    5732:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5734:	6b 85       	ldd	r22, Y+11	; 0x0b
    5736:	7c 85       	ldd	r23, Y+12	; 0x0c
    5738:	8d 85       	ldd	r24, Y+13	; 0x0d
    573a:	9e 85       	ldd	r25, Y+14	; 0x0e
    573c:	20 e0       	ldi	r18, 0x00	; 0
    573e:	30 e0       	ldi	r19, 0x00	; 0
    5740:	4a ef       	ldi	r20, 0xFA	; 250
    5742:	54 e4       	ldi	r21, 0x44	; 68
    5744:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    5748:	dc 01       	movw	r26, r24
    574a:	cb 01       	movw	r24, r22
    574c:	8f 83       	std	Y+7, r24	; 0x07
    574e:	98 87       	std	Y+8, r25	; 0x08
    5750:	a9 87       	std	Y+9, r26	; 0x09
    5752:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5754:	6f 81       	ldd	r22, Y+7	; 0x07
    5756:	78 85       	ldd	r23, Y+8	; 0x08
    5758:	89 85       	ldd	r24, Y+9	; 0x09
    575a:	9a 85       	ldd	r25, Y+10	; 0x0a
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	40 e8       	ldi	r20, 0x80	; 128
    5762:	5f e3       	ldi	r21, 0x3F	; 63
    5764:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    5768:	88 23       	and	r24, r24
    576a:	2c f4       	brge	.+10     	; 0x5776 <EEPROM_voidWriteTime+0x33a>
		__ticks = 1;
    576c:	81 e0       	ldi	r24, 0x01	; 1
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	9e 83       	std	Y+6, r25	; 0x06
    5772:	8d 83       	std	Y+5, r24	; 0x05
    5774:	3f c0       	rjmp	.+126    	; 0x57f4 <EEPROM_voidWriteTime+0x3b8>
	else if (__tmp > 65535)
    5776:	6f 81       	ldd	r22, Y+7	; 0x07
    5778:	78 85       	ldd	r23, Y+8	; 0x08
    577a:	89 85       	ldd	r24, Y+9	; 0x09
    577c:	9a 85       	ldd	r25, Y+10	; 0x0a
    577e:	20 e0       	ldi	r18, 0x00	; 0
    5780:	3f ef       	ldi	r19, 0xFF	; 255
    5782:	4f e7       	ldi	r20, 0x7F	; 127
    5784:	57 e4       	ldi	r21, 0x47	; 71
    5786:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    578a:	18 16       	cp	r1, r24
    578c:	4c f5       	brge	.+82     	; 0x57e0 <EEPROM_voidWriteTime+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    578e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5790:	7c 85       	ldd	r23, Y+12	; 0x0c
    5792:	8d 85       	ldd	r24, Y+13	; 0x0d
    5794:	9e 85       	ldd	r25, Y+14	; 0x0e
    5796:	20 e0       	ldi	r18, 0x00	; 0
    5798:	30 e0       	ldi	r19, 0x00	; 0
    579a:	40 e2       	ldi	r20, 0x20	; 32
    579c:	51 e4       	ldi	r21, 0x41	; 65
    579e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    57a2:	dc 01       	movw	r26, r24
    57a4:	cb 01       	movw	r24, r22
    57a6:	bc 01       	movw	r22, r24
    57a8:	cd 01       	movw	r24, r26
    57aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ae:	dc 01       	movw	r26, r24
    57b0:	cb 01       	movw	r24, r22
    57b2:	9e 83       	std	Y+6, r25	; 0x06
    57b4:	8d 83       	std	Y+5, r24	; 0x05
    57b6:	0f c0       	rjmp	.+30     	; 0x57d6 <EEPROM_voidWriteTime+0x39a>
    57b8:	88 ec       	ldi	r24, 0xC8	; 200
    57ba:	90 e0       	ldi	r25, 0x00	; 0
    57bc:	9c 83       	std	Y+4, r25	; 0x04
    57be:	8b 83       	std	Y+3, r24	; 0x03
    57c0:	8b 81       	ldd	r24, Y+3	; 0x03
    57c2:	9c 81       	ldd	r25, Y+4	; 0x04
    57c4:	01 97       	sbiw	r24, 0x01	; 1
    57c6:	f1 f7       	brne	.-4      	; 0x57c4 <EEPROM_voidWriteTime+0x388>
    57c8:	9c 83       	std	Y+4, r25	; 0x04
    57ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57cc:	8d 81       	ldd	r24, Y+5	; 0x05
    57ce:	9e 81       	ldd	r25, Y+6	; 0x06
    57d0:	01 97       	sbiw	r24, 0x01	; 1
    57d2:	9e 83       	std	Y+6, r25	; 0x06
    57d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57d6:	8d 81       	ldd	r24, Y+5	; 0x05
    57d8:	9e 81       	ldd	r25, Y+6	; 0x06
    57da:	00 97       	sbiw	r24, 0x00	; 0
    57dc:	69 f7       	brne	.-38     	; 0x57b8 <EEPROM_voidWriteTime+0x37c>
    57de:	14 c0       	rjmp	.+40     	; 0x5808 <EEPROM_voidWriteTime+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57e0:	6f 81       	ldd	r22, Y+7	; 0x07
    57e2:	78 85       	ldd	r23, Y+8	; 0x08
    57e4:	89 85       	ldd	r24, Y+9	; 0x09
    57e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ec:	dc 01       	movw	r26, r24
    57ee:	cb 01       	movw	r24, r22
    57f0:	9e 83       	std	Y+6, r25	; 0x06
    57f2:	8d 83       	std	Y+5, r24	; 0x05
    57f4:	8d 81       	ldd	r24, Y+5	; 0x05
    57f6:	9e 81       	ldd	r25, Y+6	; 0x06
    57f8:	9a 83       	std	Y+2, r25	; 0x02
    57fa:	89 83       	std	Y+1, r24	; 0x01
    57fc:	89 81       	ldd	r24, Y+1	; 0x01
    57fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5800:	01 97       	sbiw	r24, 0x01	; 1
    5802:	f1 f7       	brne	.-4      	; 0x5800 <EEPROM_voidWriteTime+0x3c4>
    5804:	9a 83       	std	Y+2, r25	; 0x02
    5806:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    5808:	e8 96       	adiw	r28, 0x38	; 56
    580a:	0f b6       	in	r0, 0x3f	; 63
    580c:	f8 94       	cli
    580e:	de bf       	out	0x3e, r29	; 62
    5810:	0f be       	out	0x3f, r0	; 63
    5812:	cd bf       	out	0x3d, r28	; 61
    5814:	cf 91       	pop	r28
    5816:	df 91       	pop	r29
    5818:	08 95       	ret

0000581a <EEPROM_ReadTime>:

void EEPROM_ReadTime(void)
{
    581a:	df 93       	push	r29
    581c:	cf 93       	push	r28
    581e:	cd b7       	in	r28, 0x3d	; 61
    5820:	de b7       	in	r29, 0x3e	; 62
	EEPROM_enumReadByte(HOUR_SUNSET,&Local_u8EEpromSET_HOURS);
    5822:	28 e6       	ldi	r18, 0x68	; 104
    5824:	31 e0       	ldi	r19, 0x01	; 1
    5826:	82 e0       	ldi	r24, 0x02	; 2
    5828:	90 e0       	ldi	r25, 0x00	; 0
    582a:	b9 01       	movw	r22, r18
    582c:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <EEPROM_enumReadByte>
	EEPROM_enumReadByte(MINUTE_SUNSET,&Local_u8EEpromSET_MIN);
    5830:	29 e6       	ldi	r18, 0x69	; 105
    5832:	31 e0       	ldi	r19, 0x01	; 1
    5834:	83 e0       	ldi	r24, 0x03	; 3
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	b9 01       	movw	r22, r18
    583a:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <EEPROM_enumReadByte>
	EEPROM_enumReadByte(HOUR_SUNRISE,&Local_u8EEpromRIS_Hours);
    583e:	2a e6       	ldi	r18, 0x6A	; 106
    5840:	31 e0       	ldi	r19, 0x01	; 1
    5842:	80 e0       	ldi	r24, 0x00	; 0
    5844:	90 e0       	ldi	r25, 0x00	; 0
    5846:	b9 01       	movw	r22, r18
    5848:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <EEPROM_enumReadByte>
	EEPROM_enumReadByte(MINUTE_SUNRISE,&Local_u8EEpromRIS_Min);
    584c:	2b e6       	ldi	r18, 0x6B	; 107
    584e:	31 e0       	ldi	r19, 0x01	; 1
    5850:	81 e0       	ldi	r24, 0x01	; 1
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	b9 01       	movw	r22, r18
    5856:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <EEPROM_enumReadByte>
}
    585a:	cf 91       	pop	r28
    585c:	df 91       	pop	r29
    585e:	08 95       	ret

00005860 <main>:
int main(void)
{
    5860:	df 93       	push	r29
    5862:	cf 93       	push	r28
    5864:	cd b7       	in	r28, 0x3d	; 61
    5866:	de b7       	in	r29, 0x3e	; 62
    5868:	28 97       	sbiw	r28, 0x08	; 8
    586a:	0f b6       	in	r0, 0x3f	; 63
    586c:	f8 94       	cli
    586e:	de bf       	out	0x3e, r29	; 62
    5870:	0f be       	out	0x3f, r0	; 63
    5872:	cd bf       	out	0x3d, r28	; 61
	LCD_enuInit();
    5874:	0e 94 f6 20 	call	0x41ec	; 0x41ec <LCD_enuInit>
	ADC_VoidInit();
    5878:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <ADC_VoidInit>
	LDR_SENSOR_voidInit(ADC_0);
    587c:	80 e0       	ldi	r24, 0x00	; 0
    587e:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <LDR_SENSOR_voidInit>
	EEPROM_void_Init();
    5882:	0e 94 95 29 	call	0x532a	; 0x532a <EEPROM_void_Init>

	u8 local_u8SunSetFlag = SUNRISE;
    5886:	81 e0       	ldi	r24, 0x01	; 1
    5888:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8inti=0 ;
    588a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Cluod_UpdateTime = 0;
    588c:	19 82       	std	Y+1, r1	; 0x01

	RTC_Time Time;
	Time.Seconds = 50;
    588e:	82 e3       	ldi	r24, 0x32	; 50
    5890:	8c 83       	std	Y+4, r24	; 0x04
	Time.Minutes = 15;
    5892:	8f e0       	ldi	r24, 0x0F	; 15
    5894:	8d 83       	std	Y+5, r24	; 0x05
	Time.Hours = 6;
    5896:	86 e0       	ldi	r24, 0x06	; 6
    5898:	8e 83       	std	Y+6, r24	; 0x06
	Time.HoursMode = Hours_24;
    589a:	18 86       	std	Y+8, r1	; 0x08
//	Time.AM_PM = AM;
	RTC_enumUpdateTime(&Time);
    589c:	ce 01       	movw	r24, r28
    589e:	04 96       	adiw	r24, 0x04	; 4
    58a0:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <RTC_enumUpdateTime>

	EEPROM_voidWriteTime(); // this function just write initial data to EEPROM
    58a4:	0e 94 1e 2a 	call	0x543c	; 0x543c <EEPROM_voidWriteTime>
	EEPROM_ReadTime(); // to and read time and save it to the variables to be checked
    58a8:	0e 94 0d 2c 	call	0x581a	; 0x581a <EEPROM_ReadTime>

	while(1)
	{
		/// this Will be valuable in the second release
		if (Local_u8Cluod_UpdateTime == 1)
    58ac:	89 81       	ldd	r24, Y+1	; 0x01
    58ae:	81 30       	cpi	r24, 0x01	; 1
    58b0:	21 f4       	brne	.+8      	; 0x58ba <main+0x5a>
		{
			EEPROM_voidWriteTime(); // This Function will change later in the second release
    58b2:	0e 94 1e 2a 	call	0x543c	; 0x543c <EEPROM_voidWriteTime>
			EEPROM_ReadTime();  // Read New Time after updating
    58b6:	0e 94 0d 2c 	call	0x581a	; 0x581a <EEPROM_ReadTime>
		}

		Local_u8inti=LDR_SNESOR_u8Read(ADC_0); // Reading the Temperature and convert back to analog and return the percentage of Ligh
    58ba:	80 e0       	ldi	r24, 0x00	; 0
    58bc:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <LDR_SNESOR_u8Read>
    58c0:	8a 83       	std	Y+2, r24	; 0x02
		RTC_enumReadTime(&Time); // Read the Time form RTC
    58c2:	ce 01       	movw	r24, r28
    58c4:	04 96       	adiw	r24, 0x04	; 4
    58c6:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <RTC_enumReadTime>

		if(Time.HoursMode==Hours_24)
    58ca:	88 85       	ldd	r24, Y+8	; 0x08
    58cc:	88 23       	and	r24, r24
    58ce:	11 f5       	brne	.+68     	; 0x5914 <main+0xb4>
		{
			/// Checking the Time is after the sunset time or before the sunrise time to keep controlling the light
			if( (Time.Hours > Local_u8EEpromSET_HOURS || ( Time.Hours == Local_u8EEpromSET_HOURS && Time.Minutes == Local_u8EEpromSET_MIN ) ) || (Time.Hours < Local_u8EEpromRIS_Hours || (Time.Hours == Local_u8EEpromRIS_Hours && Time.Minutes == Local_u8EEpromRIS_Min) ) )
    58d0:	9e 81       	ldd	r25, Y+6	; 0x06
    58d2:	80 91 68 01 	lds	r24, 0x0168
    58d6:	89 17       	cp	r24, r25
    58d8:	c8 f0       	brcs	.+50     	; 0x590c <main+0xac>
    58da:	9e 81       	ldd	r25, Y+6	; 0x06
    58dc:	80 91 68 01 	lds	r24, 0x0168
    58e0:	98 17       	cp	r25, r24
    58e2:	29 f4       	brne	.+10     	; 0x58ee <main+0x8e>
    58e4:	9d 81       	ldd	r25, Y+5	; 0x05
    58e6:	80 91 69 01 	lds	r24, 0x0169
    58ea:	98 17       	cp	r25, r24
    58ec:	79 f0       	breq	.+30     	; 0x590c <main+0xac>
    58ee:	9e 81       	ldd	r25, Y+6	; 0x06
    58f0:	80 91 6a 01 	lds	r24, 0x016A
    58f4:	98 17       	cp	r25, r24
    58f6:	50 f0       	brcs	.+20     	; 0x590c <main+0xac>
    58f8:	9e 81       	ldd	r25, Y+6	; 0x06
    58fa:	80 91 6a 01 	lds	r24, 0x016A
    58fe:	98 17       	cp	r25, r24
    5900:	39 f4       	brne	.+14     	; 0x5910 <main+0xb0>
    5902:	9d 81       	ldd	r25, Y+5	; 0x05
    5904:	80 91 6b 01 	lds	r24, 0x016B
    5908:	98 17       	cp	r25, r24
    590a:	11 f4       	brne	.+4      	; 0x5910 <main+0xb0>
			{
				local_u8SunSetFlag = SUNSET; // Raise flag that it's sunset
    590c:	1b 82       	std	Y+3, r1	; 0x03
    590e:	02 c0       	rjmp	.+4      	; 0x5914 <main+0xb4>
			}
			else
			{
				local_u8SunSetFlag = SUNRISE;
    5910:	81 e0       	ldi	r24, 0x01	; 1
    5912:	8b 83       	std	Y+3, r24	; 0x03
			}
		}

		if(local_u8SunSetFlag == SUNSET) // if the Sunset time flag is raised
    5914:	8b 81       	ldd	r24, Y+3	; 0x03
    5916:	88 23       	and	r24, r24
    5918:	09 f0       	breq	.+2      	; 0x591c <main+0xbc>
    591a:	41 c0       	rjmp	.+130    	; 0x599e <main+0x13e>
		{
			/// according to light intensity we control the LED array intensity
			if(Local_u8inti>90)
    591c:	8a 81       	ldd	r24, Y+2	; 0x02
    591e:	8b 35       	cpi	r24, 0x5B	; 91
    5920:	40 f0       	brcs	.+16     	; 0x5932 <main+0xd2>
			{
				T0_PhaseCorrectPwm(0,INVERTED); /// LED is Off
    5922:	60 e0       	ldi	r22, 0x00	; 0
    5924:	70 e0       	ldi	r23, 0x00	; 0
    5926:	80 e0       	ldi	r24, 0x00	; 0
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	41 e0       	ldi	r20, 0x01	; 1
    592c:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <T0_PhaseCorrectPwm>
    5930:	bd cf       	rjmp	.-134    	; 0x58ac <main+0x4c>
			}
			else if(Local_u8inti<90 && Local_u8inti>70)
    5932:	8a 81       	ldd	r24, Y+2	; 0x02
    5934:	8a 35       	cpi	r24, 0x5A	; 90
    5936:	58 f4       	brcc	.+22     	; 0x594e <main+0xee>
    5938:	8a 81       	ldd	r24, Y+2	; 0x02
    593a:	87 34       	cpi	r24, 0x47	; 71
    593c:	40 f0       	brcs	.+16     	; 0x594e <main+0xee>
			{
				T0_PhaseCorrectPwm(30,INVERTED);  /// LED is on by 30% of its full intensity
    593e:	60 e0       	ldi	r22, 0x00	; 0
    5940:	70 e0       	ldi	r23, 0x00	; 0
    5942:	80 ef       	ldi	r24, 0xF0	; 240
    5944:	91 e4       	ldi	r25, 0x41	; 65
    5946:	41 e0       	ldi	r20, 0x01	; 1
    5948:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <T0_PhaseCorrectPwm>
    594c:	af cf       	rjmp	.-162    	; 0x58ac <main+0x4c>
			}
			else if(Local_u8inti>50 && Local_u8inti<70)
    594e:	8a 81       	ldd	r24, Y+2	; 0x02
    5950:	83 33       	cpi	r24, 0x33	; 51
    5952:	58 f0       	brcs	.+22     	; 0x596a <main+0x10a>
    5954:	8a 81       	ldd	r24, Y+2	; 0x02
    5956:	86 34       	cpi	r24, 0x46	; 70
    5958:	40 f4       	brcc	.+16     	; 0x596a <main+0x10a>
			{
				T0_PhaseCorrectPwm(50,INVERTED);	/// LED is on by 50% of its full intensity
    595a:	60 e0       	ldi	r22, 0x00	; 0
    595c:	70 e0       	ldi	r23, 0x00	; 0
    595e:	88 e4       	ldi	r24, 0x48	; 72
    5960:	92 e4       	ldi	r25, 0x42	; 66
    5962:	41 e0       	ldi	r20, 0x01	; 1
    5964:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <T0_PhaseCorrectPwm>
    5968:	a1 cf       	rjmp	.-190    	; 0x58ac <main+0x4c>
			}
			else if(Local_u8inti<50 && Local_u8inti>30)
    596a:	8a 81       	ldd	r24, Y+2	; 0x02
    596c:	82 33       	cpi	r24, 0x32	; 50
    596e:	58 f4       	brcc	.+22     	; 0x5986 <main+0x126>
    5970:	8a 81       	ldd	r24, Y+2	; 0x02
    5972:	8f 31       	cpi	r24, 0x1F	; 31
    5974:	40 f0       	brcs	.+16     	; 0x5986 <main+0x126>
			{
				T0_PhaseCorrectPwm(70,INVERTED); /// LED is on by 70% of its full intensity
    5976:	60 e0       	ldi	r22, 0x00	; 0
    5978:	70 e0       	ldi	r23, 0x00	; 0
    597a:	8c e8       	ldi	r24, 0x8C	; 140
    597c:	92 e4       	ldi	r25, 0x42	; 66
    597e:	41 e0       	ldi	r20, 0x01	; 1
    5980:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <T0_PhaseCorrectPwm>
    5984:	93 cf       	rjmp	.-218    	; 0x58ac <main+0x4c>
			}
			else if(Local_u8inti<30 )
    5986:	8a 81       	ldd	r24, Y+2	; 0x02
    5988:	8e 31       	cpi	r24, 0x1E	; 30
    598a:	08 f0       	brcs	.+2      	; 0x598e <main+0x12e>
    598c:	8f cf       	rjmp	.-226    	; 0x58ac <main+0x4c>
			{
				T0_PhaseCorrectPwm(100,INVERTED); /// LED is on by 100% of its full intensity
    598e:	60 e0       	ldi	r22, 0x00	; 0
    5990:	70 e0       	ldi	r23, 0x00	; 0
    5992:	88 ec       	ldi	r24, 0xC8	; 200
    5994:	92 e4       	ldi	r25, 0x42	; 66
    5996:	41 e0       	ldi	r20, 0x01	; 1
    5998:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <T0_PhaseCorrectPwm>
    599c:	87 cf       	rjmp	.-242    	; 0x58ac <main+0x4c>
			}
		}
		else
		{
			T0_PhaseCorrectPwm(0,INVERTED); /// LED is Off
    599e:	60 e0       	ldi	r22, 0x00	; 0
    59a0:	70 e0       	ldi	r23, 0x00	; 0
    59a2:	80 e0       	ldi	r24, 0x00	; 0
    59a4:	90 e0       	ldi	r25, 0x00	; 0
    59a6:	41 e0       	ldi	r20, 0x01	; 1
    59a8:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <T0_PhaseCorrectPwm>
    59ac:	7f cf       	rjmp	.-258    	; 0x58ac <main+0x4c>

000059ae <__mulsi3>:
    59ae:	62 9f       	mul	r22, r18
    59b0:	d0 01       	movw	r26, r0
    59b2:	73 9f       	mul	r23, r19
    59b4:	f0 01       	movw	r30, r0
    59b6:	82 9f       	mul	r24, r18
    59b8:	e0 0d       	add	r30, r0
    59ba:	f1 1d       	adc	r31, r1
    59bc:	64 9f       	mul	r22, r20
    59be:	e0 0d       	add	r30, r0
    59c0:	f1 1d       	adc	r31, r1
    59c2:	92 9f       	mul	r25, r18
    59c4:	f0 0d       	add	r31, r0
    59c6:	83 9f       	mul	r24, r19
    59c8:	f0 0d       	add	r31, r0
    59ca:	74 9f       	mul	r23, r20
    59cc:	f0 0d       	add	r31, r0
    59ce:	65 9f       	mul	r22, r21
    59d0:	f0 0d       	add	r31, r0
    59d2:	99 27       	eor	r25, r25
    59d4:	72 9f       	mul	r23, r18
    59d6:	b0 0d       	add	r27, r0
    59d8:	e1 1d       	adc	r30, r1
    59da:	f9 1f       	adc	r31, r25
    59dc:	63 9f       	mul	r22, r19
    59de:	b0 0d       	add	r27, r0
    59e0:	e1 1d       	adc	r30, r1
    59e2:	f9 1f       	adc	r31, r25
    59e4:	bd 01       	movw	r22, r26
    59e6:	cf 01       	movw	r24, r30
    59e8:	11 24       	eor	r1, r1
    59ea:	08 95       	ret

000059ec <__udivmodqi4>:
    59ec:	99 1b       	sub	r25, r25
    59ee:	79 e0       	ldi	r23, 0x09	; 9
    59f0:	04 c0       	rjmp	.+8      	; 0x59fa <__udivmodqi4_ep>

000059f2 <__udivmodqi4_loop>:
    59f2:	99 1f       	adc	r25, r25
    59f4:	96 17       	cp	r25, r22
    59f6:	08 f0       	brcs	.+2      	; 0x59fa <__udivmodqi4_ep>
    59f8:	96 1b       	sub	r25, r22

000059fa <__udivmodqi4_ep>:
    59fa:	88 1f       	adc	r24, r24
    59fc:	7a 95       	dec	r23
    59fe:	c9 f7       	brne	.-14     	; 0x59f2 <__udivmodqi4_loop>
    5a00:	80 95       	com	r24
    5a02:	08 95       	ret

00005a04 <__udivmodsi4>:
    5a04:	a1 e2       	ldi	r26, 0x21	; 33
    5a06:	1a 2e       	mov	r1, r26
    5a08:	aa 1b       	sub	r26, r26
    5a0a:	bb 1b       	sub	r27, r27
    5a0c:	fd 01       	movw	r30, r26
    5a0e:	0d c0       	rjmp	.+26     	; 0x5a2a <__udivmodsi4_ep>

00005a10 <__udivmodsi4_loop>:
    5a10:	aa 1f       	adc	r26, r26
    5a12:	bb 1f       	adc	r27, r27
    5a14:	ee 1f       	adc	r30, r30
    5a16:	ff 1f       	adc	r31, r31
    5a18:	a2 17       	cp	r26, r18
    5a1a:	b3 07       	cpc	r27, r19
    5a1c:	e4 07       	cpc	r30, r20
    5a1e:	f5 07       	cpc	r31, r21
    5a20:	20 f0       	brcs	.+8      	; 0x5a2a <__udivmodsi4_ep>
    5a22:	a2 1b       	sub	r26, r18
    5a24:	b3 0b       	sbc	r27, r19
    5a26:	e4 0b       	sbc	r30, r20
    5a28:	f5 0b       	sbc	r31, r21

00005a2a <__udivmodsi4_ep>:
    5a2a:	66 1f       	adc	r22, r22
    5a2c:	77 1f       	adc	r23, r23
    5a2e:	88 1f       	adc	r24, r24
    5a30:	99 1f       	adc	r25, r25
    5a32:	1a 94       	dec	r1
    5a34:	69 f7       	brne	.-38     	; 0x5a10 <__udivmodsi4_loop>
    5a36:	60 95       	com	r22
    5a38:	70 95       	com	r23
    5a3a:	80 95       	com	r24
    5a3c:	90 95       	com	r25
    5a3e:	9b 01       	movw	r18, r22
    5a40:	ac 01       	movw	r20, r24
    5a42:	bd 01       	movw	r22, r26
    5a44:	cf 01       	movw	r24, r30
    5a46:	08 95       	ret

00005a48 <__prologue_saves__>:
    5a48:	2f 92       	push	r2
    5a4a:	3f 92       	push	r3
    5a4c:	4f 92       	push	r4
    5a4e:	5f 92       	push	r5
    5a50:	6f 92       	push	r6
    5a52:	7f 92       	push	r7
    5a54:	8f 92       	push	r8
    5a56:	9f 92       	push	r9
    5a58:	af 92       	push	r10
    5a5a:	bf 92       	push	r11
    5a5c:	cf 92       	push	r12
    5a5e:	df 92       	push	r13
    5a60:	ef 92       	push	r14
    5a62:	ff 92       	push	r15
    5a64:	0f 93       	push	r16
    5a66:	1f 93       	push	r17
    5a68:	cf 93       	push	r28
    5a6a:	df 93       	push	r29
    5a6c:	cd b7       	in	r28, 0x3d	; 61
    5a6e:	de b7       	in	r29, 0x3e	; 62
    5a70:	ca 1b       	sub	r28, r26
    5a72:	db 0b       	sbc	r29, r27
    5a74:	0f b6       	in	r0, 0x3f	; 63
    5a76:	f8 94       	cli
    5a78:	de bf       	out	0x3e, r29	; 62
    5a7a:	0f be       	out	0x3f, r0	; 63
    5a7c:	cd bf       	out	0x3d, r28	; 61
    5a7e:	09 94       	ijmp

00005a80 <__epilogue_restores__>:
    5a80:	2a 88       	ldd	r2, Y+18	; 0x12
    5a82:	39 88       	ldd	r3, Y+17	; 0x11
    5a84:	48 88       	ldd	r4, Y+16	; 0x10
    5a86:	5f 84       	ldd	r5, Y+15	; 0x0f
    5a88:	6e 84       	ldd	r6, Y+14	; 0x0e
    5a8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5a8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a90:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a92:	b9 84       	ldd	r11, Y+9	; 0x09
    5a94:	c8 84       	ldd	r12, Y+8	; 0x08
    5a96:	df 80       	ldd	r13, Y+7	; 0x07
    5a98:	ee 80       	ldd	r14, Y+6	; 0x06
    5a9a:	fd 80       	ldd	r15, Y+5	; 0x05
    5a9c:	0c 81       	ldd	r16, Y+4	; 0x04
    5a9e:	1b 81       	ldd	r17, Y+3	; 0x03
    5aa0:	aa 81       	ldd	r26, Y+2	; 0x02
    5aa2:	b9 81       	ldd	r27, Y+1	; 0x01
    5aa4:	ce 0f       	add	r28, r30
    5aa6:	d1 1d       	adc	r29, r1
    5aa8:	0f b6       	in	r0, 0x3f	; 63
    5aaa:	f8 94       	cli
    5aac:	de bf       	out	0x3e, r29	; 62
    5aae:	0f be       	out	0x3f, r0	; 63
    5ab0:	cd bf       	out	0x3d, r28	; 61
    5ab2:	ed 01       	movw	r28, r26
    5ab4:	08 95       	ret

00005ab6 <_exit>:
    5ab6:	f8 94       	cli

00005ab8 <__stop_program>:
    5ab8:	ff cf       	rjmp	.-2      	; 0x5ab8 <__stop_program>
